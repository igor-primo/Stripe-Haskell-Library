-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBillingCreditBalanceSummary
module StripeAPI.Operations.GetBillingCreditBalanceSummary where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/billing/credit_balance_summary
-- 
-- \<p>Retrieves the credit balance summary for a customer.\<\/p>
getBillingCreditBalanceSummary :: forall m . StripeAPI.Common.MonadHTTP m => GetBillingCreditBalanceSummaryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetBillingCreditBalanceSummaryResponse) -- ^ Monadic computation which returns the result of the operation
getBillingCreditBalanceSummary parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBillingCreditBalanceSummaryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBillingCreditBalanceSummaryResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Billing'creditBalanceSummary)
                                                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetBillingCreditBalanceSummaryResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") "/v1/billing/credit_balance_summary" [StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "customer") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getBillingCreditBalanceSummaryParametersQueryCustomer parameters)) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBillingCreditBalanceSummaryParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "filter") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getBillingCreditBalanceSummaryParametersQueryFilter parameters)) (Data.Text.Internal.pack "deepObject") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/billing\/credit_balance_summary.GET.parameters@ in the specification.
-- 
-- 
data GetBillingCreditBalanceSummaryParameters = GetBillingCreditBalanceSummaryParameters {
  -- | queryCustomer: Represents the parameter named \'customer\'
  -- 
  -- The customer for which to fetch credit balance summary.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getBillingCreditBalanceSummaryParametersQueryCustomer :: Data.Text.Internal.Text
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getBillingCreditBalanceSummaryParametersQueryExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | queryFilter: Represents the parameter named \'filter\'
  -- 
  -- The filter criteria for the credit balance summary.
  , getBillingCreditBalanceSummaryParametersQueryFilter :: GetBillingCreditBalanceSummaryParametersQueryFilter'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingCreditBalanceSummaryParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryCustomer" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryCustomer obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryExpand obj) : ["queryFilter" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryFilter obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryCustomer" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryCustomer obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryExpand obj) : ["queryFilter" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryFilter obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingCreditBalanceSummaryParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBillingCreditBalanceSummaryParameters" (\obj -> ((GHC.Base.pure GetBillingCreditBalanceSummaryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryFilter"))}
-- | Create a new 'GetBillingCreditBalanceSummaryParameters' with all required fields.
mkGetBillingCreditBalanceSummaryParameters :: Data.Text.Internal.Text -- ^ 'getBillingCreditBalanceSummaryParametersQueryCustomer'
  -> GetBillingCreditBalanceSummaryParametersQueryFilter' -- ^ 'getBillingCreditBalanceSummaryParametersQueryFilter'
  -> GetBillingCreditBalanceSummaryParameters
mkGetBillingCreditBalanceSummaryParameters getBillingCreditBalanceSummaryParametersQueryCustomer getBillingCreditBalanceSummaryParametersQueryFilter = GetBillingCreditBalanceSummaryParameters{getBillingCreditBalanceSummaryParametersQueryCustomer = getBillingCreditBalanceSummaryParametersQueryCustomer,
                                                                                                                                                                                                getBillingCreditBalanceSummaryParametersQueryExpand = GHC.Maybe.Nothing,
                                                                                                                                                                                                getBillingCreditBalanceSummaryParametersQueryFilter = getBillingCreditBalanceSummaryParametersQueryFilter}
-- | Defines the object schema located at @paths.\/v1\/billing\/credit_balance_summary.GET.parameters.properties.queryFilter@ in the specification.
-- 
-- Represents the parameter named \'filter\'
-- 
-- The filter criteria for the credit balance summary.
data GetBillingCreditBalanceSummaryParametersQueryFilter' = GetBillingCreditBalanceSummaryParametersQueryFilter' {
  -- | applicability_scope
  getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope :: (GHC.Maybe.Maybe GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope')
  -- | credit_grant
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getBillingCreditBalanceSummaryParametersQueryFilter'CreditGrant :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type
  , getBillingCreditBalanceSummaryParametersQueryFilter'Type :: GetBillingCreditBalanceSummaryParametersQueryFilter'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingCreditBalanceSummaryParametersQueryFilter'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applicability_scope" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_grant" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'CreditGrant obj) : ["type" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryFilter'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("applicability_scope" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_grant" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'CreditGrant obj) : ["type" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryFilter'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingCreditBalanceSummaryParametersQueryFilter'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBillingCreditBalanceSummaryParametersQueryFilter'" (\obj -> ((GHC.Base.pure GetBillingCreditBalanceSummaryParametersQueryFilter' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "applicability_scope")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "credit_grant")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'GetBillingCreditBalanceSummaryParametersQueryFilter'' with all required fields.
mkGetBillingCreditBalanceSummaryParametersQueryFilter' :: GetBillingCreditBalanceSummaryParametersQueryFilter'Type' -- ^ 'getBillingCreditBalanceSummaryParametersQueryFilter'Type'
  -> GetBillingCreditBalanceSummaryParametersQueryFilter'
mkGetBillingCreditBalanceSummaryParametersQueryFilter' getBillingCreditBalanceSummaryParametersQueryFilter'Type = GetBillingCreditBalanceSummaryParametersQueryFilter'{getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope = GHC.Maybe.Nothing,
                                                                                                                                                                       getBillingCreditBalanceSummaryParametersQueryFilter'CreditGrant = GHC.Maybe.Nothing,
                                                                                                                                                                       getBillingCreditBalanceSummaryParametersQueryFilter'Type = getBillingCreditBalanceSummaryParametersQueryFilter'Type}
-- | Defines the object schema located at @paths.\/v1\/billing\/credit_balance_summary.GET.parameters.properties.queryFilter.properties.applicability_scope@ in the specification.
-- 
-- 
data GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope' = GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope' {
  -- | price_type
  getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType :: (GHC.Maybe.Maybe GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType')
  -- | prices
  , getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices :: (GHC.Maybe.Maybe [GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_type" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("prices" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_type" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("prices" Data.Aeson.Types.ToJSON..=)) (getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'" (\obj -> (GHC.Base.pure GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "prices"))}
-- | Create a new 'GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'' with all required fields.
mkGetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope' :: GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'
mkGetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope' = GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'{getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType = GHC.Maybe.Nothing,
                                                                                                                                                    getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/billing\/credit_balance_summary.GET.parameters.properties.queryFilter.properties.applicability_scope.properties.price_type@ in the specification.
-- 
-- 
data GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType' =
   GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'EnumMetered -- ^ Represents the JSON value @"metered"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'
    where {toJSON (GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'Other val) = val;
           toJSON (GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'EnumMetered) = "metered"}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "metered" -> GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'EnumMetered
                                             | GHC.Base.otherwise -> GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'PriceType'Other val)}
-- | Defines the object schema located at @paths.\/v1\/billing\/credit_balance_summary.GET.parameters.properties.queryFilter.properties.applicability_scope.properties.prices.items@ in the specification.
-- 
-- 
data GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices' = GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices' {
  -- | id
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'Id :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'Id obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'Id obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'" (\obj -> GHC.Base.pure GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))}
-- | Create a new 'GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'' with all required fields.
mkGetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices' :: Data.Text.Internal.Text -- ^ 'getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'Id'
  -> GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'
mkGetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices' getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'Id = GetBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'{getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'Id = getBillingCreditBalanceSummaryParametersQueryFilter'ApplicabilityScope'Prices'Id}
-- | Defines the enum schema located at @paths.\/v1\/billing\/credit_balance_summary.GET.parameters.properties.queryFilter.properties.type@ in the specification.
-- 
-- 
data GetBillingCreditBalanceSummaryParametersQueryFilter'Type' =
   GetBillingCreditBalanceSummaryParametersQueryFilter'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetBillingCreditBalanceSummaryParametersQueryFilter'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetBillingCreditBalanceSummaryParametersQueryFilter'Type'EnumApplicabilityScope -- ^ Represents the JSON value @"applicability_scope"@
  | GetBillingCreditBalanceSummaryParametersQueryFilter'Type'EnumCreditGrant -- ^ Represents the JSON value @"credit_grant"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingCreditBalanceSummaryParametersQueryFilter'Type'
    where {toJSON (GetBillingCreditBalanceSummaryParametersQueryFilter'Type'Other val) = val;
           toJSON (GetBillingCreditBalanceSummaryParametersQueryFilter'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetBillingCreditBalanceSummaryParametersQueryFilter'Type'EnumApplicabilityScope) = "applicability_scope";
           toJSON (GetBillingCreditBalanceSummaryParametersQueryFilter'Type'EnumCreditGrant) = "credit_grant"}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingCreditBalanceSummaryParametersQueryFilter'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "applicability_scope" -> GetBillingCreditBalanceSummaryParametersQueryFilter'Type'EnumApplicabilityScope
                                             | val GHC.Classes.== "credit_grant" -> GetBillingCreditBalanceSummaryParametersQueryFilter'Type'EnumCreditGrant
                                             | GHC.Base.otherwise -> GetBillingCreditBalanceSummaryParametersQueryFilter'Type'Other val)}
-- | Represents a response of the operation 'getBillingCreditBalanceSummary'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBillingCreditBalanceSummaryResponseError' is used.
data GetBillingCreditBalanceSummaryResponse =
   GetBillingCreditBalanceSummaryResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBillingCreditBalanceSummaryResponse200 Billing'creditBalanceSummary -- ^ Successful response.
  | GetBillingCreditBalanceSummaryResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
