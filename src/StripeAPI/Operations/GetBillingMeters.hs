-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBillingMeters
module StripeAPI.Operations.GetBillingMeters where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/billing/meters
-- 
-- \<p>Retrieve a list of billing meters.\<\/p>
getBillingMeters :: forall m . StripeAPI.Common.MonadHTTP m => GetBillingMetersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetBillingMetersResponse) -- ^ Monadic computation which returns the result of the operation
getBillingMeters parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBillingMetersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBillingMetersResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBillingMetersResponseBody200)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetBillingMetersResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                    Error)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") "/v1/billing/meters" [StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBillingMetersParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                       StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBillingMetersParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                       StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBillingMetersParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                       StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBillingMetersParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                       StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBillingMetersParametersQueryStatus parameters) (Data.Text.Internal.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/billing\/meters.GET.parameters@ in the specification.
-- 
-- 
data GetBillingMetersParameters = GetBillingMetersParameters {
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getBillingMetersParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getBillingMetersParametersQueryExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getBillingMetersParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getBillingMetersParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryStatus: Represents the parameter named \'status\'
  -- 
  -- Filter results to only include meters with the given status.
  , getBillingMetersParametersQueryStatus :: (GHC.Maybe.Maybe GetBillingMetersParametersQueryStatus')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingMetersParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryStatus obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getBillingMetersParametersQueryStatus obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingMetersParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBillingMetersParameters" (\obj -> ((((GHC.Base.pure GetBillingMetersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStatus"))}
-- | Create a new 'GetBillingMetersParameters' with all required fields.
mkGetBillingMetersParameters :: GetBillingMetersParameters
mkGetBillingMetersParameters = GetBillingMetersParameters{getBillingMetersParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                          getBillingMetersParametersQueryExpand = GHC.Maybe.Nothing,
                                                          getBillingMetersParametersQueryLimit = GHC.Maybe.Nothing,
                                                          getBillingMetersParametersQueryStartingAfter = GHC.Maybe.Nothing,
                                                          getBillingMetersParametersQueryStatus = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/billing\/meters.GET.parameters.properties.queryStatus@ in the specification.
-- 
-- Represents the parameter named \'status\'
-- 
-- Filter results to only include meters with the given status.
data GetBillingMetersParametersQueryStatus' =
   GetBillingMetersParametersQueryStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetBillingMetersParametersQueryStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetBillingMetersParametersQueryStatus'EnumActive -- ^ Represents the JSON value @"active"@
  | GetBillingMetersParametersQueryStatus'EnumInactive -- ^ Represents the JSON value @"inactive"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingMetersParametersQueryStatus'
    where {toJSON (GetBillingMetersParametersQueryStatus'Other val) = val;
           toJSON (GetBillingMetersParametersQueryStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetBillingMetersParametersQueryStatus'EnumActive) = "active";
           toJSON (GetBillingMetersParametersQueryStatus'EnumInactive) = "inactive"}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingMetersParametersQueryStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "active" -> GetBillingMetersParametersQueryStatus'EnumActive
                                             | val GHC.Classes.== "inactive" -> GetBillingMetersParametersQueryStatus'EnumInactive
                                             | GHC.Base.otherwise -> GetBillingMetersParametersQueryStatus'Other val)}
-- | Represents a response of the operation 'getBillingMeters'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBillingMetersResponseError' is used.
data GetBillingMetersResponse =
   GetBillingMetersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBillingMetersResponse200 GetBillingMetersResponseBody200 -- ^ Successful response.
  | GetBillingMetersResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/billing\/meters.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBillingMetersResponseBody200 = GetBillingMetersResponseBody200 {
  -- | data
  getBillingMetersResponseBody200Data :: [Billing'meter]
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getBillingMetersResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  -- * Must match pattern \'^\/v1\/billing\/meters\'
  , getBillingMetersResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBillingMetersResponseBody200
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getBillingMetersResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getBillingMetersResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getBillingMetersResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getBillingMetersResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getBillingMetersResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getBillingMetersResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetBillingMetersResponseBody200
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBillingMetersResponseBody200" (\obj -> ((GHC.Base.pure GetBillingMetersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))}
-- | Create a new 'GetBillingMetersResponseBody200' with all required fields.
mkGetBillingMetersResponseBody200 :: [Billing'meter] -- ^ 'getBillingMetersResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getBillingMetersResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getBillingMetersResponseBody200Url'
  -> GetBillingMetersResponseBody200
mkGetBillingMetersResponseBody200 getBillingMetersResponseBody200Data getBillingMetersResponseBody200HasMore getBillingMetersResponseBody200Url = GetBillingMetersResponseBody200{getBillingMetersResponseBody200Data = getBillingMetersResponseBody200Data,
                                                                                                                                                                                  getBillingMetersResponseBody200HasMore = getBillingMetersResponseBody200HasMore,
                                                                                                                                                                                  getBillingMetersResponseBody200Url = getBillingMetersResponseBody200Url}
