-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getInvoicePayments
module StripeAPI.Operations.GetInvoicePayments where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/invoice_payments
-- 
-- \<p>When retrieving an invoice, there is an includable payments property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of payments.\<\/p>
getInvoicePayments :: forall m . StripeAPI.Common.MonadHTTP m => GetInvoicePaymentsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetInvoicePaymentsResponse) -- ^ Monadic computation which returns the result of the operation
getInvoicePayments parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetInvoicePaymentsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetInvoicePaymentsResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetInvoicePaymentsResponseBody200)
                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetInvoicePaymentsResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                          Error)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") "/v1/invoice_payments" [StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicePaymentsParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                             StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicePaymentsParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                             StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "invoice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicePaymentsParametersQueryInvoice parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                             StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicePaymentsParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                             StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "payment") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicePaymentsParametersQueryPayment parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                             StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicePaymentsParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                             StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicePaymentsParametersQueryStatus parameters) (Data.Text.Internal.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/invoice_payments.GET.parameters@ in the specification.
-- 
-- 
data GetInvoicePaymentsParameters = GetInvoicePaymentsParameters {
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getInvoicePaymentsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getInvoicePaymentsParametersQueryExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | queryInvoice: Represents the parameter named \'invoice\'
  -- 
  -- The identifier of the invoice whose payments to return.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getInvoicePaymentsParametersQueryInvoice :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getInvoicePaymentsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPayment: Represents the parameter named \'payment\'
  -- 
  -- The payment details of the invoice payments to return.
  , getInvoicePaymentsParametersQueryPayment :: (GHC.Maybe.Maybe GetInvoicePaymentsParametersQueryPayment')
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getInvoicePaymentsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryStatus: Represents the parameter named \'status\'
  -- 
  -- The status of the invoice payments to return.
  , getInvoicePaymentsParametersQueryStatus :: (GHC.Maybe.Maybe GetInvoicePaymentsParametersQueryStatus')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicePaymentsParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInvoice" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryInvoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPayment" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryPayment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryStatus obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInvoice" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryInvoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPayment" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryPayment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryStatus obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicePaymentsParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicePaymentsParameters" (\obj -> ((((((GHC.Base.pure GetInvoicePaymentsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryInvoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPayment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStatus"))}
-- | Create a new 'GetInvoicePaymentsParameters' with all required fields.
mkGetInvoicePaymentsParameters :: GetInvoicePaymentsParameters
mkGetInvoicePaymentsParameters = GetInvoicePaymentsParameters{getInvoicePaymentsParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                              getInvoicePaymentsParametersQueryExpand = GHC.Maybe.Nothing,
                                                              getInvoicePaymentsParametersQueryInvoice = GHC.Maybe.Nothing,
                                                              getInvoicePaymentsParametersQueryLimit = GHC.Maybe.Nothing,
                                                              getInvoicePaymentsParametersQueryPayment = GHC.Maybe.Nothing,
                                                              getInvoicePaymentsParametersQueryStartingAfter = GHC.Maybe.Nothing,
                                                              getInvoicePaymentsParametersQueryStatus = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/invoice_payments.GET.parameters.properties.queryPayment@ in the specification.
-- 
-- Represents the parameter named \'payment\'
-- 
-- The payment details of the invoice payments to return.
data GetInvoicePaymentsParametersQueryPayment' = GetInvoicePaymentsParametersQueryPayment' {
  -- | payment_intent
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getInvoicePaymentsParametersQueryPayment'PaymentIntent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type
  , getInvoicePaymentsParametersQueryPayment'Type :: GetInvoicePaymentsParametersQueryPayment'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicePaymentsParametersQueryPayment'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryPayment'PaymentIntent obj) : ["type" Data.Aeson.Types.ToJSON..= getInvoicePaymentsParametersQueryPayment'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (getInvoicePaymentsParametersQueryPayment'PaymentIntent obj) : ["type" Data.Aeson.Types.ToJSON..= getInvoicePaymentsParametersQueryPayment'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicePaymentsParametersQueryPayment'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicePaymentsParametersQueryPayment'" (\obj -> (GHC.Base.pure GetInvoicePaymentsParametersQueryPayment' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'GetInvoicePaymentsParametersQueryPayment'' with all required fields.
mkGetInvoicePaymentsParametersQueryPayment' :: GetInvoicePaymentsParametersQueryPayment'Type' -- ^ 'getInvoicePaymentsParametersQueryPayment'Type'
  -> GetInvoicePaymentsParametersQueryPayment'
mkGetInvoicePaymentsParametersQueryPayment' getInvoicePaymentsParametersQueryPayment'Type = GetInvoicePaymentsParametersQueryPayment'{getInvoicePaymentsParametersQueryPayment'PaymentIntent = GHC.Maybe.Nothing,
                                                                                                                                      getInvoicePaymentsParametersQueryPayment'Type = getInvoicePaymentsParametersQueryPayment'Type}
-- | Defines the enum schema located at @paths.\/v1\/invoice_payments.GET.parameters.properties.queryPayment.properties.type@ in the specification.
-- 
-- 
data GetInvoicePaymentsParametersQueryPayment'Type' =
   GetInvoicePaymentsParametersQueryPayment'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetInvoicePaymentsParametersQueryPayment'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetInvoicePaymentsParametersQueryPayment'Type'EnumPaymentIntent -- ^ Represents the JSON value @"payment_intent"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicePaymentsParametersQueryPayment'Type'
    where {toJSON (GetInvoicePaymentsParametersQueryPayment'Type'Other val) = val;
           toJSON (GetInvoicePaymentsParametersQueryPayment'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetInvoicePaymentsParametersQueryPayment'Type'EnumPaymentIntent) = "payment_intent"}
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicePaymentsParametersQueryPayment'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "payment_intent" -> GetInvoicePaymentsParametersQueryPayment'Type'EnumPaymentIntent
                                             | GHC.Base.otherwise -> GetInvoicePaymentsParametersQueryPayment'Type'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/invoice_payments.GET.parameters.properties.queryStatus@ in the specification.
-- 
-- Represents the parameter named \'status\'
-- 
-- The status of the invoice payments to return.
data GetInvoicePaymentsParametersQueryStatus' =
   GetInvoicePaymentsParametersQueryStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetInvoicePaymentsParametersQueryStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetInvoicePaymentsParametersQueryStatus'EnumCanceled -- ^ Represents the JSON value @"canceled"@
  | GetInvoicePaymentsParametersQueryStatus'EnumOpen -- ^ Represents the JSON value @"open"@
  | GetInvoicePaymentsParametersQueryStatus'EnumPaid -- ^ Represents the JSON value @"paid"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicePaymentsParametersQueryStatus'
    where {toJSON (GetInvoicePaymentsParametersQueryStatus'Other val) = val;
           toJSON (GetInvoicePaymentsParametersQueryStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetInvoicePaymentsParametersQueryStatus'EnumCanceled) = "canceled";
           toJSON (GetInvoicePaymentsParametersQueryStatus'EnumOpen) = "open";
           toJSON (GetInvoicePaymentsParametersQueryStatus'EnumPaid) = "paid"}
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicePaymentsParametersQueryStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "canceled" -> GetInvoicePaymentsParametersQueryStatus'EnumCanceled
                                             | val GHC.Classes.== "open" -> GetInvoicePaymentsParametersQueryStatus'EnumOpen
                                             | val GHC.Classes.== "paid" -> GetInvoicePaymentsParametersQueryStatus'EnumPaid
                                             | GHC.Base.otherwise -> GetInvoicePaymentsParametersQueryStatus'Other val)}
-- | Represents a response of the operation 'getInvoicePayments'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetInvoicePaymentsResponseError' is used.
data GetInvoicePaymentsResponse =
   GetInvoicePaymentsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetInvoicePaymentsResponse200 GetInvoicePaymentsResponseBody200 -- ^ Successful response.
  | GetInvoicePaymentsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/invoice_payments.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetInvoicePaymentsResponseBody200 = GetInvoicePaymentsResponseBody200 {
  -- | data: Details about each object.
  getInvoicePaymentsResponseBody200Data :: [InvoicePayment]
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getInvoicePaymentsResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getInvoicePaymentsResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicePaymentsResponseBody200
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getInvoicePaymentsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getInvoicePaymentsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getInvoicePaymentsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getInvoicePaymentsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getInvoicePaymentsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getInvoicePaymentsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicePaymentsResponseBody200
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicePaymentsResponseBody200" (\obj -> ((GHC.Base.pure GetInvoicePaymentsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))}
-- | Create a new 'GetInvoicePaymentsResponseBody200' with all required fields.
mkGetInvoicePaymentsResponseBody200 :: [InvoicePayment] -- ^ 'getInvoicePaymentsResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getInvoicePaymentsResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getInvoicePaymentsResponseBody200Url'
  -> GetInvoicePaymentsResponseBody200
mkGetInvoicePaymentsResponseBody200 getInvoicePaymentsResponseBody200Data getInvoicePaymentsResponseBody200HasMore getInvoicePaymentsResponseBody200Url = GetInvoicePaymentsResponseBody200{getInvoicePaymentsResponseBody200Data = getInvoicePaymentsResponseBody200Data,
                                                                                                                                                                                            getInvoicePaymentsResponseBody200HasMore = getInvoicePaymentsResponseBody200HasMore,
                                                                                                                                                                                            getInvoicePaymentsResponseBody200Url = getInvoicePaymentsResponseBody200Url}
