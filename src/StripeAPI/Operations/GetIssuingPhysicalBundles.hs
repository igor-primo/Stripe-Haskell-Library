-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getIssuingPhysicalBundles
module StripeAPI.Operations.GetIssuingPhysicalBundles where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/issuing/physical_bundles
-- 
-- \<p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\<\/p>
getIssuingPhysicalBundles :: forall m . StripeAPI.Common.MonadHTTP m => GetIssuingPhysicalBundlesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetIssuingPhysicalBundlesResponse) -- ^ Monadic computation which returns the result of the operation
getIssuingPhysicalBundles parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetIssuingPhysicalBundlesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIssuingPhysicalBundlesResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetIssuingPhysicalBundlesResponseBody200)
                                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetIssuingPhysicalBundlesResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               Error)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") "/v1/issuing/physical_bundles" [StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingPhysicalBundlesParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                   StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingPhysicalBundlesParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                   StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingPhysicalBundlesParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                   StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingPhysicalBundlesParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                   StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingPhysicalBundlesParametersQueryStatus parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                                   StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingPhysicalBundlesParametersQueryType parameters) (Data.Text.Internal.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/issuing\/physical_bundles.GET.parameters@ in the specification.
-- 
-- 
data GetIssuingPhysicalBundlesParameters = GetIssuingPhysicalBundlesParameters {
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getIssuingPhysicalBundlesParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getIssuingPhysicalBundlesParametersQueryExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getIssuingPhysicalBundlesParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getIssuingPhysicalBundlesParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryStatus: Represents the parameter named \'status\'
  -- 
  -- Only return physical bundles with the given status.
  , getIssuingPhysicalBundlesParametersQueryStatus :: (GHC.Maybe.Maybe GetIssuingPhysicalBundlesParametersQueryStatus')
  -- | queryType: Represents the parameter named \'type\'
  -- 
  -- Only return physical bundles with the given type.
  , getIssuingPhysicalBundlesParametersQueryType :: (GHC.Maybe.Maybe GetIssuingPhysicalBundlesParametersQueryType')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingPhysicalBundlesParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryType obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getIssuingPhysicalBundlesParametersQueryType obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingPhysicalBundlesParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingPhysicalBundlesParameters" (\obj -> (((((GHC.Base.pure GetIssuingPhysicalBundlesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryType"))}
-- | Create a new 'GetIssuingPhysicalBundlesParameters' with all required fields.
mkGetIssuingPhysicalBundlesParameters :: GetIssuingPhysicalBundlesParameters
mkGetIssuingPhysicalBundlesParameters = GetIssuingPhysicalBundlesParameters{getIssuingPhysicalBundlesParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                                            getIssuingPhysicalBundlesParametersQueryExpand = GHC.Maybe.Nothing,
                                                                            getIssuingPhysicalBundlesParametersQueryLimit = GHC.Maybe.Nothing,
                                                                            getIssuingPhysicalBundlesParametersQueryStartingAfter = GHC.Maybe.Nothing,
                                                                            getIssuingPhysicalBundlesParametersQueryStatus = GHC.Maybe.Nothing,
                                                                            getIssuingPhysicalBundlesParametersQueryType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/issuing\/physical_bundles.GET.parameters.properties.queryStatus@ in the specification.
-- 
-- Represents the parameter named \'status\'
-- 
-- Only return physical bundles with the given status.
data GetIssuingPhysicalBundlesParametersQueryStatus' =
   GetIssuingPhysicalBundlesParametersQueryStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetIssuingPhysicalBundlesParametersQueryStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetIssuingPhysicalBundlesParametersQueryStatus'EnumActive -- ^ Represents the JSON value @"active"@
  | GetIssuingPhysicalBundlesParametersQueryStatus'EnumInactive -- ^ Represents the JSON value @"inactive"@
  | GetIssuingPhysicalBundlesParametersQueryStatus'EnumReview -- ^ Represents the JSON value @"review"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingPhysicalBundlesParametersQueryStatus'
    where {toJSON (GetIssuingPhysicalBundlesParametersQueryStatus'Other val) = val;
           toJSON (GetIssuingPhysicalBundlesParametersQueryStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetIssuingPhysicalBundlesParametersQueryStatus'EnumActive) = "active";
           toJSON (GetIssuingPhysicalBundlesParametersQueryStatus'EnumInactive) = "inactive";
           toJSON (GetIssuingPhysicalBundlesParametersQueryStatus'EnumReview) = "review"}
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingPhysicalBundlesParametersQueryStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "active" -> GetIssuingPhysicalBundlesParametersQueryStatus'EnumActive
                                             | val GHC.Classes.== "inactive" -> GetIssuingPhysicalBundlesParametersQueryStatus'EnumInactive
                                             | val GHC.Classes.== "review" -> GetIssuingPhysicalBundlesParametersQueryStatus'EnumReview
                                             | GHC.Base.otherwise -> GetIssuingPhysicalBundlesParametersQueryStatus'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/issuing\/physical_bundles.GET.parameters.properties.queryType@ in the specification.
-- 
-- Represents the parameter named \'type\'
-- 
-- Only return physical bundles with the given type.
data GetIssuingPhysicalBundlesParametersQueryType' =
   GetIssuingPhysicalBundlesParametersQueryType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetIssuingPhysicalBundlesParametersQueryType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetIssuingPhysicalBundlesParametersQueryType'EnumCustom -- ^ Represents the JSON value @"custom"@
  | GetIssuingPhysicalBundlesParametersQueryType'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingPhysicalBundlesParametersQueryType'
    where {toJSON (GetIssuingPhysicalBundlesParametersQueryType'Other val) = val;
           toJSON (GetIssuingPhysicalBundlesParametersQueryType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetIssuingPhysicalBundlesParametersQueryType'EnumCustom) = "custom";
           toJSON (GetIssuingPhysicalBundlesParametersQueryType'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingPhysicalBundlesParametersQueryType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "custom" -> GetIssuingPhysicalBundlesParametersQueryType'EnumCustom
                                             | val GHC.Classes.== "standard" -> GetIssuingPhysicalBundlesParametersQueryType'EnumStandard
                                             | GHC.Base.otherwise -> GetIssuingPhysicalBundlesParametersQueryType'Other val)}
-- | Represents a response of the operation 'getIssuingPhysicalBundles'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIssuingPhysicalBundlesResponseError' is used.
data GetIssuingPhysicalBundlesResponse =
   GetIssuingPhysicalBundlesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetIssuingPhysicalBundlesResponse200 GetIssuingPhysicalBundlesResponseBody200 -- ^ Successful response.
  | GetIssuingPhysicalBundlesResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/issuing\/physical_bundles.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIssuingPhysicalBundlesResponseBody200 = GetIssuingPhysicalBundlesResponseBody200 {
  -- | data
  getIssuingPhysicalBundlesResponseBody200Data :: [Issuing'physicalBundle]
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getIssuingPhysicalBundlesResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  -- * Must match pattern \'^\/v1\/issuing\/physical_bundles\'
  , getIssuingPhysicalBundlesResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingPhysicalBundlesResponseBody200
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getIssuingPhysicalBundlesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getIssuingPhysicalBundlesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getIssuingPhysicalBundlesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getIssuingPhysicalBundlesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getIssuingPhysicalBundlesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getIssuingPhysicalBundlesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingPhysicalBundlesResponseBody200
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingPhysicalBundlesResponseBody200" (\obj -> ((GHC.Base.pure GetIssuingPhysicalBundlesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))}
-- | Create a new 'GetIssuingPhysicalBundlesResponseBody200' with all required fields.
mkGetIssuingPhysicalBundlesResponseBody200 :: [Issuing'physicalBundle] -- ^ 'getIssuingPhysicalBundlesResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getIssuingPhysicalBundlesResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getIssuingPhysicalBundlesResponseBody200Url'
  -> GetIssuingPhysicalBundlesResponseBody200
mkGetIssuingPhysicalBundlesResponseBody200 getIssuingPhysicalBundlesResponseBody200Data getIssuingPhysicalBundlesResponseBody200HasMore getIssuingPhysicalBundlesResponseBody200Url = GetIssuingPhysicalBundlesResponseBody200{getIssuingPhysicalBundlesResponseBody200Data = getIssuingPhysicalBundlesResponseBody200Data,
                                                                                                                                                                                                                               getIssuingPhysicalBundlesResponseBody200HasMore = getIssuingPhysicalBundlesResponseBody200HasMore,
                                                                                                                                                                                                                               getIssuingPhysicalBundlesResponseBody200Url = getIssuingPhysicalBundlesResponseBody200Url}
