-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getProductsProductFeatures
module StripeAPI.Operations.GetProductsProductFeatures where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/products/{product}/features
-- 
-- \<p>Retrieve a list of features for a product\<\/p>
getProductsProductFeatures :: forall m . StripeAPI.Common.MonadHTTP m => GetProductsProductFeaturesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetProductsProductFeaturesResponse) -- ^ Monadic computation which returns the result of the operation
getProductsProductFeatures parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetProductsProductFeaturesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetProductsProductFeaturesResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetProductsProductFeaturesResponseBody200)
                                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetProductsProductFeaturesResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  Error)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") ("/v1/products/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel (getProductsProductFeaturesParametersPathProduct parameters))) GHC.Base.<> "/features")) [StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsProductFeaturesParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
tripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsProductFeaturesParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
tripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsProductFeaturesParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
tripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsProductFeaturesParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/products\/{product}\/features.GET.parameters@ in the specification.
-- 
-- 
data GetProductsProductFeaturesParameters = GetProductsProductFeaturesParameters {
  -- | pathProduct: Represents the parameter named \'product\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getProductsProductFeaturesParametersPathProduct :: Data.Text.Internal.Text
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getProductsProductFeaturesParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getProductsProductFeaturesParametersQueryExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getProductsProductFeaturesParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getProductsProductFeaturesParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetProductsProductFeaturesParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathProduct" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesParametersPathProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryStartingAfter obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathProduct" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesParametersPathProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesParametersQueryStartingAfter obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetProductsProductFeaturesParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetProductsProductFeaturesParameters" (\obj -> ((((GHC.Base.pure GetProductsProductFeaturesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))}
-- | Create a new 'GetProductsProductFeaturesParameters' with all required fields.
mkGetProductsProductFeaturesParameters :: Data.Text.Internal.Text -- ^ 'getProductsProductFeaturesParametersPathProduct'
  -> GetProductsProductFeaturesParameters
mkGetProductsProductFeaturesParameters getProductsProductFeaturesParametersPathProduct = GetProductsProductFeaturesParameters{getProductsProductFeaturesParametersPathProduct = getProductsProductFeaturesParametersPathProduct,
                                                                                                                              getProductsProductFeaturesParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                                                                                              getProductsProductFeaturesParametersQueryExpand = GHC.Maybe.Nothing,
                                                                                                                              getProductsProductFeaturesParametersQueryLimit = GHC.Maybe.Nothing,
                                                                                                                              getProductsProductFeaturesParametersQueryStartingAfter = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getProductsProductFeatures'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetProductsProductFeaturesResponseError' is used.
data GetProductsProductFeaturesResponse =
   GetProductsProductFeaturesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetProductsProductFeaturesResponse200 GetProductsProductFeaturesResponseBody200 -- ^ Successful response.
  | GetProductsProductFeaturesResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/products\/{product}\/features.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetProductsProductFeaturesResponseBody200 = GetProductsProductFeaturesResponseBody200 {
  -- | data
  getProductsProductFeaturesResponseBody200Data :: [ProductFeature]
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getProductsProductFeaturesResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getProductsProductFeaturesResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetProductsProductFeaturesResponseBody200
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetProductsProductFeaturesResponseBody200
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetProductsProductFeaturesResponseBody200" (\obj -> ((GHC.Base.pure GetProductsProductFeaturesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))}
-- | Create a new 'GetProductsProductFeaturesResponseBody200' with all required fields.
mkGetProductsProductFeaturesResponseBody200 :: [ProductFeature] -- ^ 'getProductsProductFeaturesResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getProductsProductFeaturesResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getProductsProductFeaturesResponseBody200Url'
  -> GetProductsProductFeaturesResponseBody200
mkGetProductsProductFeaturesResponseBody200 getProductsProductFeaturesResponseBody200Data getProductsProductFeaturesResponseBody200HasMore getProductsProductFeaturesResponseBody200Url = GetProductsProductFeaturesResponseBody200{getProductsProductFeaturesResponseBody200Data = getProductsProductFeaturesResponseBody200Data,
                                                                                                                                                                                                                                    getProductsProductFeaturesResponseBody200HasMore = getProductsProductFeaturesResponseBody200HasMore,
                                                                                                                                                                                                                                    getProductsProductFeaturesResponseBody200Url = getProductsProductFeaturesResponseBody200Url}
