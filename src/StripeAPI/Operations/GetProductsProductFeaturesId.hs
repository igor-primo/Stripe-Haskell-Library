-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getProductsProductFeaturesId
module StripeAPI.Operations.GetProductsProductFeaturesId where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/products/{product}/features/{id}
-- 
-- \<p>Retrieves a product_feature, which represents a feature attachment to a product\<\/p>
getProductsProductFeaturesId :: forall m . StripeAPI.Common.MonadHTTP m => GetProductsProductFeaturesIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetProductsProductFeaturesIdResponse) -- ^ Monadic computation which returns the result of the operation
getProductsProductFeaturesId parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetProductsProductFeaturesIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetProductsProductFeaturesIdResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ProductFeature)
                                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetProductsProductFeaturesIdResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        Error)
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") (("/v1/products/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel (getProductsProductFeaturesIdParametersPathProduct parameters))) GHC.Base.<> "/features/")) GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel (getProductsProductFeaturesIdParametersPathId parameters))) GHC.Base.<> "")) [StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsProductFeaturesIdParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/products\/{product}\/features\/{id}.GET.parameters@ in the specification.
-- 
-- 
data GetProductsProductFeaturesIdParameters = GetProductsProductFeaturesIdParameters {
  -- | pathId: Represents the parameter named \'id\'
  -- 
  -- The ID of the product_feature.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getProductsProductFeaturesIdParametersPathId :: Data.Text.Internal.Text
  -- | pathProduct: Represents the parameter named \'product\'
  -- 
  -- The ID of the product.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getProductsProductFeaturesIdParametersPathProduct :: Data.Text.Internal.Text
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getProductsProductFeaturesIdParametersQueryExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetProductsProductFeaturesIdParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesIdParametersPathId obj] : ["pathProduct" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesIdParametersPathProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesIdParametersQueryExpand obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesIdParametersPathId obj] : ["pathProduct" Data.Aeson.Types.ToJSON..= getProductsProductFeaturesIdParametersPathProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getProductsProductFeaturesIdParametersQueryExpand obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetProductsProductFeaturesIdParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetProductsProductFeaturesIdParameters" (\obj -> ((GHC.Base.pure GetProductsProductFeaturesIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand"))}
-- | Create a new 'GetProductsProductFeaturesIdParameters' with all required fields.
mkGetProductsProductFeaturesIdParameters :: Data.Text.Internal.Text -- ^ 'getProductsProductFeaturesIdParametersPathId'
  -> Data.Text.Internal.Text -- ^ 'getProductsProductFeaturesIdParametersPathProduct'
  -> GetProductsProductFeaturesIdParameters
mkGetProductsProductFeaturesIdParameters getProductsProductFeaturesIdParametersPathId getProductsProductFeaturesIdParametersPathProduct = GetProductsProductFeaturesIdParameters{getProductsProductFeaturesIdParametersPathId = getProductsProductFeaturesIdParametersPathId,
                                                                                                                                                                                 getProductsProductFeaturesIdParametersPathProduct = getProductsProductFeaturesIdParametersPathProduct,
                                                                                                                                                                                 getProductsProductFeaturesIdParametersQueryExpand = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getProductsProductFeaturesId'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetProductsProductFeaturesIdResponseError' is used.
data GetProductsProductFeaturesIdResponse =
   GetProductsProductFeaturesIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetProductsProductFeaturesIdResponse200 ProductFeature -- ^ Successful response.
  | GetProductsProductFeaturesIdResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
