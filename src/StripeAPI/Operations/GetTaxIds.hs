-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTaxIds
module StripeAPI.Operations.GetTaxIds where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/tax_ids
-- 
-- \<p>Returns a list of tax IDs.\<\/p>
getTaxIds :: forall m . StripeAPI.Common.MonadHTTP m => GetTaxIdsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetTaxIdsResponse) -- ^ Monadic computation which returns the result of the operation
getTaxIds parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTaxIdsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTaxIdsResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             GetTaxIdsResponseBody200)
                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetTaxIdsResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                               Error)
                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") "/v1/tax_ids" [StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTaxIdsParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTaxIdsParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTaxIdsParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "owner") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTaxIdsParametersQueryOwner parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTaxIdsParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/tax_ids.GET.parameters@ in the specification.
-- 
-- 
data GetTaxIdsParameters = GetTaxIdsParameters {
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getTaxIdsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getTaxIdsParametersQueryExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getTaxIdsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryOwner: Represents the parameter named \'owner\'
  -- 
  -- The account or customer the tax ID belongs to. Defaults to \`owner[type]=self\`.
  , getTaxIdsParametersQueryOwner :: (GHC.Maybe.Maybe GetTaxIdsParametersQueryOwner')
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getTaxIdsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaxIdsParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOwner" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryOwner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryStartingAfter obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOwner" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryOwner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryStartingAfter obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetTaxIdsParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTaxIdsParameters" (\obj -> ((((GHC.Base.pure GetTaxIdsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOwner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))}
-- | Create a new 'GetTaxIdsParameters' with all required fields.
mkGetTaxIdsParameters :: GetTaxIdsParameters
mkGetTaxIdsParameters = GetTaxIdsParameters{getTaxIdsParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                            getTaxIdsParametersQueryExpand = GHC.Maybe.Nothing,
                                            getTaxIdsParametersQueryLimit = GHC.Maybe.Nothing,
                                            getTaxIdsParametersQueryOwner = GHC.Maybe.Nothing,
                                            getTaxIdsParametersQueryStartingAfter = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax_ids.GET.parameters.properties.queryOwner@ in the specification.
-- 
-- Represents the parameter named \'owner\'
-- 
-- The account or customer the tax ID belongs to. Defaults to \`owner[type]=self\`.
data GetTaxIdsParametersQueryOwner' = GetTaxIdsParametersQueryOwner' {
  -- | account
  getTaxIdsParametersQueryOwner'Account :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | customer
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getTaxIdsParametersQueryOwner'Customer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type
  , getTaxIdsParametersQueryOwner'Type :: GetTaxIdsParametersQueryOwner'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaxIdsParametersQueryOwner'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryOwner'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryOwner'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= getTaxIdsParametersQueryOwner'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryOwner'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getTaxIdsParametersQueryOwner'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= getTaxIdsParametersQueryOwner'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetTaxIdsParametersQueryOwner'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTaxIdsParametersQueryOwner'" (\obj -> ((GHC.Base.pure GetTaxIdsParametersQueryOwner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'GetTaxIdsParametersQueryOwner'' with all required fields.
mkGetTaxIdsParametersQueryOwner' :: GetTaxIdsParametersQueryOwner'Type' -- ^ 'getTaxIdsParametersQueryOwner'Type'
  -> GetTaxIdsParametersQueryOwner'
mkGetTaxIdsParametersQueryOwner' getTaxIdsParametersQueryOwner'Type = GetTaxIdsParametersQueryOwner'{getTaxIdsParametersQueryOwner'Account = GHC.Maybe.Nothing,
                                                                                                     getTaxIdsParametersQueryOwner'Customer = GHC.Maybe.Nothing,
                                                                                                     getTaxIdsParametersQueryOwner'Type = getTaxIdsParametersQueryOwner'Type}
-- | Defines the enum schema located at @paths.\/v1\/tax_ids.GET.parameters.properties.queryOwner.properties.type@ in the specification.
-- 
-- 
data GetTaxIdsParametersQueryOwner'Type' =
   GetTaxIdsParametersQueryOwner'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetTaxIdsParametersQueryOwner'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetTaxIdsParametersQueryOwner'Type'EnumAccount -- ^ Represents the JSON value @"account"@
  | GetTaxIdsParametersQueryOwner'Type'EnumApplication -- ^ Represents the JSON value @"application"@
  | GetTaxIdsParametersQueryOwner'Type'EnumCustomer -- ^ Represents the JSON value @"customer"@
  | GetTaxIdsParametersQueryOwner'Type'EnumSelf -- ^ Represents the JSON value @"self"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaxIdsParametersQueryOwner'Type'
    where {toJSON (GetTaxIdsParametersQueryOwner'Type'Other val) = val;
           toJSON (GetTaxIdsParametersQueryOwner'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GetTaxIdsParametersQueryOwner'Type'EnumAccount) = "account";
           toJSON (GetTaxIdsParametersQueryOwner'Type'EnumApplication) = "application";
           toJSON (GetTaxIdsParametersQueryOwner'Type'EnumCustomer) = "customer";
           toJSON (GetTaxIdsParametersQueryOwner'Type'EnumSelf) = "self"}
instance Data.Aeson.Types.FromJSON.FromJSON GetTaxIdsParametersQueryOwner'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "account" -> GetTaxIdsParametersQueryOwner'Type'EnumAccount
                                             | val GHC.Classes.== "application" -> GetTaxIdsParametersQueryOwner'Type'EnumApplication
                                             | val GHC.Classes.== "customer" -> GetTaxIdsParametersQueryOwner'Type'EnumCustomer
                                             | val GHC.Classes.== "self" -> GetTaxIdsParametersQueryOwner'Type'EnumSelf
                                             | GHC.Base.otherwise -> GetTaxIdsParametersQueryOwner'Type'Other val)}
-- | Represents a response of the operation 'getTaxIds'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTaxIdsResponseError' is used.
data GetTaxIdsResponse =
   GetTaxIdsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTaxIdsResponse200 GetTaxIdsResponseBody200 -- ^ Successful response.
  | GetTaxIdsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/tax_ids.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTaxIdsResponseBody200 = GetTaxIdsResponseBody200 {
  -- | data: Details about each object.
  getTaxIdsResponseBody200Data :: [TaxId]
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getTaxIdsResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getTaxIdsResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTaxIdsResponseBody200
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getTaxIdsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getTaxIdsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getTaxIdsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getTaxIdsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getTaxIdsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getTaxIdsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GetTaxIdsResponseBody200
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTaxIdsResponseBody200" (\obj -> ((GHC.Base.pure GetTaxIdsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))}
-- | Create a new 'GetTaxIdsResponseBody200' with all required fields.
mkGetTaxIdsResponseBody200 :: [TaxId] -- ^ 'getTaxIdsResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getTaxIdsResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getTaxIdsResponseBody200Url'
  -> GetTaxIdsResponseBody200
mkGetTaxIdsResponseBody200 getTaxIdsResponseBody200Data getTaxIdsResponseBody200HasMore getTaxIdsResponseBody200Url = GetTaxIdsResponseBody200{getTaxIdsResponseBody200Data = getTaxIdsResponseBody200Data,
                                                                                                                                               getTaxIdsResponseBody200HasMore = getTaxIdsResponseBody200HasMore,
                                                                                                                                               getTaxIdsResponseBody200Url = getTaxIdsResponseBody200Url}
