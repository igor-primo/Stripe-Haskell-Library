-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postBillingAlerts
module StripeAPI.Operations.PostBillingAlerts where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/billing/alerts
-- 
-- \<p>Creates a billing alert\<\/p>
postBillingAlerts :: forall m . StripeAPI.Common.MonadHTTP m => PostBillingAlertsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostBillingAlertsResponse) -- ^ Monadic computation which returns the result of the operation
postBillingAlerts body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostBillingAlertsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostBillingAlertsResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Billing'alert)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostBillingAlertsResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 Error)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") "/v1/billing/alerts" GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/billing\/alerts.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostBillingAlertsRequestBody = PostBillingAlertsRequestBody {
  -- | expand: Specifies which fields in the response should be expanded.
  postBillingAlertsRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | title: The title of the alert.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 256
  , postBillingAlertsRequestBodyTitle :: Data.Text.Internal.Text
  -- | usage_threshold: The configuration of the usage threshold.
  , postBillingAlertsRequestBodyUsageThreshold :: (GHC.Maybe.Maybe PostBillingAlertsRequestBodyUsageThreshold')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingAlertsRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyExpand obj) : ["title" Data.Aeson.Types.ToJSON..= postBillingAlertsRequestBodyTitle obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_threshold" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyUsageThreshold obj) : ["alert_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "usage_threshold"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyExpand obj) : ["title" Data.Aeson.Types.ToJSON..= postBillingAlertsRequestBodyTitle obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_threshold" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyUsageThreshold obj) : ["alert_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "usage_threshold"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingAlertsRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingAlertsRequestBody" (\obj -> ((GHC.Base.pure PostBillingAlertsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "usage_threshold"))}
-- | Create a new 'PostBillingAlertsRequestBody' with all required fields.
mkPostBillingAlertsRequestBody :: Data.Text.Internal.Text -- ^ 'postBillingAlertsRequestBodyTitle'
  -> PostBillingAlertsRequestBody
mkPostBillingAlertsRequestBody postBillingAlertsRequestBodyTitle = PostBillingAlertsRequestBody{postBillingAlertsRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                postBillingAlertsRequestBodyTitle = postBillingAlertsRequestBodyTitle,
                                                                                                postBillingAlertsRequestBodyUsageThreshold = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/billing\/alerts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.usage_threshold@ in the specification.
-- 
-- The configuration of the usage threshold.
data PostBillingAlertsRequestBodyUsageThreshold' = PostBillingAlertsRequestBodyUsageThreshold' {
  -- | filters
  postBillingAlertsRequestBodyUsageThreshold'Filters :: (GHC.Maybe.Maybe [PostBillingAlertsRequestBodyUsageThreshold'Filters'])
  -- | gte
  , postBillingAlertsRequestBodyUsageThreshold'Gte :: GHC.Types.Int
  -- | meter
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postBillingAlertsRequestBodyUsageThreshold'Meter :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingAlertsRequestBodyUsageThreshold'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyUsageThreshold'Filters obj) : ["gte" Data.Aeson.Types.ToJSON..= postBillingAlertsRequestBodyUsageThreshold'Gte obj] : ["meter" Data.Aeson.Types.ToJSON..= postBillingAlertsRequestBodyUsageThreshold'Meter obj] : ["recurrence" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "one_time"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyUsageThreshold'Filters obj) : ["gte" Data.Aeson.Types.ToJSON..= postBillingAlertsRequestBodyUsageThreshold'Gte obj] : ["meter" Data.Aeson.Types.ToJSON..= postBillingAlertsRequestBodyUsageThreshold'Meter obj] : ["recurrence" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "one_time"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingAlertsRequestBodyUsageThreshold'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingAlertsRequestBodyUsageThreshold'" (\obj -> ((GHC.Base.pure PostBillingAlertsRequestBodyUsageThreshold' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meter"))}
-- | Create a new 'PostBillingAlertsRequestBodyUsageThreshold'' with all required fields.
mkPostBillingAlertsRequestBodyUsageThreshold' :: GHC.Types.Int -- ^ 'postBillingAlertsRequestBodyUsageThreshold'Gte'
  -> Data.Text.Internal.Text -- ^ 'postBillingAlertsRequestBodyUsageThreshold'Meter'
  -> PostBillingAlertsRequestBodyUsageThreshold'
mkPostBillingAlertsRequestBodyUsageThreshold' postBillingAlertsRequestBodyUsageThreshold'Gte postBillingAlertsRequestBodyUsageThreshold'Meter = PostBillingAlertsRequestBodyUsageThreshold'{postBillingAlertsRequestBodyUsageThreshold'Filters = GHC.Maybe.Nothing,
                                                                                                                                                                                            postBillingAlertsRequestBodyUsageThreshold'Gte = postBillingAlertsRequestBodyUsageThreshold'Gte,
                                                                                                                                                                                            postBillingAlertsRequestBodyUsageThreshold'Meter = postBillingAlertsRequestBodyUsageThreshold'Meter}
-- | Defines the object schema located at @paths.\/v1\/billing\/alerts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.usage_threshold.properties.filters.items@ in the specification.
-- 
-- 
data PostBillingAlertsRequestBodyUsageThreshold'Filters' = PostBillingAlertsRequestBodyUsageThreshold'Filters' {
  -- | customer
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postBillingAlertsRequestBodyUsageThreshold'Filters'Customer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingAlertsRequestBodyUsageThreshold'Filters'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyUsageThreshold'Filters'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "customer"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postBillingAlertsRequestBodyUsageThreshold'Filters'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "customer"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingAlertsRequestBodyUsageThreshold'Filters'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingAlertsRequestBodyUsageThreshold'Filters'" (\obj -> GHC.Base.pure PostBillingAlertsRequestBodyUsageThreshold'Filters' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer"))}
-- | Create a new 'PostBillingAlertsRequestBodyUsageThreshold'Filters'' with all required fields.
mkPostBillingAlertsRequestBodyUsageThreshold'Filters' :: PostBillingAlertsRequestBodyUsageThreshold'Filters'
mkPostBillingAlertsRequestBodyUsageThreshold'Filters' = PostBillingAlertsRequestBodyUsageThreshold'Filters'{postBillingAlertsRequestBodyUsageThreshold'Filters'Customer = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postBillingAlerts'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostBillingAlertsResponseError' is used.
data PostBillingAlertsResponse =
   PostBillingAlertsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostBillingAlertsResponse200 Billing'alert -- ^ Successful response.
  | PostBillingAlertsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
