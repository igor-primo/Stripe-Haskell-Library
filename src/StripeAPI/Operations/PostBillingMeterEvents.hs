-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postBillingMeterEvents
module StripeAPI.Operations.PostBillingMeterEvents where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/billing/meter_events
-- 
-- \<p>Creates a billing meter event.\<\/p>
postBillingMeterEvents :: forall m . StripeAPI.Common.MonadHTTP m => PostBillingMeterEventsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostBillingMeterEventsResponse) -- ^ Monadic computation which returns the result of the operation
postBillingMeterEvents body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostBillingMeterEventsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostBillingMeterEventsResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              Billing'meterEvent)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostBillingMeterEventsResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                Error)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") "/v1/billing/meter_events" GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/billing\/meter_events.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostBillingMeterEventsRequestBody = PostBillingMeterEventsRequestBody {
  -- | event_name: The name of the meter event. Corresponds with the \`event_name\` field on a meter.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  postBillingMeterEventsRequestBodyEventName :: Data.Text.Internal.Text
  -- | expand: Specifies which fields in the response should be expanded.
  , postBillingMeterEventsRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | identifier: A unique identifier for the event. If not provided, one is generated. We recommend using UUID-like identifiers. We will enforce uniqueness within a rolling period of at least 24 hours. The enforcement of uniqueness primarily addresses issues arising from accidental retries or other problems occurring within extremely brief time intervals. This approach helps prevent duplicate entries and ensures data integrity in high-frequency operations.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  , postBillingMeterEventsRequestBodyIdentifier :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | payload: The payload of the event. This must contain the fields corresponding to a meter\'s \`customer_mapping.event_payload_key\` (default is \`stripe_customer_id\`) and \`value_settings.event_payload_key\` (default is \`value\`). Read more about the [payload](https:\/\/docs.stripe.com\/billing\/subscriptions\/usage-based\/recording-usage\#payload-key-overrides).
  , postBillingMeterEventsRequestBodyPayload :: Data.Aeson.Types.Internal.Object
  -- | timestamp: The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.
  , postBillingMeterEventsRequestBodyTimestamp :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingMeterEventsRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["event_name" Data.Aeson.Types.ToJSON..= postBillingMeterEventsRequestBodyEventName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postBillingMeterEventsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("identifier" Data.Aeson.Types.ToJSON..=)) (postBillingMeterEventsRequestBodyIdentifier obj) : ["payload" Data.Aeson.Types.ToJSON..= postBillingMeterEventsRequestBodyPayload obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timestamp" Data.Aeson.Types.ToJSON..=)) (postBillingMeterEventsRequestBodyTimestamp obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["event_name" Data.Aeson.Types.ToJSON..= postBillingMeterEventsRequestBodyEventName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postBillingMeterEventsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("identifier" Data.Aeson.Types.ToJSON..=)) (postBillingMeterEventsRequestBodyIdentifier obj) : ["payload" Data.Aeson.Types.ToJSON..= postBillingMeterEventsRequestBodyPayload obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timestamp" Data.Aeson.Types.ToJSON..=)) (postBillingMeterEventsRequestBodyTimestamp obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingMeterEventsRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingMeterEventsRequestBody" (\obj -> ((((GHC.Base.pure PostBillingMeterEventsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "identifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payload")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "timestamp"))}
-- | Create a new 'PostBillingMeterEventsRequestBody' with all required fields.
mkPostBillingMeterEventsRequestBody :: Data.Text.Internal.Text -- ^ 'postBillingMeterEventsRequestBodyEventName'
  -> Data.Aeson.Types.Internal.Object -- ^ 'postBillingMeterEventsRequestBodyPayload'
  -> PostBillingMeterEventsRequestBody
mkPostBillingMeterEventsRequestBody postBillingMeterEventsRequestBodyEventName postBillingMeterEventsRequestBodyPayload = PostBillingMeterEventsRequestBody{postBillingMeterEventsRequestBodyEventName = postBillingMeterEventsRequestBodyEventName,
                                                                                                                                                            postBillingMeterEventsRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                                            postBillingMeterEventsRequestBodyIdentifier = GHC.Maybe.Nothing,
                                                                                                                                                            postBillingMeterEventsRequestBodyPayload = postBillingMeterEventsRequestBodyPayload,
                                                                                                                                                            postBillingMeterEventsRequestBodyTimestamp = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postBillingMeterEvents'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostBillingMeterEventsResponseError' is used.
data PostBillingMeterEventsResponse =
   PostBillingMeterEventsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostBillingMeterEventsResponse200 Billing'meterEvent -- ^ Successful response.
  | PostBillingMeterEventsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
