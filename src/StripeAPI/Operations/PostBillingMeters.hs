-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postBillingMeters
module StripeAPI.Operations.PostBillingMeters where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/billing/meters
-- 
-- \<p>Creates a billing meter.\<\/p>
postBillingMeters :: forall m . StripeAPI.Common.MonadHTTP m => PostBillingMetersRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostBillingMetersResponse) -- ^ Monadic computation which returns the result of the operation
postBillingMeters body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostBillingMetersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostBillingMetersResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Billing'meter)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostBillingMetersResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 Error)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") "/v1/billing/meters" GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/billing\/meters.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostBillingMetersRequestBody = PostBillingMetersRequestBody {
  -- | customer_mapping: Fields that specify how to map a meter event to a customer.
  postBillingMetersRequestBodyCustomerMapping :: (GHC.Maybe.Maybe PostBillingMetersRequestBodyCustomerMapping')
  -- | default_aggregation: The default settings to aggregate a meter\'s events with.
  , postBillingMetersRequestBodyDefaultAggregation :: PostBillingMetersRequestBodyDefaultAggregation'
  -- | display_name: The meterâ€™s name. Not visible to the customer.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 250
  , postBillingMetersRequestBodyDisplayName :: Data.Text.Internal.Text
  -- | event_name: The name of the meter event to record usage for. Corresponds with the \`event_name\` field on meter events.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  , postBillingMetersRequestBodyEventName :: Data.Text.Internal.Text
  -- | event_time_window: The time window to pre-aggregate meter events for, if any.
  , postBillingMetersRequestBodyEventTimeWindow :: (GHC.Maybe.Maybe PostBillingMetersRequestBodyEventTimeWindow')
  -- | expand: Specifies which fields in the response should be expanded.
  , postBillingMetersRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | value_settings: Fields that specify how to calculate a meter event\'s value.
  , postBillingMetersRequestBodyValueSettings :: (GHC.Maybe.Maybe PostBillingMetersRequestBodyValueSettings')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingMetersRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_mapping" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyCustomerMapping obj) : ["default_aggregation" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyDefaultAggregation obj] : ["display_name" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyDisplayName obj] : ["event_name" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyEventName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event_time_window" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyEventTimeWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value_settings" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyValueSettings obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_mapping" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyCustomerMapping obj) : ["default_aggregation" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyDefaultAggregation obj] : ["display_name" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyDisplayName obj] : ["event_name" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyEventName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event_time_window" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyEventTimeWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value_settings" Data.Aeson.Types.ToJSON..=)) (postBillingMetersRequestBodyValueSettings obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingMetersRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingMetersRequestBody" (\obj -> ((((((GHC.Base.pure PostBillingMetersRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_mapping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "default_aggregation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "event_time_window")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "value_settings"))}
-- | Create a new 'PostBillingMetersRequestBody' with all required fields.
mkPostBillingMetersRequestBody :: PostBillingMetersRequestBodyDefaultAggregation' -- ^ 'postBillingMetersRequestBodyDefaultAggregation'
  -> Data.Text.Internal.Text -- ^ 'postBillingMetersRequestBodyDisplayName'
  -> Data.Text.Internal.Text -- ^ 'postBillingMetersRequestBodyEventName'
  -> PostBillingMetersRequestBody
mkPostBillingMetersRequestBody postBillingMetersRequestBodyDefaultAggregation postBillingMetersRequestBodyDisplayName postBillingMetersRequestBodyEventName = PostBillingMetersRequestBody{postBillingMetersRequestBodyCustomerMapping = GHC.Maybe.Nothing,
                                                                                                                                                                                           postBillingMetersRequestBodyDefaultAggregation = postBillingMetersRequestBodyDefaultAggregation,
                                                                                                                                                                                           postBillingMetersRequestBodyDisplayName = postBillingMetersRequestBodyDisplayName,
                                                                                                                                                                                           postBillingMetersRequestBodyEventName = postBillingMetersRequestBodyEventName,
                                                                                                                                                                                           postBillingMetersRequestBodyEventTimeWindow = GHC.Maybe.Nothing,
                                                                                                                                                                                           postBillingMetersRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                                                                           postBillingMetersRequestBodyValueSettings = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/billing\/meters.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.customer_mapping@ in the specification.
-- 
-- Fields that specify how to map a meter event to a customer.
data PostBillingMetersRequestBodyCustomerMapping' = PostBillingMetersRequestBodyCustomerMapping' {
  -- | event_payload_key
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  postBillingMetersRequestBodyCustomerMapping'EventPayloadKey :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingMetersRequestBodyCustomerMapping'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["event_payload_key" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyCustomerMapping'EventPayloadKey obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "by_id"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["event_payload_key" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyCustomerMapping'EventPayloadKey obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "by_id"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingMetersRequestBodyCustomerMapping'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingMetersRequestBodyCustomerMapping'" (\obj -> GHC.Base.pure PostBillingMetersRequestBodyCustomerMapping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event_payload_key"))}
-- | Create a new 'PostBillingMetersRequestBodyCustomerMapping'' with all required fields.
mkPostBillingMetersRequestBodyCustomerMapping' :: Data.Text.Internal.Text -- ^ 'postBillingMetersRequestBodyCustomerMapping'EventPayloadKey'
  -> PostBillingMetersRequestBodyCustomerMapping'
mkPostBillingMetersRequestBodyCustomerMapping' postBillingMetersRequestBodyCustomerMapping'EventPayloadKey = PostBillingMetersRequestBodyCustomerMapping'{postBillingMetersRequestBodyCustomerMapping'EventPayloadKey = postBillingMetersRequestBodyCustomerMapping'EventPayloadKey}
-- | Defines the object schema located at @paths.\/v1\/billing\/meters.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.default_aggregation@ in the specification.
-- 
-- The default settings to aggregate a meter\'s events with.
data PostBillingMetersRequestBodyDefaultAggregation' = PostBillingMetersRequestBodyDefaultAggregation' {
  -- | formula
  postBillingMetersRequestBodyDefaultAggregation'Formula :: PostBillingMetersRequestBodyDefaultAggregation'Formula'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingMetersRequestBodyDefaultAggregation'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["formula" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyDefaultAggregation'Formula obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["formula" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyDefaultAggregation'Formula obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingMetersRequestBodyDefaultAggregation'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingMetersRequestBodyDefaultAggregation'" (\obj -> GHC.Base.pure PostBillingMetersRequestBodyDefaultAggregation' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "formula"))}
-- | Create a new 'PostBillingMetersRequestBodyDefaultAggregation'' with all required fields.
mkPostBillingMetersRequestBodyDefaultAggregation' :: PostBillingMetersRequestBodyDefaultAggregation'Formula' -- ^ 'postBillingMetersRequestBodyDefaultAggregation'Formula'
  -> PostBillingMetersRequestBodyDefaultAggregation'
mkPostBillingMetersRequestBodyDefaultAggregation' postBillingMetersRequestBodyDefaultAggregation'Formula = PostBillingMetersRequestBodyDefaultAggregation'{postBillingMetersRequestBodyDefaultAggregation'Formula = postBillingMetersRequestBodyDefaultAggregation'Formula}
-- | Defines the enum schema located at @paths.\/v1\/billing\/meters.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.default_aggregation.properties.formula@ in the specification.
-- 
-- 
data PostBillingMetersRequestBodyDefaultAggregation'Formula' =
   PostBillingMetersRequestBodyDefaultAggregation'Formula'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostBillingMetersRequestBodyDefaultAggregation'Formula'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumCount -- ^ Represents the JSON value @"count"@
  | PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumLast -- ^ Represents the JSON value @"last"@
  | PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumSum -- ^ Represents the JSON value @"sum"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingMetersRequestBodyDefaultAggregation'Formula'
    where {toJSON (PostBillingMetersRequestBodyDefaultAggregation'Formula'Other val) = val;
           toJSON (PostBillingMetersRequestBodyDefaultAggregation'Formula'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumCount) = "count";
           toJSON (PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumLast) = "last";
           toJSON (PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumSum) = "sum"}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingMetersRequestBodyDefaultAggregation'Formula'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "count" -> PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumCount
                                             | val GHC.Classes.== "last" -> PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumLast
                                             | val GHC.Classes.== "sum" -> PostBillingMetersRequestBodyDefaultAggregation'Formula'EnumSum
                                             | GHC.Base.otherwise -> PostBillingMetersRequestBodyDefaultAggregation'Formula'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/billing\/meters.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.event_time_window@ in the specification.
-- 
-- The time window to pre-aggregate meter events for, if any.
data PostBillingMetersRequestBodyEventTimeWindow' =
   PostBillingMetersRequestBodyEventTimeWindow'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostBillingMetersRequestBodyEventTimeWindow'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostBillingMetersRequestBodyEventTimeWindow'EnumDay -- ^ Represents the JSON value @"day"@
  | PostBillingMetersRequestBodyEventTimeWindow'EnumHour -- ^ Represents the JSON value @"hour"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingMetersRequestBodyEventTimeWindow'
    where {toJSON (PostBillingMetersRequestBodyEventTimeWindow'Other val) = val;
           toJSON (PostBillingMetersRequestBodyEventTimeWindow'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostBillingMetersRequestBodyEventTimeWindow'EnumDay) = "day";
           toJSON (PostBillingMetersRequestBodyEventTimeWindow'EnumHour) = "hour"}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingMetersRequestBodyEventTimeWindow'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "day" -> PostBillingMetersRequestBodyEventTimeWindow'EnumDay
                                             | val GHC.Classes.== "hour" -> PostBillingMetersRequestBodyEventTimeWindow'EnumHour
                                             | GHC.Base.otherwise -> PostBillingMetersRequestBodyEventTimeWindow'Other val)}
-- | Defines the object schema located at @paths.\/v1\/billing\/meters.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.value_settings@ in the specification.
-- 
-- Fields that specify how to calculate a meter event\'s value.
data PostBillingMetersRequestBodyValueSettings' = PostBillingMetersRequestBodyValueSettings' {
  -- | event_payload_key
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  postBillingMetersRequestBodyValueSettings'EventPayloadKey :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBillingMetersRequestBodyValueSettings'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["event_payload_key" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyValueSettings'EventPayloadKey obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["event_payload_key" Data.Aeson.Types.ToJSON..= postBillingMetersRequestBodyValueSettings'EventPayloadKey obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostBillingMetersRequestBodyValueSettings'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBillingMetersRequestBodyValueSettings'" (\obj -> GHC.Base.pure PostBillingMetersRequestBodyValueSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event_payload_key"))}
-- | Create a new 'PostBillingMetersRequestBodyValueSettings'' with all required fields.
mkPostBillingMetersRequestBodyValueSettings' :: Data.Text.Internal.Text -- ^ 'postBillingMetersRequestBodyValueSettings'EventPayloadKey'
  -> PostBillingMetersRequestBodyValueSettings'
mkPostBillingMetersRequestBodyValueSettings' postBillingMetersRequestBodyValueSettings'EventPayloadKey = PostBillingMetersRequestBodyValueSettings'{postBillingMetersRequestBodyValueSettings'EventPayloadKey = postBillingMetersRequestBodyValueSettings'EventPayloadKey}
-- | Represents a response of the operation 'postBillingMeters'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostBillingMetersResponseError' is used.
data PostBillingMetersResponse =
   PostBillingMetersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostBillingMetersResponse200 Billing'meter -- ^ Successful response.
  | PostBillingMetersResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
