-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postEntitlementsFeatures
module StripeAPI.Operations.PostEntitlementsFeatures where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/entitlements/features
-- 
-- \<p>Creates a feature\<\/p>
postEntitlementsFeatures :: forall m . StripeAPI.Common.MonadHTTP m => PostEntitlementsFeaturesRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostEntitlementsFeaturesResponse) -- ^ Monadic computation which returns the result of the operation
postEntitlementsFeatures body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostEntitlementsFeaturesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostEntitlementsFeaturesResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Entitlements'feature)
                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostEntitlementsFeaturesResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                      Error)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") "/v1/entitlements/features" GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/entitlements\/features.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostEntitlementsFeaturesRequestBody = PostEntitlementsFeaturesRequestBody {
  -- | expand: Specifies which fields in the response should be expanded.
  postEntitlementsFeaturesRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | lookup_key: A unique key you provide as your own system identifier. This may be up to 80 characters.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 80
  , postEntitlementsFeaturesRequestBodyLookupKey :: Data.Text.Internal.Text
  -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  , postEntitlementsFeaturesRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | name: The feature\'s name, for your own purpose, not meant to be displayable to the customer.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 80
  , postEntitlementsFeaturesRequestBodyName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEntitlementsFeaturesRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postEntitlementsFeaturesRequestBodyExpand obj) : ["lookup_key" Data.Aeson.Types.ToJSON..= postEntitlementsFeaturesRequestBodyLookupKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postEntitlementsFeaturesRequestBodyMetadata obj) : ["name" Data.Aeson.Types.ToJSON..= postEntitlementsFeaturesRequestBodyName obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postEntitlementsFeaturesRequestBodyExpand obj) : ["lookup_key" Data.Aeson.Types.ToJSON..= postEntitlementsFeaturesRequestBodyLookupKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postEntitlementsFeaturesRequestBodyMetadata obj) : ["name" Data.Aeson.Types.ToJSON..= postEntitlementsFeaturesRequestBodyName obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostEntitlementsFeaturesRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostEntitlementsFeaturesRequestBody" (\obj -> (((GHC.Base.pure PostEntitlementsFeaturesRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lookup_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))}
-- | Create a new 'PostEntitlementsFeaturesRequestBody' with all required fields.
mkPostEntitlementsFeaturesRequestBody :: Data.Text.Internal.Text -- ^ 'postEntitlementsFeaturesRequestBodyLookupKey'
  -> Data.Text.Internal.Text -- ^ 'postEntitlementsFeaturesRequestBodyName'
  -> PostEntitlementsFeaturesRequestBody
mkPostEntitlementsFeaturesRequestBody postEntitlementsFeaturesRequestBodyLookupKey postEntitlementsFeaturesRequestBodyName = PostEntitlementsFeaturesRequestBody{postEntitlementsFeaturesRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                                                 postEntitlementsFeaturesRequestBodyLookupKey = postEntitlementsFeaturesRequestBodyLookupKey,
                                                                                                                                                                 postEntitlementsFeaturesRequestBodyMetadata = GHC.Maybe.Nothing,
                                                                                                                                                                 postEntitlementsFeaturesRequestBodyName = postEntitlementsFeaturesRequestBodyName}
-- | Represents a response of the operation 'postEntitlementsFeatures'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostEntitlementsFeaturesResponseError' is used.
data PostEntitlementsFeaturesResponse =
   PostEntitlementsFeaturesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostEntitlementsFeaturesResponse200 Entitlements'feature -- ^ Successful response.
  | PostEntitlementsFeaturesResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
