-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postExternalAccountsId
module StripeAPI.Operations.PostExternalAccountsId where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/external_accounts/{id}
-- 
-- \<p>Updates the metadata, account holder name, account holder type of a bank account belonging to
-- a connected account and optionally sets it as the default for its currency. Other bank account
-- details are not editable by design.\<\/p>
-- 
-- \<p>You can only update bank accounts when \<a href=\"\/api\/accounts\/object\#account_object-controller-requirement_collection\">account.controller.requirement_collection\<\/a> is \<code>application\<\/code>, which includes \<a href=\"\/connect\/custom-accounts\">Custom accounts\<\/a>.\<\/p>
-- 
-- \<p>You can re-enable a disabled bank account by performing an update call without providing any
-- arguments or changes.\<\/p>
postExternalAccountsId :: forall m . StripeAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ id
  -> GHC.Maybe.Maybe PostExternalAccountsIdRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostExternalAccountsIdResponse) -- ^ Monadic computation which returns the result of the operation
postExternalAccountsId id
                       body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostExternalAccountsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostExternalAccountsIdResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              ExternalAccount)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostExternalAccountsIdResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                Error)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/v1/external_accounts/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel id)) GHC.Base.<> "")) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/external_accounts\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostExternalAccountsIdRequestBody = PostExternalAccountsIdRequestBody {
  -- | account_holder_name: The name of the person or business that owns the bank account.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postExternalAccountsIdRequestBodyAccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAccountHolderType :: (GHC.Maybe.Maybe PostExternalAccountsIdRequestBodyAccountHolderType')
  -- | account_type: The bank account type. This can only be \`checking\` or \`savings\` in most countries. In Japan, this can only be \`futsu\` or \`toza\`.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAccountType :: (GHC.Maybe.Maybe PostExternalAccountsIdRequestBodyAccountType')
  -- | address_city: City\/District\/Suburb\/Town\/Village.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | address_country: Billing address country, if provided when creating card.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | address_state: State\/County\/Province\/Region.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | address_zip: ZIP or postal code.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyAddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | default_for_currency: When set to true, this becomes the default external account for its currency.
  , postExternalAccountsIdRequestBodyDefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | documents: Documents that may be submitted to satisfy various informational requests.
  , postExternalAccountsIdRequestBodyDocuments :: (GHC.Maybe.Maybe PostExternalAccountsIdRequestBodyDocuments')
  -- | exp_month: Two digit number representing the card’s expiration month.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyExpMonth :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | exp_year: Four digit number representing the card’s expiration year.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyExpYear :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expand: Specifies which fields in the response should be expanded.
  , postExternalAccountsIdRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
  , postExternalAccountsIdRequestBodyMetadata :: (GHC.Maybe.Maybe PostExternalAccountsIdRequestBodyMetadata'Variants)
  -- | name: Cardholder name.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postExternalAccountsIdRequestBodyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostExternalAccountsIdRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("documents" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDocuments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyName obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyAddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("documents" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDocuments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyName obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostExternalAccountsIdRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostExternalAccountsIdRequestBody" (\obj -> (((((((((((((((GHC.Base.pure PostExternalAccountsIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "documents")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name"))}
-- | Create a new 'PostExternalAccountsIdRequestBody' with all required fields.
mkPostExternalAccountsIdRequestBody :: PostExternalAccountsIdRequestBody
mkPostExternalAccountsIdRequestBody = PostExternalAccountsIdRequestBody{postExternalAccountsIdRequestBodyAccountHolderName = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAccountHolderType = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAccountType = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAddressCity = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAddressCountry = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAddressLine1 = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAddressLine2 = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAddressState = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyAddressZip = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyDefaultForCurrency = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyDocuments = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyExpMonth = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyExpYear = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyExpand = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyMetadata = GHC.Maybe.Nothing,
                                                                        postExternalAccountsIdRequestBodyName = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/external_accounts\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account_holder_type@ in the specification.
-- 
-- The type of entity that holds the account. This can be either \`individual\` or \`company\`.
data PostExternalAccountsIdRequestBodyAccountHolderType' =
   PostExternalAccountsIdRequestBodyAccountHolderType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostExternalAccountsIdRequestBodyAccountHolderType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostExternalAccountsIdRequestBodyAccountHolderType'EnumEmptyString -- ^ Represents the JSON value @""@
  | PostExternalAccountsIdRequestBodyAccountHolderType'EnumCompany -- ^ Represents the JSON value @"company"@
  | PostExternalAccountsIdRequestBodyAccountHolderType'EnumIndividual -- ^ Represents the JSON value @"individual"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostExternalAccountsIdRequestBodyAccountHolderType'
    where {toJSON (PostExternalAccountsIdRequestBodyAccountHolderType'Other val) = val;
           toJSON (PostExternalAccountsIdRequestBodyAccountHolderType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostExternalAccountsIdRequestBodyAccountHolderType'EnumEmptyString) = "";
           toJSON (PostExternalAccountsIdRequestBodyAccountHolderType'EnumCompany) = "company";
           toJSON (PostExternalAccountsIdRequestBodyAccountHolderType'EnumIndividual) = "individual"}
instance Data.Aeson.Types.FromJSON.FromJSON PostExternalAccountsIdRequestBodyAccountHolderType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "" -> PostExternalAccountsIdRequestBodyAccountHolderType'EnumEmptyString
                                             | val GHC.Classes.== "company" -> PostExternalAccountsIdRequestBodyAccountHolderType'EnumCompany
                                             | val GHC.Classes.== "individual" -> PostExternalAccountsIdRequestBodyAccountHolderType'EnumIndividual
                                             | GHC.Base.otherwise -> PostExternalAccountsIdRequestBodyAccountHolderType'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/external_accounts\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account_type@ in the specification.
-- 
-- The bank account type. This can only be \`checking\` or \`savings\` in most countries. In Japan, this can only be \`futsu\` or \`toza\`.
data PostExternalAccountsIdRequestBodyAccountType' =
   PostExternalAccountsIdRequestBodyAccountType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostExternalAccountsIdRequestBodyAccountType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostExternalAccountsIdRequestBodyAccountType'EnumChecking -- ^ Represents the JSON value @"checking"@
  | PostExternalAccountsIdRequestBodyAccountType'EnumFutsu -- ^ Represents the JSON value @"futsu"@
  | PostExternalAccountsIdRequestBodyAccountType'EnumSavings -- ^ Represents the JSON value @"savings"@
  | PostExternalAccountsIdRequestBodyAccountType'EnumToza -- ^ Represents the JSON value @"toza"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostExternalAccountsIdRequestBodyAccountType'
    where {toJSON (PostExternalAccountsIdRequestBodyAccountType'Other val) = val;
           toJSON (PostExternalAccountsIdRequestBodyAccountType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostExternalAccountsIdRequestBodyAccountType'EnumChecking) = "checking";
           toJSON (PostExternalAccountsIdRequestBodyAccountType'EnumFutsu) = "futsu";
           toJSON (PostExternalAccountsIdRequestBodyAccountType'EnumSavings) = "savings";
           toJSON (PostExternalAccountsIdRequestBodyAccountType'EnumToza) = "toza"}
instance Data.Aeson.Types.FromJSON.FromJSON PostExternalAccountsIdRequestBodyAccountType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "checking" -> PostExternalAccountsIdRequestBodyAccountType'EnumChecking
                                             | val GHC.Classes.== "futsu" -> PostExternalAccountsIdRequestBodyAccountType'EnumFutsu
                                             | val GHC.Classes.== "savings" -> PostExternalAccountsIdRequestBodyAccountType'EnumSavings
                                             | val GHC.Classes.== "toza" -> PostExternalAccountsIdRequestBodyAccountType'EnumToza
                                             | GHC.Base.otherwise -> PostExternalAccountsIdRequestBodyAccountType'Other val)}
-- | Defines the object schema located at @paths.\/v1\/external_accounts\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.documents@ in the specification.
-- 
-- Documents that may be submitted to satisfy various informational requests.
data PostExternalAccountsIdRequestBodyDocuments' = PostExternalAccountsIdRequestBodyDocuments' {
  -- | bank_account_ownership_verification
  postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification :: (GHC.Maybe.Maybe PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostExternalAccountsIdRequestBodyDocuments'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_account_ownership_verification" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_account_ownership_verification" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostExternalAccountsIdRequestBodyDocuments'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostExternalAccountsIdRequestBodyDocuments'" (\obj -> GHC.Base.pure PostExternalAccountsIdRequestBodyDocuments' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_account_ownership_verification"))}
-- | Create a new 'PostExternalAccountsIdRequestBodyDocuments'' with all required fields.
mkPostExternalAccountsIdRequestBodyDocuments' :: PostExternalAccountsIdRequestBodyDocuments'
mkPostExternalAccountsIdRequestBodyDocuments' = PostExternalAccountsIdRequestBodyDocuments'{postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/external_accounts\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.documents.properties.bank_account_ownership_verification@ in the specification.
-- 
-- 
data PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification' = PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification' {
  -- | files
  postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'Files :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'Files obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'Files obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'" (\obj -> GHC.Base.pure PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "files"))}
-- | Create a new 'PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'' with all required fields.
mkPostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification' :: PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'
mkPostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification' = PostExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'{postExternalAccountsIdRequestBodyDocuments'BankAccountOwnershipVerification'Files = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/external_accounts\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.metadata.anyOf@ in the specification.
-- 
-- Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
data PostExternalAccountsIdRequestBodyMetadata'Variants =
   PostExternalAccountsIdRequestBodyMetadata'EmptyString -- ^ Represents the JSON value @""@
  | PostExternalAccountsIdRequestBodyMetadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostExternalAccountsIdRequestBodyMetadata'Variants
    where {toJSON (PostExternalAccountsIdRequestBodyMetadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (PostExternalAccountsIdRequestBodyMetadata'EmptyString) = ""}
instance Data.Aeson.Types.FromJSON.FromJSON PostExternalAccountsIdRequestBodyMetadata'Variants
    where {parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostExternalAccountsIdRequestBodyMetadata'EmptyString
                              | GHC.Base.otherwise -> case (PostExternalAccountsIdRequestBodyMetadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                      {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                                                       Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Represents a response of the operation 'postExternalAccountsId'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostExternalAccountsIdResponseError' is used.
data PostExternalAccountsIdResponse =
   PostExternalAccountsIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostExternalAccountsIdResponse200 ExternalAccount -- ^ Successful response.
  | PostExternalAccountsIdResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
