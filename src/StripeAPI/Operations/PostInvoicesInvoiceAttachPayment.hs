-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postInvoicesInvoiceAttachPayment
module StripeAPI.Operations.PostInvoicesInvoiceAttachPayment where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/invoices/{invoice}/attach_payment
-- 
-- \<p>Attaches a PaymentIntent or an Out of Band Payment to the invoice, adding it to the list of \<code>payments\<\/code>.\<\/p>
-- 
-- \<p>For the PaymentIntent, when the PaymentIntent’s status changes to \<code>succeeded\<\/code>, the payment is credited
-- to the invoice, increasing its \<code>amount_paid\<\/code>. When the invoice is fully paid, the
-- invoice’s status becomes \<code>paid\<\/code>.\<\/p>
-- 
-- \<p>If the PaymentIntent’s status is already \<code>succeeded\<\/code> when it’s attached, it’s
-- credited to the invoice immediately.\<\/p>
-- 
-- \<p>See: \<a href=\"\/docs\/invoicing\/partial-payments\">Partial payments\<\/a> to learn more.\<\/p>
postInvoicesInvoiceAttachPayment :: forall m . StripeAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ invoice | Constraints: Maximum length of 5000
  -> GHC.Maybe.Maybe PostInvoicesInvoiceAttachPaymentRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostInvoicesInvoiceAttachPaymentResponse) -- ^ Monadic computation which returns the result of the operation
postInvoicesInvoiceAttachPayment invoice
                                 body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostInvoicesInvoiceAttachPaymentResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostInvoicesInvoiceAttachPaymentResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Invoice)
                                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostInvoicesInvoiceAttachPaymentResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/v1/invoices/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel invoice)) GHC.Base.<> "/attach_payment")) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/invoices\/{invoice}\/attach_payment.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostInvoicesInvoiceAttachPaymentRequestBody = PostInvoicesInvoiceAttachPaymentRequestBody {
  -- | expand: Specifies which fields in the response should be expanded.
  postInvoicesInvoiceAttachPaymentRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | payment_intent: The ID of the PaymentIntent to attach to the invoice.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postInvoicesInvoiceAttachPaymentRequestBodyPaymentIntent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostInvoicesInvoiceAttachPaymentRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postInvoicesInvoiceAttachPaymentRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (postInvoicesInvoiceAttachPaymentRequestBodyPaymentIntent obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postInvoicesInvoiceAttachPaymentRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (postInvoicesInvoiceAttachPaymentRequestBodyPaymentIntent obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostInvoicesInvoiceAttachPaymentRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostInvoicesInvoiceAttachPaymentRequestBody" (\obj -> (GHC.Base.pure PostInvoicesInvoiceAttachPaymentRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent"))}
-- | Create a new 'PostInvoicesInvoiceAttachPaymentRequestBody' with all required fields.
mkPostInvoicesInvoiceAttachPaymentRequestBody :: PostInvoicesInvoiceAttachPaymentRequestBody
mkPostInvoicesInvoiceAttachPaymentRequestBody = PostInvoicesInvoiceAttachPaymentRequestBody{postInvoicesInvoiceAttachPaymentRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                            postInvoicesInvoiceAttachPaymentRequestBodyPaymentIntent = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postInvoicesInvoiceAttachPayment'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostInvoicesInvoiceAttachPaymentResponseError' is used.
data PostInvoicesInvoiceAttachPaymentResponse =
   PostInvoicesInvoiceAttachPaymentResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostInvoicesInvoiceAttachPaymentResponse200 Invoice -- ^ Successful response.
  | PostInvoicesInvoiceAttachPaymentResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
