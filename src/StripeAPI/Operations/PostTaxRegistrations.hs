-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postTaxRegistrations
module StripeAPI.Operations.PostTaxRegistrations where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/tax/registrations
-- 
-- \<p>Creates a new Tax \<code>Registration\<\/code> object.\<\/p>
postTaxRegistrations :: forall m . StripeAPI.Common.MonadHTTP m => PostTaxRegistrationsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTaxRegistrationsResponse) -- ^ Monadic computation which returns the result of the operation
postTaxRegistrations body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostTaxRegistrationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostTaxRegistrationsResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        Tax'registration)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostTaxRegistrationsResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                          Error)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") "/v1/tax/registrations" GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBody = PostTaxRegistrationsRequestBody {
  -- | active_from: Time at which the Tax Registration becomes active. It can be either \`now\` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch.
  postTaxRegistrationsRequestBodyActiveFrom :: PostTaxRegistrationsRequestBodyActiveFrom'Variants
  -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postTaxRegistrationsRequestBodyCountry :: Data.Text.Internal.Text
  -- | country_options: Specific options for a registration in the specified \`country\`.
  , postTaxRegistrationsRequestBodyCountryOptions :: PostTaxRegistrationsRequestBodyCountryOptions'
  -- | expand: Specifies which fields in the response should be expanded.
  , postTaxRegistrationsRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | expires_at: If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.
  , postTaxRegistrationsRequestBodyExpiresAt :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyActiveFrom obj] : ["country" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountry obj] : ["country_options" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyExpiresAt obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyActiveFrom obj] : ["country" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountry obj] : ["country_options" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyExpiresAt obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBody" (\obj -> ((((GHC.Base.pure PostTaxRegistrationsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at"))}
-- | Create a new 'PostTaxRegistrationsRequestBody' with all required fields.
mkPostTaxRegistrationsRequestBody :: PostTaxRegistrationsRequestBodyActiveFrom'Variants -- ^ 'postTaxRegistrationsRequestBodyActiveFrom'
  -> Data.Text.Internal.Text -- ^ 'postTaxRegistrationsRequestBodyCountry'
  -> PostTaxRegistrationsRequestBodyCountryOptions' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'
  -> PostTaxRegistrationsRequestBody
mkPostTaxRegistrationsRequestBody postTaxRegistrationsRequestBodyActiveFrom postTaxRegistrationsRequestBodyCountry postTaxRegistrationsRequestBodyCountryOptions = PostTaxRegistrationsRequestBody{postTaxRegistrationsRequestBodyActiveFrom = postTaxRegistrationsRequestBodyActiveFrom,
                                                                                                                                                                                                   postTaxRegistrationsRequestBodyCountry = postTaxRegistrationsRequestBodyCountry,
                                                                                                                                                                                                   postTaxRegistrationsRequestBodyCountryOptions = postTaxRegistrationsRequestBodyCountryOptions,
                                                                                                                                                                                                   postTaxRegistrationsRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                                                                                   postTaxRegistrationsRequestBodyExpiresAt = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.active_from.anyOf@ in the specification.
-- 
-- Time at which the Tax Registration becomes active. It can be either \`now\` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch.
data PostTaxRegistrationsRequestBodyActiveFrom'Variants =
   PostTaxRegistrationsRequestBodyActiveFrom'Now -- ^ Represents the JSON value @"now"@
  | PostTaxRegistrationsRequestBodyActiveFrom'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyActiveFrom'Variants
    where {toJSON (PostTaxRegistrationsRequestBodyActiveFrom'Int a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (PostTaxRegistrationsRequestBodyActiveFrom'Now) = "now"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyActiveFrom'Variants
    where {parseJSON val = if | val GHC.Classes.== "now" -> GHC.Base.pure PostTaxRegistrationsRequestBodyActiveFrom'Now
                              | GHC.Base.otherwise -> case (PostTaxRegistrationsRequestBodyActiveFrom'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                      {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                                                       Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options@ in the specification.
-- 
-- Specific options for a registration in the specified \`country\`.
data PostTaxRegistrationsRequestBodyCountryOptions' = PostTaxRegistrationsRequestBodyCountryOptions' {
  -- | ae
  postTaxRegistrationsRequestBodyCountryOptions'Ae :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ae')
  -- | al
  , postTaxRegistrationsRequestBodyCountryOptions'Al :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Al')
  -- | am
  , postTaxRegistrationsRequestBodyCountryOptions'Am :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Am')
  -- | ao
  , postTaxRegistrationsRequestBodyCountryOptions'Ao :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ao')
  -- | at
  , postTaxRegistrationsRequestBodyCountryOptions'At :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'At')
  -- | au
  , postTaxRegistrationsRequestBodyCountryOptions'Au :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Au')
  -- | aw
  , postTaxRegistrationsRequestBodyCountryOptions'Aw :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Aw')
  -- | az
  , postTaxRegistrationsRequestBodyCountryOptions'Az :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Az')
  -- | ba
  , postTaxRegistrationsRequestBodyCountryOptions'Ba :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ba')
  -- | bb
  , postTaxRegistrationsRequestBodyCountryOptions'Bb :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bb')
  -- | bd
  , postTaxRegistrationsRequestBodyCountryOptions'Bd :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bd')
  -- | be
  , postTaxRegistrationsRequestBodyCountryOptions'Be :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Be')
  -- | bf
  , postTaxRegistrationsRequestBodyCountryOptions'Bf :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bf')
  -- | bg
  , postTaxRegistrationsRequestBodyCountryOptions'Bg :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bg')
  -- | bh
  , postTaxRegistrationsRequestBodyCountryOptions'Bh :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bh')
  -- | bj
  , postTaxRegistrationsRequestBodyCountryOptions'Bj :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bj')
  -- | bs
  , postTaxRegistrationsRequestBodyCountryOptions'Bs :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bs')
  -- | by
  , postTaxRegistrationsRequestBodyCountryOptions'By :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'By')
  -- | ca
  , postTaxRegistrationsRequestBodyCountryOptions'Ca :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ca')
  -- | cd
  , postTaxRegistrationsRequestBodyCountryOptions'Cd :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cd')
  -- | ch
  , postTaxRegistrationsRequestBodyCountryOptions'Ch :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ch')
  -- | cl
  , postTaxRegistrationsRequestBodyCountryOptions'Cl :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cl')
  -- | cm
  , postTaxRegistrationsRequestBodyCountryOptions'Cm :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cm')
  -- | co
  , postTaxRegistrationsRequestBodyCountryOptions'Co :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Co')
  -- | cr
  , postTaxRegistrationsRequestBodyCountryOptions'Cr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cr')
  -- | cv
  , postTaxRegistrationsRequestBodyCountryOptions'Cv :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cv')
  -- | cy
  , postTaxRegistrationsRequestBodyCountryOptions'Cy :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cy')
  -- | cz
  , postTaxRegistrationsRequestBodyCountryOptions'Cz :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cz')
  -- | de
  , postTaxRegistrationsRequestBodyCountryOptions'De :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'De')
  -- | dk
  , postTaxRegistrationsRequestBodyCountryOptions'Dk :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Dk')
  -- | ec
  , postTaxRegistrationsRequestBodyCountryOptions'Ec :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ec')
  -- | ee
  , postTaxRegistrationsRequestBodyCountryOptions'Ee :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ee')
  -- | eg
  , postTaxRegistrationsRequestBodyCountryOptions'Eg :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Eg')
  -- | es
  , postTaxRegistrationsRequestBodyCountryOptions'Es :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Es')
  -- | et
  , postTaxRegistrationsRequestBodyCountryOptions'Et :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Et')
  -- | fi
  , postTaxRegistrationsRequestBodyCountryOptions'Fi :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Fi')
  -- | fr
  , postTaxRegistrationsRequestBodyCountryOptions'Fr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Fr')
  -- | gb
  , postTaxRegistrationsRequestBodyCountryOptions'Gb :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gb')
  -- | ge
  , postTaxRegistrationsRequestBodyCountryOptions'Ge :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ge')
  -- | gn
  , postTaxRegistrationsRequestBodyCountryOptions'Gn :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gn')
  -- | gr
  , postTaxRegistrationsRequestBodyCountryOptions'Gr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gr')
  -- | hr
  , postTaxRegistrationsRequestBodyCountryOptions'Hr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Hr')
  -- | hu
  , postTaxRegistrationsRequestBodyCountryOptions'Hu :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Hu')
  -- | id
  , postTaxRegistrationsRequestBodyCountryOptions'Id :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Id')
  -- | ie
  , postTaxRegistrationsRequestBodyCountryOptions'Ie :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ie')
  -- | in
  , postTaxRegistrationsRequestBodyCountryOptions'In :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'In')
  -- | is
  , postTaxRegistrationsRequestBodyCountryOptions'Is :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Is')
  -- | it
  , postTaxRegistrationsRequestBodyCountryOptions'It :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'It')
  -- | jp
  , postTaxRegistrationsRequestBodyCountryOptions'Jp :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Jp')
  -- | ke
  , postTaxRegistrationsRequestBodyCountryOptions'Ke :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ke')
  -- | kg
  , postTaxRegistrationsRequestBodyCountryOptions'Kg :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Kg')
  -- | kh
  , postTaxRegistrationsRequestBodyCountryOptions'Kh :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Kh')
  -- | kr
  , postTaxRegistrationsRequestBodyCountryOptions'Kr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Kr')
  -- | kz
  , postTaxRegistrationsRequestBodyCountryOptions'Kz :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Kz')
  -- | la
  , postTaxRegistrationsRequestBodyCountryOptions'La :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'La')
  -- | lt
  , postTaxRegistrationsRequestBodyCountryOptions'Lt :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Lt')
  -- | lu
  , postTaxRegistrationsRequestBodyCountryOptions'Lu :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Lu')
  -- | lv
  , postTaxRegistrationsRequestBodyCountryOptions'Lv :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Lv')
  -- | ma
  , postTaxRegistrationsRequestBodyCountryOptions'Ma :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ma')
  -- | md
  , postTaxRegistrationsRequestBodyCountryOptions'Md :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Md')
  -- | me
  , postTaxRegistrationsRequestBodyCountryOptions'Me :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Me')
  -- | mk
  , postTaxRegistrationsRequestBodyCountryOptions'Mk :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mk')
  -- | mr
  , postTaxRegistrationsRequestBodyCountryOptions'Mr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mr')
  -- | mt
  , postTaxRegistrationsRequestBodyCountryOptions'Mt :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mt')
  -- | mx
  , postTaxRegistrationsRequestBodyCountryOptions'Mx :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mx')
  -- | my
  , postTaxRegistrationsRequestBodyCountryOptions'My :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'My')
  -- | ng
  , postTaxRegistrationsRequestBodyCountryOptions'Ng :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ng')
  -- | nl
  , postTaxRegistrationsRequestBodyCountryOptions'Nl :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Nl')
  -- | no
  , postTaxRegistrationsRequestBodyCountryOptions'No :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'No')
  -- | np
  , postTaxRegistrationsRequestBodyCountryOptions'Np :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Np')
  -- | nz
  , postTaxRegistrationsRequestBodyCountryOptions'Nz :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Nz')
  -- | om
  , postTaxRegistrationsRequestBodyCountryOptions'Om :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Om')
  -- | pe
  , postTaxRegistrationsRequestBodyCountryOptions'Pe :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Pe')
  -- | ph
  , postTaxRegistrationsRequestBodyCountryOptions'Ph :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ph')
  -- | pl
  , postTaxRegistrationsRequestBodyCountryOptions'Pl :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Pl')
  -- | pt
  , postTaxRegistrationsRequestBodyCountryOptions'Pt :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Pt')
  -- | ro
  , postTaxRegistrationsRequestBodyCountryOptions'Ro :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ro')
  -- | rs
  , postTaxRegistrationsRequestBodyCountryOptions'Rs :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Rs')
  -- | ru
  , postTaxRegistrationsRequestBodyCountryOptions'Ru :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ru')
  -- | sa
  , postTaxRegistrationsRequestBodyCountryOptions'Sa :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sa')
  -- | se
  , postTaxRegistrationsRequestBodyCountryOptions'Se :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Se')
  -- | sg
  , postTaxRegistrationsRequestBodyCountryOptions'Sg :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sg')
  -- | si
  , postTaxRegistrationsRequestBodyCountryOptions'Si :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Si')
  -- | sk
  , postTaxRegistrationsRequestBodyCountryOptions'Sk :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sk')
  -- | sn
  , postTaxRegistrationsRequestBodyCountryOptions'Sn :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sn')
  -- | sr
  , postTaxRegistrationsRequestBodyCountryOptions'Sr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sr')
  -- | th
  , postTaxRegistrationsRequestBodyCountryOptions'Th :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Th')
  -- | tj
  , postTaxRegistrationsRequestBodyCountryOptions'Tj :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Tj')
  -- | tr
  , postTaxRegistrationsRequestBodyCountryOptions'Tr :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Tr')
  -- | tz
  , postTaxRegistrationsRequestBodyCountryOptions'Tz :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Tz')
  -- | ua
  , postTaxRegistrationsRequestBodyCountryOptions'Ua :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ua')
  -- | ug
  , postTaxRegistrationsRequestBodyCountryOptions'Ug :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ug')
  -- | us
  , postTaxRegistrationsRequestBodyCountryOptions'Us :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Us')
  -- | uy
  , postTaxRegistrationsRequestBodyCountryOptions'Uy :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Uy')
  -- | uz
  , postTaxRegistrationsRequestBodyCountryOptions'Uz :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Uz')
  -- | vn
  , postTaxRegistrationsRequestBodyCountryOptions'Vn :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Vn')
  -- | za
  , postTaxRegistrationsRequestBodyCountryOptions'Za :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Za')
  -- | zm
  , postTaxRegistrationsRequestBodyCountryOptions'Zm :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Zm')
  -- | zw
  , postTaxRegistrationsRequestBodyCountryOptions'Zw :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Zw')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ae" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ae obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("al" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Al obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("am" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Am obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ao" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ao obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("at" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'At obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Au obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("aw" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Aw obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("az" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Az obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ba" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ba obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bb" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bb obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bd" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bd obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("be" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Be obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bf" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bh" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bj" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bj obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bs" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("by" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'By obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ca" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ca obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cd" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cd obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ch" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cl" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cm" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("co" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Co obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cv" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cv obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cy" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("de" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'De obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dk" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Dk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ec" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ec obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ee" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Eg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("es" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Es obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("et" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Et obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fi" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fi obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gb" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gb obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ge" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gn" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hu" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hu obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ie" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ie obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("in" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'In obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Is obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("it" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'It obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jp" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Jp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ke" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ke obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kh" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("la" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'La obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lu" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lu obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lv" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lv obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ma" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ma obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("md" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Md obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("me" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Me obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mk" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mt" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mx" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("my" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'My obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ng" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ng obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nl" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("no" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'No obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("np" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Np obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("om" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Om obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pe" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ph" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ph obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pl" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pt" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ro" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ro obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rs" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Rs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ru" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ru obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sa" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sa obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("se" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Se obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("si" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Si obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sk" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sn" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("th" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Th obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tj" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Tj obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Tr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Tz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ua" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ua obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ug" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uy" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vn" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Vn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("za" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Za obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zm" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zw" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zw obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ae" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ae obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("al" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Al obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("am" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Am obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ao" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ao obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("at" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'At obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Au obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("aw" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Aw obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("az" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Az obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ba" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ba obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bb" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bb obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bd" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bd obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("be" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Be obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bf" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bh" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bj" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bj obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bs" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("by" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'By obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ca" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ca obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cd" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cd obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ch" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cl" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cm" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("co" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Co obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cv" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cv obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cy" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("de" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'De obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dk" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Dk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ec" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ec obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ee" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Eg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("es" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Es obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("et" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Et obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fi" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fi obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gb" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gb obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ge" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gn" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hu" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hu obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ie" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ie obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("in" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'In obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Is obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("it" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'It obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jp" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Jp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ke" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ke obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kh" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Kz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("la" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'La obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lu" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lu obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lv" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lv obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ma" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ma obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("md" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Md obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("me" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Me obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mk" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mt" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mx" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("my" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'My obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ng" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ng obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nl" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("no" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'No obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("np" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Np obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("om" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Om obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pe" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ph" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ph obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pl" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pt" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ro" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ro obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rs" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Rs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ru" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ru obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sa" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sa obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("se" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Se obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sg" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("si" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Si obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sk" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sn" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("th" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Th obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tj" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Tj obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tr" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Tr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Tz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ua" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ua obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ug" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uy" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uz" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uz obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vn" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Vn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("za" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Za obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zm" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zw" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zw obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'" (\obj -> ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ae")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "al")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "am")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ao")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "aw")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "az")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ba")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bb")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "be")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bh")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ca")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "co")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cv")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cz")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "de")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ec")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "es")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "et")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fi")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gb")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hu")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ie")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "it")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ke")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kh")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kz")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "la")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lu")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lv")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ma")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "md")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "me")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "my")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ng")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "nl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "no")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "np")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "nz")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "om")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pe")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ph")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ro")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "rs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ru")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sa")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "se")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "si")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "th")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tz")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ua")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "uy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "uz")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "vn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "za")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zw"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions' :: PostTaxRegistrationsRequestBodyCountryOptions'
mkPostTaxRegistrationsRequestBodyCountryOptions' = PostTaxRegistrationsRequestBodyCountryOptions'{postTaxRegistrationsRequestBodyCountryOptions'Ae = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Al = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Am = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ao = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'At = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Au = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Aw = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Az = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ba = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Bb = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Bd = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Be = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Bf = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Bg = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Bh = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Bj = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Bs = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'By = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ca = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Cd = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ch = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Cl = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Cm = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Co = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Cr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Cv = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Cy = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Cz = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'De = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Dk = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ec = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ee = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Eg = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Es = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Et = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Fi = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Fr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Gb = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ge = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Gn = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Gr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Hr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Hu = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Id = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ie = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'In = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Is = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'It = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Jp = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ke = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Kg = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Kh = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Kr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Kz = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'La = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Lt = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Lu = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Lv = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ma = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Md = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Me = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Mk = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Mr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Mt = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Mx = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'My = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ng = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Nl = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'No = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Np = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Nz = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Om = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Pe = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ph = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Pl = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Pt = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ro = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Rs = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ru = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Sa = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Se = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Sg = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Si = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Sk = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Sn = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Sr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Th = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Tj = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Tr = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Tz = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ua = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Ug = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Us = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Uy = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Uz = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Vn = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Za = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Zm = GHC.Maybe.Nothing,
                                                                                                  postTaxRegistrationsRequestBodyCountryOptions'Zw = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ae@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ae' = PostTaxRegistrationsRequestBodyCountryOptions'Ae' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ae'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ae'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ae'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ae' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ae'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ae' :: PostTaxRegistrationsRequestBodyCountryOptions'Ae'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ae' = PostTaxRegistrationsRequestBodyCountryOptions'Ae'{postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ae.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ae.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ae'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.al@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Al' = PostTaxRegistrationsRequestBodyCountryOptions'Al' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Al'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Al'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Al'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Al'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Al'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Al'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Al' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Al'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Al' :: PostTaxRegistrationsRequestBodyCountryOptions'Al'
mkPostTaxRegistrationsRequestBodyCountryOptions'Al' = PostTaxRegistrationsRequestBodyCountryOptions'Al'{postTaxRegistrationsRequestBodyCountryOptions'Al'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.al.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Al'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Al'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.al.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Al'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.am@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Am' = PostTaxRegistrationsRequestBodyCountryOptions'Am' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Am'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Am'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Am'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Am')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Am'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Am' :: PostTaxRegistrationsRequestBodyCountryOptions'Am'
mkPostTaxRegistrationsRequestBodyCountryOptions'Am' = PostTaxRegistrationsRequestBodyCountryOptions'Am'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ao@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ao' = PostTaxRegistrationsRequestBodyCountryOptions'Ao' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ao'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ao'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ao'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ao' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ao'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ao' :: PostTaxRegistrationsRequestBodyCountryOptions'Ao'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ao' = PostTaxRegistrationsRequestBodyCountryOptions'Ao'{postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ao.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ao.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ao'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.at@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'At' = PostTaxRegistrationsRequestBodyCountryOptions'At' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'At'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'At'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'At'Type :: PostTaxRegistrationsRequestBodyCountryOptions'At'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'At'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'At'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'At'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'At'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'At'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'At'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'At'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'At' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'At'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'At' :: PostTaxRegistrationsRequestBodyCountryOptions'At'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'At'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'At'
mkPostTaxRegistrationsRequestBodyCountryOptions'At' postTaxRegistrationsRequestBodyCountryOptions'At'Type = PostTaxRegistrationsRequestBodyCountryOptions'At'{postTaxRegistrationsRequestBodyCountryOptions'At'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'At'Type = postTaxRegistrationsRequestBodyCountryOptions'At'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.at.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'At'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'At'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'At'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'At'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'At'Standard' postTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'{postTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.at.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'At'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.at.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'At'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'At'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'At'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'At'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'At'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'At'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.au@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Au' = PostTaxRegistrationsRequestBodyCountryOptions'Au' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Au'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Au'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Au'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Au'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Au'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Au'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Au' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Au'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Au' :: PostTaxRegistrationsRequestBodyCountryOptions'Au'
mkPostTaxRegistrationsRequestBodyCountryOptions'Au' = PostTaxRegistrationsRequestBodyCountryOptions'Au'{postTaxRegistrationsRequestBodyCountryOptions'Au'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.au.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Au'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Au'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.au.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Au'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.aw@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Aw' = PostTaxRegistrationsRequestBodyCountryOptions'Aw' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Aw'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Aw'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Aw'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Aw' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Aw'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Aw' :: PostTaxRegistrationsRequestBodyCountryOptions'Aw'
mkPostTaxRegistrationsRequestBodyCountryOptions'Aw' = PostTaxRegistrationsRequestBodyCountryOptions'Aw'{postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.aw.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.aw.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Aw'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.az@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Az' = PostTaxRegistrationsRequestBodyCountryOptions'Az' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Az'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Az'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Az'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Az')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Az'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Az' :: PostTaxRegistrationsRequestBodyCountryOptions'Az'
mkPostTaxRegistrationsRequestBodyCountryOptions'Az' = PostTaxRegistrationsRequestBodyCountryOptions'Az'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ba@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ba' = PostTaxRegistrationsRequestBodyCountryOptions'Ba' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ba'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ba'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ba'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ba' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ba'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ba' :: PostTaxRegistrationsRequestBodyCountryOptions'Ba'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ba' = PostTaxRegistrationsRequestBodyCountryOptions'Ba'{postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ba.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ba.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ba'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bb@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bb' = PostTaxRegistrationsRequestBodyCountryOptions'Bb' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bb'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bb'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bb'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bb' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bb'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bb' :: PostTaxRegistrationsRequestBodyCountryOptions'Bb'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bb' = PostTaxRegistrationsRequestBodyCountryOptions'Bb'{postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bb.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bb.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Bb'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bd@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bd' = PostTaxRegistrationsRequestBodyCountryOptions'Bd' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bd'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bd'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bd'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bd' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bd'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bd' :: PostTaxRegistrationsRequestBodyCountryOptions'Bd'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bd' = PostTaxRegistrationsRequestBodyCountryOptions'Bd'{postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bd.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bd.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Bd'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.be@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Be' = PostTaxRegistrationsRequestBodyCountryOptions'Be' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Be'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Be'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Be'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Be'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Be'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Be'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Be'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Be' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Be'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Be' :: PostTaxRegistrationsRequestBodyCountryOptions'Be'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Be'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Be'
mkPostTaxRegistrationsRequestBodyCountryOptions'Be' postTaxRegistrationsRequestBodyCountryOptions'Be'Type = PostTaxRegistrationsRequestBodyCountryOptions'Be'{postTaxRegistrationsRequestBodyCountryOptions'Be'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Be'Type = postTaxRegistrationsRequestBodyCountryOptions'Be'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.be.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Be'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Be'Standard' postTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.be.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.be.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Be'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Be'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bf@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bf' = PostTaxRegistrationsRequestBodyCountryOptions'Bf' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bf'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bf'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bf'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bf' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bf'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bf' :: PostTaxRegistrationsRequestBodyCountryOptions'Bf'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bf' = PostTaxRegistrationsRequestBodyCountryOptions'Bf'{postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bf.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bf.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Bf'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bg@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bg' = PostTaxRegistrationsRequestBodyCountryOptions'Bg' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Bg'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Bg'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Bg'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bg'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bg' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bg'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bg' :: PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Bg'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bg' postTaxRegistrationsRequestBodyCountryOptions'Bg'Type = PostTaxRegistrationsRequestBodyCountryOptions'Bg'{postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Bg'Type = postTaxRegistrationsRequestBodyCountryOptions'Bg'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bg.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard' postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bg.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bg.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Bg'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bh@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bh' = PostTaxRegistrationsRequestBodyCountryOptions'Bh' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bh'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bh'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bh'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bh' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bh'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bh' :: PostTaxRegistrationsRequestBodyCountryOptions'Bh'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bh' = PostTaxRegistrationsRequestBodyCountryOptions'Bh'{postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bh.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bh.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Bh'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bj@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bj' = PostTaxRegistrationsRequestBodyCountryOptions'Bj' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bj'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bj'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bj'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bj')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bj'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bj' :: PostTaxRegistrationsRequestBodyCountryOptions'Bj'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bj' = PostTaxRegistrationsRequestBodyCountryOptions'Bj'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bs@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bs' = PostTaxRegistrationsRequestBodyCountryOptions'Bs' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bs'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bs'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bs'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bs' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bs'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bs' :: PostTaxRegistrationsRequestBodyCountryOptions'Bs'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bs' = PostTaxRegistrationsRequestBodyCountryOptions'Bs'{postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bs.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.bs.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Bs'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.by@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'By' = PostTaxRegistrationsRequestBodyCountryOptions'By' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'By'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'By'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'By'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'By')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'By'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'By' :: PostTaxRegistrationsRequestBodyCountryOptions'By'
mkPostTaxRegistrationsRequestBodyCountryOptions'By' = PostTaxRegistrationsRequestBodyCountryOptions'By'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ca@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ca' = PostTaxRegistrationsRequestBodyCountryOptions'Ca' {
  -- | province_standard
  postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Ca'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ca'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("province_standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ca'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("province_standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ca'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ca'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ca'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ca' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "province_standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ca'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ca' :: PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ca'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ca'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ca' postTaxRegistrationsRequestBodyCountryOptions'Ca'Type = PostTaxRegistrationsRequestBodyCountryOptions'Ca'{postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Ca'Type = postTaxRegistrationsRequestBodyCountryOptions'Ca'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ca.properties.province_standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard' = PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard' {
  -- | province
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'Province :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["province" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'Province obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["province" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'Province obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "province"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard' :: Data.Text.Internal.Text -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'Province'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard' postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'Province = PostTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'{postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'Province = postTaxRegistrationsRequestBodyCountryOptions'Ca'ProvinceStandard'Province}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ca.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumProvinceStandard -- ^ Represents the JSON value @"province_standard"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumSimplified -- ^ Represents the JSON value @"simplified"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumProvinceStandard) = "province_standard";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumSimplified) = "simplified";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "province_standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumProvinceStandard
                                             | val GHC.Classes.== "simplified" -> PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumSimplified
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ca'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cd@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cd' = PostTaxRegistrationsRequestBodyCountryOptions'Cd' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cd'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cd'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cd'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cd' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cd'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cd' :: PostTaxRegistrationsRequestBodyCountryOptions'Cd'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cd' = PostTaxRegistrationsRequestBodyCountryOptions'Cd'{postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cd.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cd.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Cd'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ch@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ch' = PostTaxRegistrationsRequestBodyCountryOptions'Ch' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ch'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ch'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ch'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ch' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ch'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ch' :: PostTaxRegistrationsRequestBodyCountryOptions'Ch'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ch' = PostTaxRegistrationsRequestBodyCountryOptions'Ch'{postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ch.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ch.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ch'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cl@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cl' = PostTaxRegistrationsRequestBodyCountryOptions'Cl' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cl'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cl'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cl'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cl')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cl'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cl' :: PostTaxRegistrationsRequestBodyCountryOptions'Cl'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cl' = PostTaxRegistrationsRequestBodyCountryOptions'Cl'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cm@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cm' = PostTaxRegistrationsRequestBodyCountryOptions'Cm' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cm'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cm'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cm'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cm')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cm'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cm' :: PostTaxRegistrationsRequestBodyCountryOptions'Cm'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cm' = PostTaxRegistrationsRequestBodyCountryOptions'Cm'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.co@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Co' = PostTaxRegistrationsRequestBodyCountryOptions'Co' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Co'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Co'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Co'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Co')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Co'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Co' :: PostTaxRegistrationsRequestBodyCountryOptions'Co'
mkPostTaxRegistrationsRequestBodyCountryOptions'Co' = PostTaxRegistrationsRequestBodyCountryOptions'Co'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cr' = PostTaxRegistrationsRequestBodyCountryOptions'Cr' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cr'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cr')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cr' :: PostTaxRegistrationsRequestBodyCountryOptions'Cr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cr' = PostTaxRegistrationsRequestBodyCountryOptions'Cr'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cv@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cv' = PostTaxRegistrationsRequestBodyCountryOptions'Cv' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cv'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cv'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cv'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cv')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cv'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cv' :: PostTaxRegistrationsRequestBodyCountryOptions'Cv'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cv' = PostTaxRegistrationsRequestBodyCountryOptions'Cv'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cy@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cy' = PostTaxRegistrationsRequestBodyCountryOptions'Cy' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Cy'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cy'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cy'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cy'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cy' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cy'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cy' :: PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Cy'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cy' postTaxRegistrationsRequestBodyCountryOptions'Cy'Type = PostTaxRegistrationsRequestBodyCountryOptions'Cy'{postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Cy'Type = postTaxRegistrationsRequestBodyCountryOptions'Cy'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cy.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard' postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cy.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cy.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Cy'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cz@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cz' = PostTaxRegistrationsRequestBodyCountryOptions'Cz' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Cz'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cz'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cz'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cz'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cz' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cz'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cz' :: PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Cz'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cz' postTaxRegistrationsRequestBodyCountryOptions'Cz'Type = PostTaxRegistrationsRequestBodyCountryOptions'Cz'{postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Cz'Type = postTaxRegistrationsRequestBodyCountryOptions'Cz'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cz.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard' postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cz.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.cz.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Cz'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.de@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'De' = PostTaxRegistrationsRequestBodyCountryOptions'De' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'De'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'De'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'De'Type :: PostTaxRegistrationsRequestBodyCountryOptions'De'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'De'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'De'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'De'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'De'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'De'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'De'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'De'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'De' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'De'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'De' :: PostTaxRegistrationsRequestBodyCountryOptions'De'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'De'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'De'
mkPostTaxRegistrationsRequestBodyCountryOptions'De' postTaxRegistrationsRequestBodyCountryOptions'De'Type = PostTaxRegistrationsRequestBodyCountryOptions'De'{postTaxRegistrationsRequestBodyCountryOptions'De'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'De'Type = postTaxRegistrationsRequestBodyCountryOptions'De'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.de.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'De'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'De'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'De'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'De'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'De'Standard' postTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'{postTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.de.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'De'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.de.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'De'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'De'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'De'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'De'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'De'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'De'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.dk@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Dk' = PostTaxRegistrationsRequestBodyCountryOptions'Dk' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Dk'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Dk'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Dk'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Dk'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Dk' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Dk'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Dk' :: PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Dk'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'
mkPostTaxRegistrationsRequestBodyCountryOptions'Dk' postTaxRegistrationsRequestBodyCountryOptions'Dk'Type = PostTaxRegistrationsRequestBodyCountryOptions'Dk'{postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Dk'Type = postTaxRegistrationsRequestBodyCountryOptions'Dk'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.dk.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard' postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.dk.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.dk.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Dk'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ec@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ec' = PostTaxRegistrationsRequestBodyCountryOptions'Ec' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ec'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ec'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ec'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ec')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ec'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ec' :: PostTaxRegistrationsRequestBodyCountryOptions'Ec'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ec' = PostTaxRegistrationsRequestBodyCountryOptions'Ec'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ee@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ee' = PostTaxRegistrationsRequestBodyCountryOptions'Ee' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Ee'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ee'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ee'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ee'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ee' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ee'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ee' :: PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ee'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ee' postTaxRegistrationsRequestBodyCountryOptions'Ee'Type = PostTaxRegistrationsRequestBodyCountryOptions'Ee'{postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Ee'Type = postTaxRegistrationsRequestBodyCountryOptions'Ee'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ee.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard' postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ee.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ee.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ee'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.eg@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Eg' = PostTaxRegistrationsRequestBodyCountryOptions'Eg' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Eg'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Eg'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Eg'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Eg')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Eg'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Eg' :: PostTaxRegistrationsRequestBodyCountryOptions'Eg'
mkPostTaxRegistrationsRequestBodyCountryOptions'Eg' = PostTaxRegistrationsRequestBodyCountryOptions'Eg'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.es@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Es' = PostTaxRegistrationsRequestBodyCountryOptions'Es' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Es'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Es'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Es'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Es'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Es'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Es'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Es'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Es' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Es'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Es' :: PostTaxRegistrationsRequestBodyCountryOptions'Es'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Es'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Es'
mkPostTaxRegistrationsRequestBodyCountryOptions'Es' postTaxRegistrationsRequestBodyCountryOptions'Es'Type = PostTaxRegistrationsRequestBodyCountryOptions'Es'{postTaxRegistrationsRequestBodyCountryOptions'Es'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Es'Type = postTaxRegistrationsRequestBodyCountryOptions'Es'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.es.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Es'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Es'Standard' postTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.es.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.es.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Es'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Es'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.et@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Et' = PostTaxRegistrationsRequestBodyCountryOptions'Et' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Et'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Et'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Et'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Et'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Et'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Et'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Et' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Et'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Et' :: PostTaxRegistrationsRequestBodyCountryOptions'Et'
mkPostTaxRegistrationsRequestBodyCountryOptions'Et' = PostTaxRegistrationsRequestBodyCountryOptions'Et'{postTaxRegistrationsRequestBodyCountryOptions'Et'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.et.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Et'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Et'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.et.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Et'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fi@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fi' = PostTaxRegistrationsRequestBodyCountryOptions'Fi' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Fi'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fi'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fi'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Fi'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Fi' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Fi'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Fi' :: PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Fi'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'
mkPostTaxRegistrationsRequestBodyCountryOptions'Fi' postTaxRegistrationsRequestBodyCountryOptions'Fi'Type = PostTaxRegistrationsRequestBodyCountryOptions'Fi'{postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Fi'Type = postTaxRegistrationsRequestBodyCountryOptions'Fi'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fi.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard' postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fi.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fi.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Fi'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fr' = PostTaxRegistrationsRequestBodyCountryOptions'Fr' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Fr'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fr'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fr'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Fr'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Fr' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Fr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Fr' :: PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Fr'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Fr' postTaxRegistrationsRequestBodyCountryOptions'Fr'Type = PostTaxRegistrationsRequestBodyCountryOptions'Fr'{postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Fr'Type = postTaxRegistrationsRequestBodyCountryOptions'Fr'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fr.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard' postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fr.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.fr.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Fr'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gb@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gb' = PostTaxRegistrationsRequestBodyCountryOptions'Gb' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gb'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gb'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Gb'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Gb' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Gb'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Gb' :: PostTaxRegistrationsRequestBodyCountryOptions'Gb'
mkPostTaxRegistrationsRequestBodyCountryOptions'Gb' = PostTaxRegistrationsRequestBodyCountryOptions'Gb'{postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gb.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gb.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Gb'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ge@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ge' = PostTaxRegistrationsRequestBodyCountryOptions'Ge' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ge'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ge'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ge'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ge')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ge'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ge' :: PostTaxRegistrationsRequestBodyCountryOptions'Ge'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ge' = PostTaxRegistrationsRequestBodyCountryOptions'Ge'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gn@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gn' = PostTaxRegistrationsRequestBodyCountryOptions'Gn' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gn'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gn'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Gn'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Gn' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Gn'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Gn' :: PostTaxRegistrationsRequestBodyCountryOptions'Gn'
mkPostTaxRegistrationsRequestBodyCountryOptions'Gn' = PostTaxRegistrationsRequestBodyCountryOptions'Gn'{postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gn.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gn.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Gn'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gr' = PostTaxRegistrationsRequestBodyCountryOptions'Gr' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Gr'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Gr'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Gr'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Gr'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Gr' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Gr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Gr' :: PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Gr'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Gr' postTaxRegistrationsRequestBodyCountryOptions'Gr'Type = PostTaxRegistrationsRequestBodyCountryOptions'Gr'{postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Gr'Type = postTaxRegistrationsRequestBodyCountryOptions'Gr'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gr.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard' postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gr.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.gr.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Gr'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hr' = PostTaxRegistrationsRequestBodyCountryOptions'Hr' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Hr'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hr'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hr'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Hr'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Hr' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Hr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Hr' :: PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Hr'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Hr' postTaxRegistrationsRequestBodyCountryOptions'Hr'Type = PostTaxRegistrationsRequestBodyCountryOptions'Hr'{postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Hr'Type = postTaxRegistrationsRequestBodyCountryOptions'Hr'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hr.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard' postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hr.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hr.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Hr'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hu@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hu' = PostTaxRegistrationsRequestBodyCountryOptions'Hu' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Hu'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hu'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hu'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Hu'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Hu' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Hu'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Hu' :: PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Hu'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'
mkPostTaxRegistrationsRequestBodyCountryOptions'Hu' postTaxRegistrationsRequestBodyCountryOptions'Hu'Type = PostTaxRegistrationsRequestBodyCountryOptions'Hu'{postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Hu'Type = postTaxRegistrationsRequestBodyCountryOptions'Hu'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hu.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard' postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hu.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.hu.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Hu'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.id@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Id' = PostTaxRegistrationsRequestBodyCountryOptions'Id' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Id'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Id'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Id'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Id')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Id'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Id' :: PostTaxRegistrationsRequestBodyCountryOptions'Id'
mkPostTaxRegistrationsRequestBodyCountryOptions'Id' = PostTaxRegistrationsRequestBodyCountryOptions'Id'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ie@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ie' = PostTaxRegistrationsRequestBodyCountryOptions'Ie' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Ie'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ie'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ie'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ie'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ie' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ie'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ie' :: PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ie'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ie' postTaxRegistrationsRequestBodyCountryOptions'Ie'Type = PostTaxRegistrationsRequestBodyCountryOptions'Ie'{postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Ie'Type = postTaxRegistrationsRequestBodyCountryOptions'Ie'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ie.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard' postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ie.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ie.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ie'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.in@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'In' = PostTaxRegistrationsRequestBodyCountryOptions'In' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'In'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'In'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'In'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'In')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'In'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'In' :: PostTaxRegistrationsRequestBodyCountryOptions'In'
mkPostTaxRegistrationsRequestBodyCountryOptions'In' = PostTaxRegistrationsRequestBodyCountryOptions'In'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.is@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Is' = PostTaxRegistrationsRequestBodyCountryOptions'Is' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Is'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Is'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Is'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Is'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Is'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Is'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Is' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Is'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Is' :: PostTaxRegistrationsRequestBodyCountryOptions'Is'
mkPostTaxRegistrationsRequestBodyCountryOptions'Is' = PostTaxRegistrationsRequestBodyCountryOptions'Is'{postTaxRegistrationsRequestBodyCountryOptions'Is'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.is.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Is'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Is'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.is.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Is'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.it@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'It' = PostTaxRegistrationsRequestBodyCountryOptions'It' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'It'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'It'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'It'Type :: PostTaxRegistrationsRequestBodyCountryOptions'It'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'It'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'It'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'It'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'It'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'It'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'It'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'It'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'It' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'It'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'It' :: PostTaxRegistrationsRequestBodyCountryOptions'It'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'It'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'It'
mkPostTaxRegistrationsRequestBodyCountryOptions'It' postTaxRegistrationsRequestBodyCountryOptions'It'Type = PostTaxRegistrationsRequestBodyCountryOptions'It'{postTaxRegistrationsRequestBodyCountryOptions'It'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'It'Type = postTaxRegistrationsRequestBodyCountryOptions'It'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.it.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'It'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'It'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'It'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'It'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'It'Standard' postTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'{postTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.it.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'It'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.it.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'It'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'It'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'It'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'It'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'It'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'It'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.jp@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Jp' = PostTaxRegistrationsRequestBodyCountryOptions'Jp' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Jp'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Jp'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Jp'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Jp' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Jp'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Jp' :: PostTaxRegistrationsRequestBodyCountryOptions'Jp'
mkPostTaxRegistrationsRequestBodyCountryOptions'Jp' = PostTaxRegistrationsRequestBodyCountryOptions'Jp'{postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.jp.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.jp.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Jp'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ke@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ke' = PostTaxRegistrationsRequestBodyCountryOptions'Ke' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ke'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ke'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ke'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ke')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ke'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ke' :: PostTaxRegistrationsRequestBodyCountryOptions'Ke'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ke' = PostTaxRegistrationsRequestBodyCountryOptions'Ke'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.kg@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Kg' = PostTaxRegistrationsRequestBodyCountryOptions'Kg' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Kg'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Kg'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Kg'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Kg')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Kg'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Kg' :: PostTaxRegistrationsRequestBodyCountryOptions'Kg'
mkPostTaxRegistrationsRequestBodyCountryOptions'Kg' = PostTaxRegistrationsRequestBodyCountryOptions'Kg'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.kh@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Kh' = PostTaxRegistrationsRequestBodyCountryOptions'Kh' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Kh'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Kh'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Kh'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Kh')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Kh'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Kh' :: PostTaxRegistrationsRequestBodyCountryOptions'Kh'
mkPostTaxRegistrationsRequestBodyCountryOptions'Kh' = PostTaxRegistrationsRequestBodyCountryOptions'Kh'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.kr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Kr' = PostTaxRegistrationsRequestBodyCountryOptions'Kr' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Kr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Kr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Kr'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Kr')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Kr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Kr' :: PostTaxRegistrationsRequestBodyCountryOptions'Kr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Kr' = PostTaxRegistrationsRequestBodyCountryOptions'Kr'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.kz@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Kz' = PostTaxRegistrationsRequestBodyCountryOptions'Kz' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Kz'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Kz'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Kz'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Kz')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Kz'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Kz' :: PostTaxRegistrationsRequestBodyCountryOptions'Kz'
mkPostTaxRegistrationsRequestBodyCountryOptions'Kz' = PostTaxRegistrationsRequestBodyCountryOptions'Kz'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.la@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'La' = PostTaxRegistrationsRequestBodyCountryOptions'La' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'La'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'La'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'La'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'La')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'La'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'La' :: PostTaxRegistrationsRequestBodyCountryOptions'La'
mkPostTaxRegistrationsRequestBodyCountryOptions'La' = PostTaxRegistrationsRequestBodyCountryOptions'La'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lt@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lt' = PostTaxRegistrationsRequestBodyCountryOptions'Lt' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Lt'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lt'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lt'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Lt'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Lt' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Lt'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Lt' :: PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Lt'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'
mkPostTaxRegistrationsRequestBodyCountryOptions'Lt' postTaxRegistrationsRequestBodyCountryOptions'Lt'Type = PostTaxRegistrationsRequestBodyCountryOptions'Lt'{postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Lt'Type = postTaxRegistrationsRequestBodyCountryOptions'Lt'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lt.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard' postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lt.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lt.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Lt'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lu@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lu' = PostTaxRegistrationsRequestBodyCountryOptions'Lu' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Lu'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lu'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lu'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Lu'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Lu' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Lu'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Lu' :: PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Lu'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'
mkPostTaxRegistrationsRequestBodyCountryOptions'Lu' postTaxRegistrationsRequestBodyCountryOptions'Lu'Type = PostTaxRegistrationsRequestBodyCountryOptions'Lu'{postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Lu'Type = postTaxRegistrationsRequestBodyCountryOptions'Lu'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lu.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard' postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lu.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lu.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Lu'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lv@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lv' = PostTaxRegistrationsRequestBodyCountryOptions'Lv' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Lv'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lv'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lv'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Lv'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Lv' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Lv'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Lv' :: PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Lv'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'
mkPostTaxRegistrationsRequestBodyCountryOptions'Lv' postTaxRegistrationsRequestBodyCountryOptions'Lv'Type = PostTaxRegistrationsRequestBodyCountryOptions'Lv'{postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Lv'Type = postTaxRegistrationsRequestBodyCountryOptions'Lv'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lv.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard' postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lv.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.lv.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Lv'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ma@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ma' = PostTaxRegistrationsRequestBodyCountryOptions'Ma' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ma'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ma'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ma'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ma')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ma'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ma' :: PostTaxRegistrationsRequestBodyCountryOptions'Ma'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ma' = PostTaxRegistrationsRequestBodyCountryOptions'Ma'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.md@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Md' = PostTaxRegistrationsRequestBodyCountryOptions'Md' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Md'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Md'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Md'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Md')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Md'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Md' :: PostTaxRegistrationsRequestBodyCountryOptions'Md'
mkPostTaxRegistrationsRequestBodyCountryOptions'Md' = PostTaxRegistrationsRequestBodyCountryOptions'Md'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.me@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Me' = PostTaxRegistrationsRequestBodyCountryOptions'Me' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Me'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Me'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Me'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Me'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Me'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Me'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Me' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Me'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Me' :: PostTaxRegistrationsRequestBodyCountryOptions'Me'
mkPostTaxRegistrationsRequestBodyCountryOptions'Me' = PostTaxRegistrationsRequestBodyCountryOptions'Me'{postTaxRegistrationsRequestBodyCountryOptions'Me'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.me.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Me'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Me'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.me.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Me'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mk@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mk' = PostTaxRegistrationsRequestBodyCountryOptions'Mk' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mk'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mk'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Mk'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Mk' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Mk'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Mk' :: PostTaxRegistrationsRequestBodyCountryOptions'Mk'
mkPostTaxRegistrationsRequestBodyCountryOptions'Mk' = PostTaxRegistrationsRequestBodyCountryOptions'Mk'{postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mk.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mk.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Mk'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mr' = PostTaxRegistrationsRequestBodyCountryOptions'Mr' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Mr'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Mr' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Mr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Mr' :: PostTaxRegistrationsRequestBodyCountryOptions'Mr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Mr' = PostTaxRegistrationsRequestBodyCountryOptions'Mr'{postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mr.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mr.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Mr'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mt@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mt' = PostTaxRegistrationsRequestBodyCountryOptions'Mt' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Mt'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Mt'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Mt'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Mt'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Mt' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Mt'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Mt' :: PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Mt'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'
mkPostTaxRegistrationsRequestBodyCountryOptions'Mt' postTaxRegistrationsRequestBodyCountryOptions'Mt'Type = PostTaxRegistrationsRequestBodyCountryOptions'Mt'{postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Mt'Type = postTaxRegistrationsRequestBodyCountryOptions'Mt'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mt.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard' postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mt.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mt.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Mt'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.mx@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Mx' = PostTaxRegistrationsRequestBodyCountryOptions'Mx' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Mx'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Mx'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Mx'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Mx')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Mx'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Mx' :: PostTaxRegistrationsRequestBodyCountryOptions'Mx'
mkPostTaxRegistrationsRequestBodyCountryOptions'Mx' = PostTaxRegistrationsRequestBodyCountryOptions'Mx'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.my@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'My' = PostTaxRegistrationsRequestBodyCountryOptions'My' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'My'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'My'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'My'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'My')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'My'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'My' :: PostTaxRegistrationsRequestBodyCountryOptions'My'
mkPostTaxRegistrationsRequestBodyCountryOptions'My' = PostTaxRegistrationsRequestBodyCountryOptions'My'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ng@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ng' = PostTaxRegistrationsRequestBodyCountryOptions'Ng' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ng'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ng'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ng'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ng')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ng'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ng' :: PostTaxRegistrationsRequestBodyCountryOptions'Ng'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ng' = PostTaxRegistrationsRequestBodyCountryOptions'Ng'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.nl@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Nl' = PostTaxRegistrationsRequestBodyCountryOptions'Nl' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Nl'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Nl'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Nl'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Nl'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Nl' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Nl'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Nl' :: PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Nl'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'
mkPostTaxRegistrationsRequestBodyCountryOptions'Nl' postTaxRegistrationsRequestBodyCountryOptions'Nl'Type = PostTaxRegistrationsRequestBodyCountryOptions'Nl'{postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Nl'Type = postTaxRegistrationsRequestBodyCountryOptions'Nl'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.nl.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard' postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.nl.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.nl.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Nl'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.no@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'No' = PostTaxRegistrationsRequestBodyCountryOptions'No' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'No'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'No'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'No'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'No'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'No'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'No'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'No'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'No' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'No'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'No' :: PostTaxRegistrationsRequestBodyCountryOptions'No'
mkPostTaxRegistrationsRequestBodyCountryOptions'No' = PostTaxRegistrationsRequestBodyCountryOptions'No'{postTaxRegistrationsRequestBodyCountryOptions'No'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.no.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'No'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'No'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'No'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'No'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'No'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'{postTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.no.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'No'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.np@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Np' = PostTaxRegistrationsRequestBodyCountryOptions'Np' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Np'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Np'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Np'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Np')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Np'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Np' :: PostTaxRegistrationsRequestBodyCountryOptions'Np'
mkPostTaxRegistrationsRequestBodyCountryOptions'Np' = PostTaxRegistrationsRequestBodyCountryOptions'Np'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.nz@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Nz' = PostTaxRegistrationsRequestBodyCountryOptions'Nz' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Nz'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Nz'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Nz'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Nz' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Nz'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Nz' :: PostTaxRegistrationsRequestBodyCountryOptions'Nz'
mkPostTaxRegistrationsRequestBodyCountryOptions'Nz' = PostTaxRegistrationsRequestBodyCountryOptions'Nz'{postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.nz.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.nz.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Nz'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.om@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Om' = PostTaxRegistrationsRequestBodyCountryOptions'Om' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Om'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Om'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Om'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Om'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Om'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Om'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Om' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Om'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Om' :: PostTaxRegistrationsRequestBodyCountryOptions'Om'
mkPostTaxRegistrationsRequestBodyCountryOptions'Om' = PostTaxRegistrationsRequestBodyCountryOptions'Om'{postTaxRegistrationsRequestBodyCountryOptions'Om'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.om.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Om'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Om'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.om.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Om'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pe@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pe' = PostTaxRegistrationsRequestBodyCountryOptions'Pe' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pe'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pe'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Pe'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Pe')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Pe'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Pe' :: PostTaxRegistrationsRequestBodyCountryOptions'Pe'
mkPostTaxRegistrationsRequestBodyCountryOptions'Pe' = PostTaxRegistrationsRequestBodyCountryOptions'Pe'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ph@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ph' = PostTaxRegistrationsRequestBodyCountryOptions'Ph' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ph'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ph'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ph'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ph')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ph'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ph' :: PostTaxRegistrationsRequestBodyCountryOptions'Ph'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ph' = PostTaxRegistrationsRequestBodyCountryOptions'Ph'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pl@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pl' = PostTaxRegistrationsRequestBodyCountryOptions'Pl' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Pl'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pl'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pl'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Pl'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Pl' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Pl'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Pl' :: PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Pl'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'
mkPostTaxRegistrationsRequestBodyCountryOptions'Pl' postTaxRegistrationsRequestBodyCountryOptions'Pl'Type = PostTaxRegistrationsRequestBodyCountryOptions'Pl'{postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Pl'Type = postTaxRegistrationsRequestBodyCountryOptions'Pl'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pl.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard' postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pl.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pl.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Pl'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pt@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pt' = PostTaxRegistrationsRequestBodyCountryOptions'Pt' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Pt'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pt'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pt'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Pt'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Pt' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Pt'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Pt' :: PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Pt'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'
mkPostTaxRegistrationsRequestBodyCountryOptions'Pt' postTaxRegistrationsRequestBodyCountryOptions'Pt'Type = PostTaxRegistrationsRequestBodyCountryOptions'Pt'{postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Pt'Type = postTaxRegistrationsRequestBodyCountryOptions'Pt'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pt.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard' postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pt.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.pt.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Pt'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ro@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ro' = PostTaxRegistrationsRequestBodyCountryOptions'Ro' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Ro'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ro'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ro'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ro'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ro' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ro'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ro' :: PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ro'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ro' postTaxRegistrationsRequestBodyCountryOptions'Ro'Type = PostTaxRegistrationsRequestBodyCountryOptions'Ro'{postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Ro'Type = postTaxRegistrationsRequestBodyCountryOptions'Ro'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ro.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard' postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ro.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ro.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Ro'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.rs@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Rs' = PostTaxRegistrationsRequestBodyCountryOptions'Rs' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Rs'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Rs'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Rs'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Rs' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Rs'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Rs' :: PostTaxRegistrationsRequestBodyCountryOptions'Rs'
mkPostTaxRegistrationsRequestBodyCountryOptions'Rs' = PostTaxRegistrationsRequestBodyCountryOptions'Rs'{postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.rs.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.rs.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Rs'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ru@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ru' = PostTaxRegistrationsRequestBodyCountryOptions'Ru' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ru'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ru'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ru'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ru')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ru'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ru' :: PostTaxRegistrationsRequestBodyCountryOptions'Ru'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ru' = PostTaxRegistrationsRequestBodyCountryOptions'Ru'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sa@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sa' = PostTaxRegistrationsRequestBodyCountryOptions'Sa' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sa'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sa'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sa'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sa')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sa'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sa' :: PostTaxRegistrationsRequestBodyCountryOptions'Sa'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sa' = PostTaxRegistrationsRequestBodyCountryOptions'Sa'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.se@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Se' = PostTaxRegistrationsRequestBodyCountryOptions'Se' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Se'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Se'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Se'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Se'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Se'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Se'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Se'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Se' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Se'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Se' :: PostTaxRegistrationsRequestBodyCountryOptions'Se'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Se'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Se'
mkPostTaxRegistrationsRequestBodyCountryOptions'Se' postTaxRegistrationsRequestBodyCountryOptions'Se'Type = PostTaxRegistrationsRequestBodyCountryOptions'Se'{postTaxRegistrationsRequestBodyCountryOptions'Se'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Se'Type = postTaxRegistrationsRequestBodyCountryOptions'Se'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.se.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Se'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Se'Standard' postTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.se.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.se.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Se'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Se'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sg@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sg' = PostTaxRegistrationsRequestBodyCountryOptions'Sg' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sg'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sg'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sg'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sg' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sg'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sg' :: PostTaxRegistrationsRequestBodyCountryOptions'Sg'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sg' = PostTaxRegistrationsRequestBodyCountryOptions'Sg'{postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sg.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sg.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Sg'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.si@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Si' = PostTaxRegistrationsRequestBodyCountryOptions'Si' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Si'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Si'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Si'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Si'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Si'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Si'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Si'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Si' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Si'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Si' :: PostTaxRegistrationsRequestBodyCountryOptions'Si'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Si'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Si'
mkPostTaxRegistrationsRequestBodyCountryOptions'Si' postTaxRegistrationsRequestBodyCountryOptions'Si'Type = PostTaxRegistrationsRequestBodyCountryOptions'Si'{postTaxRegistrationsRequestBodyCountryOptions'Si'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Si'Type = postTaxRegistrationsRequestBodyCountryOptions'Si'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.si.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Si'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Si'Standard' postTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.si.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.si.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Si'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Si'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sk@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sk' = PostTaxRegistrationsRequestBodyCountryOptions'Sk' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Sk'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Sk'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Sk'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sk'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sk' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sk'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sk' :: PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Sk'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sk' postTaxRegistrationsRequestBodyCountryOptions'Sk'Type = PostTaxRegistrationsRequestBodyCountryOptions'Sk'{postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard = GHC.Maybe.Nothing,
                                                                                                                                                              postTaxRegistrationsRequestBodyCountryOptions'Sk'Type = postTaxRegistrationsRequestBodyCountryOptions'Sk'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sk.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme :: PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["place_of_supply_scheme" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard' postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme = PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme = postTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sk.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumSmallSeller -- ^ Represents the JSON value @"small_seller"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumSmallSeller) = "small_seller";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "small_seller" -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumSmallSeller
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sk.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumIoss -- ^ Represents the JSON value @"ioss"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumOssNonUnion -- ^ Represents the JSON value @"oss_non_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumOssUnion -- ^ Represents the JSON value @"oss_union"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumIoss) = "ioss";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumOssNonUnion) = "oss_non_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumOssUnion) = "oss_union";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ioss" -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumIoss
                                             | val GHC.Classes.== "oss_non_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumOssNonUnion
                                             | val GHC.Classes.== "oss_union" -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumOssUnion
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Sk'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sn@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sn' = PostTaxRegistrationsRequestBodyCountryOptions'Sn' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sn'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sn'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sn'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sn')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sn'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sn' :: PostTaxRegistrationsRequestBodyCountryOptions'Sn'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sn' = PostTaxRegistrationsRequestBodyCountryOptions'Sn'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sr' = PostTaxRegistrationsRequestBodyCountryOptions'Sr' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sr'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sr' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sr' :: PostTaxRegistrationsRequestBodyCountryOptions'Sr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sr' = PostTaxRegistrationsRequestBodyCountryOptions'Sr'{postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sr.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.sr.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Sr'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.th@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Th' = PostTaxRegistrationsRequestBodyCountryOptions'Th' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Th'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Th'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Th'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Th')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Th'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Th' :: PostTaxRegistrationsRequestBodyCountryOptions'Th'
mkPostTaxRegistrationsRequestBodyCountryOptions'Th' = PostTaxRegistrationsRequestBodyCountryOptions'Th'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.tj@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Tj' = PostTaxRegistrationsRequestBodyCountryOptions'Tj' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Tj'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Tj'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Tj'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Tj')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Tj'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Tj' :: PostTaxRegistrationsRequestBodyCountryOptions'Tj'
mkPostTaxRegistrationsRequestBodyCountryOptions'Tj' = PostTaxRegistrationsRequestBodyCountryOptions'Tj'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.tr@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Tr' = PostTaxRegistrationsRequestBodyCountryOptions'Tr' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Tr'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Tr'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Tr'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Tr')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Tr'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Tr' :: PostTaxRegistrationsRequestBodyCountryOptions'Tr'
mkPostTaxRegistrationsRequestBodyCountryOptions'Tr' = PostTaxRegistrationsRequestBodyCountryOptions'Tr'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.tz@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Tz' = PostTaxRegistrationsRequestBodyCountryOptions'Tz' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Tz'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Tz'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Tz'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Tz')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Tz'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Tz' :: PostTaxRegistrationsRequestBodyCountryOptions'Tz'
mkPostTaxRegistrationsRequestBodyCountryOptions'Tz' = PostTaxRegistrationsRequestBodyCountryOptions'Tz'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ua@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ua' = PostTaxRegistrationsRequestBodyCountryOptions'Ua' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ua'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ua'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ua'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ua')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ua'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ua' :: PostTaxRegistrationsRequestBodyCountryOptions'Ua'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ua' = PostTaxRegistrationsRequestBodyCountryOptions'Ua'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.ug@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Ug' = PostTaxRegistrationsRequestBodyCountryOptions'Ug' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Ug'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Ug'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Ug'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Ug')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Ug'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Ug' :: PostTaxRegistrationsRequestBodyCountryOptions'Ug'
mkPostTaxRegistrationsRequestBodyCountryOptions'Ug' = PostTaxRegistrationsRequestBodyCountryOptions'Ug'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.us@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Us' = PostTaxRegistrationsRequestBodyCountryOptions'Us' {
  -- | local_amusement_tax
  postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax')
  -- | local_lease_tax
  , postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax')
  -- | state
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postTaxRegistrationsRequestBodyCountryOptions'Us'State :: Data.Text.Internal.Text
  -- | state_sales_tax
  , postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax')
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Us'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amusement_tax" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_lease_tax" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax obj) : ["state" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'State obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_sales_tax" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amusement_tax" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_lease_tax" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax obj) : ["state" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'State obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_sales_tax" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Us'" (\obj -> ((((GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Us' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local_amusement_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local_lease_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state_sales_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Us'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Us' :: Data.Text.Internal.Text -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Us'State'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Us'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Us'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Us'
mkPostTaxRegistrationsRequestBodyCountryOptions'Us' postTaxRegistrationsRequestBodyCountryOptions'Us'State postTaxRegistrationsRequestBodyCountryOptions'Us'Type = PostTaxRegistrationsRequestBodyCountryOptions'Us'{postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax = GHC.Maybe.Nothing,
                                                                                                                                                                                                                     postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax = GHC.Maybe.Nothing,
                                                                                                                                                                                                                     postTaxRegistrationsRequestBodyCountryOptions'Us'State = postTaxRegistrationsRequestBodyCountryOptions'Us'State,
                                                                                                                                                                                                                     postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax = GHC.Maybe.Nothing,
                                                                                                                                                                                                                     postTaxRegistrationsRequestBodyCountryOptions'Us'Type = postTaxRegistrationsRequestBodyCountryOptions'Us'Type}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.us.properties.local_amusement_tax@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax' = PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax' {
  -- | jurisdiction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'Jurisdiction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["jurisdiction" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'Jurisdiction obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["jurisdiction" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'Jurisdiction obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "jurisdiction"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax' :: Data.Text.Internal.Text -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'Jurisdiction'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax' postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'Jurisdiction = PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'{postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'Jurisdiction = postTaxRegistrationsRequestBodyCountryOptions'Us'LocalAmusementTax'Jurisdiction}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.us.properties.local_lease_tax@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax' = PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax' {
  -- | jurisdiction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'Jurisdiction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["jurisdiction" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'Jurisdiction obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["jurisdiction" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'Jurisdiction obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "jurisdiction"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax' :: Data.Text.Internal.Text -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'Jurisdiction'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax' postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'Jurisdiction = PostTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'{postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'Jurisdiction = postTaxRegistrationsRequestBodyCountryOptions'Us'LocalLeaseTax'Jurisdiction}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.us.properties.state_sales_tax@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax' = PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax' {
  -- | elections
  postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections :: [PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections']
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["elections" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["elections" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "elections"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax' :: [PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'] -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax' postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections = PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'{postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections = postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.us.properties.state_sales_tax.properties.elections.items@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections' = PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections' {
  -- | jurisdiction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Jurisdiction :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type
  , postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type :: PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jurisdiction" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Jurisdiction obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jurisdiction" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Jurisdiction obj) : ["type" Data.Aeson.Types.ToJSON..= postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'" (\obj -> (GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jurisdiction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections' :: PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type' -- ^ 'postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'
  -> PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'
mkPostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections' postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type = PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'{postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Jurisdiction = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                      postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type = postTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.us.properties.state_sales_tax.properties.elections.items.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumLocalUseTax -- ^ Represents the JSON value @"local_use_tax"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumSimplifiedSellersUseTax -- ^ Represents the JSON value @"simplified_sellers_use_tax"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumSingleLocalUseTax -- ^ Represents the JSON value @"single_local_use_tax"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumLocalUseTax) = "local_use_tax";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumSimplifiedSellersUseTax) = "simplified_sellers_use_tax";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumSingleLocalUseTax) = "single_local_use_tax"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "local_use_tax" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumLocalUseTax
                                             | val GHC.Classes.== "simplified_sellers_use_tax" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumSimplifiedSellersUseTax
                                             | val GHC.Classes.== "single_local_use_tax" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'EnumSingleLocalUseTax
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Us'StateSalesTax'Elections'Type'Other val)}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.us.properties.type@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Us'Type' =
   PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumLocalAmusementTax -- ^ Represents the JSON value @"local_amusement_tax"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumLocalLeaseTax -- ^ Represents the JSON value @"local_lease_tax"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateCommunicationsTax -- ^ Represents the JSON value @"state_communications_tax"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateRetailDeliveryFee -- ^ Represents the JSON value @"state_retail_delivery_fee"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateSalesTax -- ^ Represents the JSON value @"state_sales_tax"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumLocalAmusementTax) = "local_amusement_tax";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumLocalLeaseTax) = "local_lease_tax";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateCommunicationsTax) = "state_communications_tax";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateRetailDeliveryFee) = "state_retail_delivery_fee";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateSalesTax) = "state_sales_tax"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "local_amusement_tax" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumLocalAmusementTax
                                             | val GHC.Classes.== "local_lease_tax" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumLocalLeaseTax
                                             | val GHC.Classes.== "state_communications_tax" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateCommunicationsTax
                                             | val GHC.Classes.== "state_retail_delivery_fee" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateRetailDeliveryFee
                                             | val GHC.Classes.== "state_sales_tax" -> PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'EnumStateSalesTax
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Us'Type'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.uy@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Uy' = PostTaxRegistrationsRequestBodyCountryOptions'Uy' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Uy'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Uy'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Uy'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Uy' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Uy'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Uy' :: PostTaxRegistrationsRequestBodyCountryOptions'Uy'
mkPostTaxRegistrationsRequestBodyCountryOptions'Uy' = PostTaxRegistrationsRequestBodyCountryOptions'Uy'{postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.uy.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.uy.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Uy'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.uz@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Uz' = PostTaxRegistrationsRequestBodyCountryOptions'Uz' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Uz'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Uz'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Uz'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Uz')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Uz'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Uz' :: PostTaxRegistrationsRequestBodyCountryOptions'Uz'
mkPostTaxRegistrationsRequestBodyCountryOptions'Uz' = PostTaxRegistrationsRequestBodyCountryOptions'Uz'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.vn@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Vn' = PostTaxRegistrationsRequestBodyCountryOptions'Vn' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Vn'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Vn'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Vn'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Vn')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Vn'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Vn' :: PostTaxRegistrationsRequestBodyCountryOptions'Vn'
mkPostTaxRegistrationsRequestBodyCountryOptions'Vn' = PostTaxRegistrationsRequestBodyCountryOptions'Vn'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.za@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Za' = PostTaxRegistrationsRequestBodyCountryOptions'Za' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Za'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Za'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Za'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Za'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Za'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Za'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Za' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Za'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Za' :: PostTaxRegistrationsRequestBodyCountryOptions'Za'
mkPostTaxRegistrationsRequestBodyCountryOptions'Za' = PostTaxRegistrationsRequestBodyCountryOptions'Za'{postTaxRegistrationsRequestBodyCountryOptions'Za'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.za.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Za'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Za'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.za.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Za'Standard'PlaceOfSupplyScheme'Other val)}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.zm@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Zm' = PostTaxRegistrationsRequestBodyCountryOptions'Zm' {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Zm'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "simplified"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Zm'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Zm'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Zm')}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Zm'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Zm' :: PostTaxRegistrationsRequestBodyCountryOptions'Zm'
mkPostTaxRegistrationsRequestBodyCountryOptions'Zm' = PostTaxRegistrationsRequestBodyCountryOptions'Zm'{}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.zw@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Zw' = PostTaxRegistrationsRequestBodyCountryOptions'Zw' {
  -- | standard
  postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Zw'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "standard"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Zw'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Zw'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Zw' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Zw'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Zw' :: PostTaxRegistrationsRequestBodyCountryOptions'Zw'
mkPostTaxRegistrationsRequestBodyCountryOptions'Zw' = PostTaxRegistrationsRequestBodyCountryOptions'Zw'{postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.zw.properties.standard@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard' {
  -- | place_of_supply_scheme
  postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme :: (GHC.Maybe.Maybe PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("place_of_supply_scheme" Data.Aeson.Types.ToJSON..=)) (postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'" (\obj -> GHC.Base.pure PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "place_of_supply_scheme"))}
-- | Create a new 'PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'' with all required fields.
mkPostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard' :: PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'
mkPostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard' = PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'{postTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/tax\/registrations.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.country_options.properties.zw.properties.standard.properties.place_of_supply_scheme@ in the specification.
-- 
-- 
data PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme' =
   PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'EnumInboundGoods -- ^ Represents the JSON value @"inbound_goods"@
  | PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'EnumStandard -- ^ Represents the JSON value @"standard"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'
    where {toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'Other val) = val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'EnumInboundGoods) = "inbound_goods";
           toJSON (PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'EnumStandard) = "standard"}
instance Data.Aeson.Types.FromJSON.FromJSON PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "inbound_goods" -> PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'EnumInboundGoods
                                             | val GHC.Classes.== "standard" -> PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'EnumStandard
                                             | GHC.Base.otherwise -> PostTaxRegistrationsRequestBodyCountryOptions'Zw'Standard'PlaceOfSupplyScheme'Other val)}
-- | Represents a response of the operation 'postTaxRegistrations'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTaxRegistrationsResponseError' is used.
data PostTaxRegistrationsResponse =
   PostTaxRegistrationsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostTaxRegistrationsResponse200 Tax'registration -- ^ Successful response.
  | PostTaxRegistrationsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
