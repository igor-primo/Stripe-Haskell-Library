-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postTerminalReadersReaderConfirmPaymentIntent
module StripeAPI.Operations.PostTerminalReadersReaderConfirmPaymentIntent where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/terminal/readers/{reader}/confirm_payment_intent
-- 
-- \<p>Finalizes a payment on a Reader.\<\/p>
postTerminalReadersReaderConfirmPaymentIntent :: forall m . StripeAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ reader | Constraints: Maximum length of 5000
  -> PostTerminalReadersReaderConfirmPaymentIntentRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTerminalReadersReaderConfirmPaymentIntentResponse) -- ^ Monadic computation which returns the result of the operation
postTerminalReadersReaderConfirmPaymentIntent reader
                                              body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostTerminalReadersReaderConfirmPaymentIntentResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostTerminalReadersReaderConfirmPaymentIntentResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
erminal'reader)
                                                                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostTerminalReadersReaderConfirmPaymentIntentResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Error)
                                                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/v1/terminal/readers/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel reader)) GHC.Base.<> "/confirm_payment_intent")) GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/terminal\/readers\/{reader}\/confirm_payment_intent.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostTerminalReadersReaderConfirmPaymentIntentRequestBody = PostTerminalReadersReaderConfirmPaymentIntentRequestBody {
  -- | confirm_config: Configuration overrides.
  postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig :: (GHC.Maybe.Maybe PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig')
  -- | expand: Specifies which fields in the response should be expanded.
  , postTerminalReadersReaderConfirmPaymentIntentRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  -- | payment_intent: PaymentIntent ID.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postTerminalReadersReaderConfirmPaymentIntentRequestBodyPaymentIntent :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTerminalReadersReaderConfirmPaymentIntentRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirm_config" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderConfirmPaymentIntentRequestBodyExpand obj) : ["payment_intent" Data.Aeson.Types.ToJSON..= postTerminalReadersReaderConfirmPaymentIntentRequestBodyPaymentIntent obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirm_config" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderConfirmPaymentIntentRequestBodyExpand obj) : ["payment_intent" Data.Aeson.Types.ToJSON..= postTerminalReadersReaderConfirmPaymentIntentRequestBodyPaymentIntent obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTerminalReadersReaderConfirmPaymentIntentRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTerminalReadersReaderConfirmPaymentIntentRequestBody" (\obj -> ((GHC.Base.pure PostTerminalReadersReaderConfirmPaymentIntentRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "confirm_config")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_intent"))}
-- | Create a new 'PostTerminalReadersReaderConfirmPaymentIntentRequestBody' with all required fields.
mkPostTerminalReadersReaderConfirmPaymentIntentRequestBody :: Data.Text.Internal.Text -- ^ 'postTerminalReadersReaderConfirmPaymentIntentRequestBodyPaymentIntent'
  -> PostTerminalReadersReaderConfirmPaymentIntentRequestBody
mkPostTerminalReadersReaderConfirmPaymentIntentRequestBody postTerminalReadersReaderConfirmPaymentIntentRequestBodyPaymentIntent = PostTerminalReadersReaderConfirmPaymentIntentRequestBody{postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig = GHC.Maybe.Nothing,
                                                                                                                                                                                            postTerminalReadersReaderConfirmPaymentIntentRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                                                                            postTerminalReadersReaderConfirmPaymentIntentRequestBodyPaymentIntent = postTerminalReadersReaderConfirmPaymentIntentRequestBodyPaymentIntent}
-- | Defines the object schema located at @paths.\/v1\/terminal\/readers\/{reader}\/confirm_payment_intent.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.confirm_config@ in the specification.
-- 
-- Configuration overrides.
data PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig' = PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig' {
  -- | return_url
  postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'ReturnUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'ReturnUrl obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'ReturnUrl obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'" (\obj -> GHC.Base.pure PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "return_url"))}
-- | Create a new 'PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'' with all required fields.
mkPostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig' :: PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'
mkPostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig' = PostTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'{postTerminalReadersReaderConfirmPaymentIntentRequestBodyConfirmConfig'ReturnUrl = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postTerminalReadersReaderConfirmPaymentIntent'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTerminalReadersReaderConfirmPaymentIntentResponseError' is used.
data PostTerminalReadersReaderConfirmPaymentIntentResponse =
   PostTerminalReadersReaderConfirmPaymentIntentResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostTerminalReadersReaderConfirmPaymentIntentResponse200 Terminal'reader -- ^ Successful response.
  | PostTerminalReadersReaderConfirmPaymentIntentResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
