-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond
module StripeAPI.Operations.PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/test_helpers/issuing/authorizations/{authorization}/fraud_challenges/respond
-- 
-- \<p>Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.\<\/p>
postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond :: forall m . StripeAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ authorization | Constraints: Maximum length of 5000
  -> PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponse) -- ^ Monadic computation which returns the result of the operation
postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond authorization
                                                                        body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponse200 Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
ssuing'authorization)
                                                                                                                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponseDefault Data.Functor.<$> (Data.Aeson.Decoding.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Error)
                                                                                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/v1/test_helpers/issuing/authorizations/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel authorization)) GHC.Base.<> "/fraud_challenges/respond")) GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/test_helpers\/issuing\/authorizations\/{authorization}\/fraud_challenges\/respond.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody = PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody {
  -- | confirmed: Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false).
  postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyConfirmed :: GHC.Types.Bool
  -- | expand: Specifies which fields in the response should be expanded.
  , postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyExpand :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["confirmed" Data.Aeson.Types.ToJSON..= postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyConfirmed obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyExpand obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["confirmed" Data.Aeson.Types.ToJSON..= postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyConfirmed obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyExpand obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody" (\obj -> (GHC.Base.pure PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "confirmed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand"))}
-- | Create a new 'PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody' with all required fields.
mkPostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody :: GHC.Types.Bool -- ^ 'postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyConfirmed'
  -> PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody
mkPostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyConfirmed = PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBody{postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyConfirmed = postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyConfirmed,
                                                                                                                                                                                                                                                                      postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondRequestBodyExpand = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponseError' is used.
data PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponse =
   PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponse200 Issuing'authorization -- ^ Successful response.
  | PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
