-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AccountCapabilityRequirements
module StripeAPI.Types.AccountCapabilityRequirements where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsAlternative
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsError

-- | Defines the object schema located at @components.schemas.account_capability_requirements@ in the specification.
-- 
-- 
data AccountCapabilityRequirements = AccountCapabilityRequirements {
  -- | alternatives: Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  accountCapabilityRequirementsAlternatives :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountRequirementsAlternative]))
  -- | current_deadline: The date by which all required account information must be both submitted and verified. This includes fields listed in \`currently_due\` as well as those in \`pending_verification\`. If any required information is missing or unverified by this date, the account may be disabled. Note that \`current_deadline\` may change if additional \`currently_due\` requirements are requested.
  , accountCapabilityRequirementsCurrentDeadline :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  -- | currently_due: Fields that need to be collected to keep the capability enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the capability is disabled.
  , accountCapabilityRequirementsCurrentlyDue :: [Data.Text.Internal.Text]
  -- | disabled_reason: Description of why the capability is disabled. [Learn more about handling verification issues](https:\/\/stripe.com\/docs\/connect\/handling-api-verification).
  , accountCapabilityRequirementsDisabledReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountCapabilityRequirementsDisabledReason'NonNullable))
  -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
  , accountCapabilityRequirementsErrors :: [AccountRequirementsError]
  -- | eventually_due: Fields you must collect when all thresholds are reached. As they become required, they appear in \`currently_due\` as well, and \`current_deadline\` becomes set.
  , accountCapabilityRequirementsEventuallyDue :: [Data.Text.Internal.Text]
  -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the capability on the account.
  , accountCapabilityRequirementsPastDue :: [Data.Text.Internal.Text]
  -- | pending_verification: Fields that might become required depending on the results of verification or review. It\'s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`. Fields might appear in \`eventually_due\`, \`currently_due\`, or \`past_due\` and in \`pending_verification\` if verification fails but another verification is still pending.
  , accountCapabilityRequirementsPendingVerification :: [Data.Text.Internal.Text]
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilityRequirements
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alternatives" Data.Aeson.Types.ToJSON..=)) (accountCapabilityRequirementsAlternatives obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_deadline" Data.Aeson.Types.ToJSON..=)) (accountCapabilityRequirementsCurrentDeadline obj) : ["currently_due" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsCurrentlyDue obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("disabled_reason" Data.Aeson.Types.ToJSON..=)) (accountCapabilityRequirementsDisabledReason obj) : ["errors" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsErrors obj] : ["eventually_due" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsEventuallyDue obj] : ["past_due" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsPastDue obj] : ["pending_verification" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsPendingVerification obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alternatives" Data.Aeson.Types.ToJSON..=)) (accountCapabilityRequirementsAlternatives obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_deadline" Data.Aeson.Types.ToJSON..=)) (accountCapabilityRequirementsCurrentDeadline obj) : ["currently_due" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsCurrentlyDue obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("disabled_reason" Data.Aeson.Types.ToJSON..=)) (accountCapabilityRequirementsDisabledReason obj) : ["errors" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsErrors obj] : ["eventually_due" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsEventuallyDue obj] : ["past_due" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsPastDue obj] : ["pending_verification" Data.Aeson.Types.ToJSON..= accountCapabilityRequirementsPendingVerification obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilityRequirements
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountCapabilityRequirements" (\obj -> (((((((GHC.Base.pure AccountCapabilityRequirements GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alternatives")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "current_deadline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "disabled_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "eventually_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_verification"))}
-- | Create a new 'AccountCapabilityRequirements' with all required fields.
mkAccountCapabilityRequirements :: [Data.Text.Internal.Text] -- ^ 'accountCapabilityRequirementsCurrentlyDue'
  -> [AccountRequirementsError] -- ^ 'accountCapabilityRequirementsErrors'
  -> [Data.Text.Internal.Text] -- ^ 'accountCapabilityRequirementsEventuallyDue'
  -> [Data.Text.Internal.Text] -- ^ 'accountCapabilityRequirementsPastDue'
  -> [Data.Text.Internal.Text] -- ^ 'accountCapabilityRequirementsPendingVerification'
  -> AccountCapabilityRequirements
mkAccountCapabilityRequirements accountCapabilityRequirementsCurrentlyDue accountCapabilityRequirementsErrors accountCapabilityRequirementsEventuallyDue accountCapabilityRequirementsPastDue accountCapabilityRequirementsPendingVerification = AccountCapabilityRequirements{accountCapabilityRequirementsAlternatives = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                               accountCapabilityRequirementsCurrentDeadline = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                               accountCapabilityRequirementsCurrentlyDue = accountCapabilityRequirementsCurrentlyDue,
                                                                                                                                                                                                                                                                               accountCapabilityRequirementsDisabledReason = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                               accountCapabilityRequirementsErrors = accountCapabilityRequirementsErrors,
                                                                                                                                                                                                                                                                               accountCapabilityRequirementsEventuallyDue = accountCapabilityRequirementsEventuallyDue,
                                                                                                                                                                                                                                                                               accountCapabilityRequirementsPastDue = accountCapabilityRequirementsPastDue,
                                                                                                                                                                                                                                                                               accountCapabilityRequirementsPendingVerification = accountCapabilityRequirementsPendingVerification}
-- | Defines the enum schema located at @components.schemas.account_capability_requirements.properties.disabled_reason@ in the specification.
-- 
-- Description of why the capability is disabled. [Learn more about handling verification issues](https:\/\/stripe.com\/docs\/connect\/handling-api-verification).
data AccountCapabilityRequirementsDisabledReason'NonNullable =
   AccountCapabilityRequirementsDisabledReason'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AccountCapabilityRequirementsDisabledReason'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumOther -- ^ Represents the JSON value @"other"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumPaused'inactivity -- ^ Represents the JSON value @"paused.inactivity"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumPending'onboarding -- ^ Represents the JSON value @"pending.onboarding"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumPending'review -- ^ Represents the JSON value @"pending.review"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumPlatformDisabled -- ^ Represents the JSON value @"platform_disabled"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumPlatformPaused -- ^ Represents the JSON value @"platform_paused"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'inactivity -- ^ Represents the JSON value @"rejected.inactivity"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'other -- ^ Represents the JSON value @"rejected.other"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'unsupportedBusiness -- ^ Represents the JSON value @"rejected.unsupported_business"@
  | AccountCapabilityRequirementsDisabledReason'NonNullableEnumRequirements'fieldsNeeded -- ^ Represents the JSON value @"requirements.fields_needed"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilityRequirementsDisabledReason'NonNullable
    where {toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableOther val) = val;
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumOther) = "other";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumPaused'inactivity) = "paused.inactivity";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumPending'onboarding) = "pending.onboarding";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumPending'review) = "pending.review";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumPlatformDisabled) = "platform_disabled";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumPlatformPaused) = "platform_paused";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'inactivity) = "rejected.inactivity";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'other) = "rejected.other";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'unsupportedBusiness) = "rejected.unsupported_business";
           toJSON (AccountCapabilityRequirementsDisabledReason'NonNullableEnumRequirements'fieldsNeeded) = "requirements.fields_needed"}
instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilityRequirementsDisabledReason'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "other" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumOther
                                             | val GHC.Classes.== "paused.inactivity" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumPaused'inactivity
                                             | val GHC.Classes.== "pending.onboarding" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumPending'onboarding
                                             | val GHC.Classes.== "pending.review" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumPending'review
                                             | val GHC.Classes.== "platform_disabled" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumPlatformDisabled
                                             | val GHC.Classes.== "platform_paused" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumPlatformPaused
                                             | val GHC.Classes.== "rejected.inactivity" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'inactivity
                                             | val GHC.Classes.== "rejected.other" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'other
                                             | val GHC.Classes.== "rejected.unsupported_business" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumRejected'unsupportedBusiness
                                             | val GHC.Classes.== "requirements.fields_needed" -> AccountCapabilityRequirementsDisabledReason'NonNullableEnumRequirements'fieldsNeeded
                                             | GHC.Base.otherwise -> AccountCapabilityRequirementsDisabledReason'NonNullableOther val)}
