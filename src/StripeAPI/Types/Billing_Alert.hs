-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Billing_Alert
module StripeAPI.Types.Billing_Alert where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Billing_Meter
import {-# SOURCE #-} StripeAPI.Types.ThresholdsResourceUsageAlertFilter
import {-# SOURCE #-} StripeAPI.Types.ThresholdsResourceUsageThresholdConfig

-- | Defines the object schema located at @components.schemas.billing.alert@ in the specification.
-- 
-- A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.
data Billing'alert = Billing'alert {
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  billing'alertId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , billing'alertLivemode :: GHC.Types.Bool
  -- | status: Status of the alert. This can be active, inactive or archived.
  , billing'alertStatus :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Billing'alertStatus'NonNullable))
  -- | title: Title of the alert.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , billing'alertTitle :: Data.Text.Internal.Text
  -- | usage_threshold: Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https:\/\/stripe.com\/docs\/api\/billing\/meter).
  , billing'alertUsageThreshold :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Billing'alertUsageThreshold'NonNullable))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'alert
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= billing'alertId obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'alertLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (billing'alertStatus obj) : ["title" Data.Aeson.Types.ToJSON..= billing'alertTitle obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_threshold" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold obj) : ["alert_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "usage_threshold"] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.alert"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= billing'alertId obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'alertLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (billing'alertStatus obj) : ["title" Data.Aeson.Types.ToJSON..= billing'alertTitle obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_threshold" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold obj) : ["alert_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "usage_threshold"] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.alert"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'alert
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'alert" (\obj -> ((((GHC.Base.pure Billing'alert GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "usage_threshold"))}
-- | Create a new 'Billing'alert' with all required fields.
mkBilling'alert :: Data.Text.Internal.Text -- ^ 'billing'alertId'
  -> GHC.Types.Bool -- ^ 'billing'alertLivemode'
  -> Data.Text.Internal.Text -- ^ 'billing'alertTitle'
  -> Billing'alert
mkBilling'alert billing'alertId billing'alertLivemode billing'alertTitle = Billing'alert{billing'alertId = billing'alertId,
                                                                                         billing'alertLivemode = billing'alertLivemode,
                                                                                         billing'alertStatus = GHC.Maybe.Nothing,
                                                                                         billing'alertTitle = billing'alertTitle,
                                                                                         billing'alertUsageThreshold = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.billing.alert.properties.status@ in the specification.
-- 
-- Status of the alert. This can be active, inactive or archived.
data Billing'alertStatus'NonNullable =
   Billing'alertStatus'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Billing'alertStatus'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Billing'alertStatus'NonNullableEnumActive -- ^ Represents the JSON value @"active"@
  | Billing'alertStatus'NonNullableEnumArchived -- ^ Represents the JSON value @"archived"@
  | Billing'alertStatus'NonNullableEnumInactive -- ^ Represents the JSON value @"inactive"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'alertStatus'NonNullable
    where {toJSON (Billing'alertStatus'NonNullableOther val) = val;
           toJSON (Billing'alertStatus'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (Billing'alertStatus'NonNullableEnumActive) = "active";
           toJSON (Billing'alertStatus'NonNullableEnumArchived) = "archived";
           toJSON (Billing'alertStatus'NonNullableEnumInactive) = "inactive"}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'alertStatus'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "active" -> Billing'alertStatus'NonNullableEnumActive
                                             | val GHC.Classes.== "archived" -> Billing'alertStatus'NonNullableEnumArchived
                                             | val GHC.Classes.== "inactive" -> Billing'alertStatus'NonNullableEnumInactive
                                             | GHC.Base.otherwise -> Billing'alertStatus'NonNullableOther val)}
-- | Defines the object schema located at @components.schemas.billing.alert.properties.usage_threshold.anyOf@ in the specification.
-- 
-- Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https:\\\/\\\/stripe.com\\\/docs\\\/api\\\/billing\\\/meter).
data Billing'alertUsageThreshold'NonNullable = Billing'alertUsageThreshold'NonNullable {
  -- | filters: The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time.
  billing'alertUsageThreshold'NonNullableFilters :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [ThresholdsResourceUsageAlertFilter]))
  -- | gte: The value at which this alert will trigger.
  , billing'alertUsageThreshold'NonNullableGte :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | meter: The [Billing Meter](\/api\/billing\/meter) ID whose usage is monitored.
  , billing'alertUsageThreshold'NonNullableMeter :: (GHC.Maybe.Maybe Billing'alertUsageThreshold'NonNullableMeter'Variants)
  -- | recurrence: Defines how the alert will behave.
  , billing'alertUsageThreshold'NonNullableRecurrence :: (GHC.Maybe.Maybe Billing'alertUsageThreshold'NonNullableRecurrence')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'alertUsageThreshold'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableFilters obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableGte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meter" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableMeter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurrence" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableRecurrence obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableFilters obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableGte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meter" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableMeter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurrence" Data.Aeson.Types.ToJSON..=)) (billing'alertUsageThreshold'NonNullableRecurrence obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'alertUsageThreshold'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'alertUsageThreshold'NonNullable" (\obj -> (((GHC.Base.pure Billing'alertUsageThreshold'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "meter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "recurrence"))}
-- | Create a new 'Billing'alertUsageThreshold'NonNullable' with all required fields.
mkBilling'alertUsageThreshold'NonNullable :: Billing'alertUsageThreshold'NonNullable
mkBilling'alertUsageThreshold'NonNullable = Billing'alertUsageThreshold'NonNullable{billing'alertUsageThreshold'NonNullableFilters = GHC.Maybe.Nothing,
                                                                                    billing'alertUsageThreshold'NonNullableGte = GHC.Maybe.Nothing,
                                                                                    billing'alertUsageThreshold'NonNullableMeter = GHC.Maybe.Nothing,
                                                                                    billing'alertUsageThreshold'NonNullableRecurrence = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.billing.alert.properties.usage_threshold.anyOf.properties.meter.anyOf@ in the specification.
-- 
-- The [Billing Meter](\/api\/billing\/meter) ID whose usage is monitored.
data Billing'alertUsageThreshold'NonNullableMeter'Variants =
   Billing'alertUsageThreshold'NonNullableMeter'Text Data.Text.Internal.Text
  | Billing'alertUsageThreshold'NonNullableMeter'Billing'meter Billing'meter
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'alertUsageThreshold'NonNullableMeter'Variants
    where {toJSON (Billing'alertUsageThreshold'NonNullableMeter'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (Billing'alertUsageThreshold'NonNullableMeter'Billing'meter a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'alertUsageThreshold'NonNullableMeter'Variants
    where {parseJSON val = case (Billing'alertUsageThreshold'NonNullableMeter'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Billing'alertUsageThreshold'NonNullableMeter'Billing'meter Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the enum schema located at @components.schemas.billing.alert.properties.usage_threshold.anyOf.properties.recurrence@ in the specification.
-- 
-- Defines how the alert will behave.
data Billing'alertUsageThreshold'NonNullableRecurrence' =
   Billing'alertUsageThreshold'NonNullableRecurrence'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Billing'alertUsageThreshold'NonNullableRecurrence'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Billing'alertUsageThreshold'NonNullableRecurrence'EnumOneTime -- ^ Represents the JSON value @"one_time"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'alertUsageThreshold'NonNullableRecurrence'
    where {toJSON (Billing'alertUsageThreshold'NonNullableRecurrence'Other val) = val;
           toJSON (Billing'alertUsageThreshold'NonNullableRecurrence'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (Billing'alertUsageThreshold'NonNullableRecurrence'EnumOneTime) = "one_time"}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'alertUsageThreshold'NonNullableRecurrence'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "one_time" -> Billing'alertUsageThreshold'NonNullableRecurrence'EnumOneTime
                                             | GHC.Base.otherwise -> Billing'alertUsageThreshold'NonNullableRecurrence'Other val)}
