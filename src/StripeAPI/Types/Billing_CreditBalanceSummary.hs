-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Billing_CreditBalanceSummary
module StripeAPI.Types.Billing_CreditBalanceSummary where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CreditBalance
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer

-- | Defines the object schema located at @components.schemas.billing.credit_balance_summary@ in the specification.
-- 
-- Indicates the billing credit balance for billing credits granted to a customer.
data Billing'creditBalanceSummary = Billing'creditBalanceSummary {
  -- | balances: The billing credit balances. One entry per credit grant currency. If a customer only has credit grants in a single currency, then this will have a single balance entry.
  billing'creditBalanceSummaryBalances :: [CreditBalance]
  -- | customer: The customer the balance is for.
  , billing'creditBalanceSummaryCustomer :: Billing'creditBalanceSummaryCustomer'Variants
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , billing'creditBalanceSummaryLivemode :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'creditBalanceSummary
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["balances" Data.Aeson.Types.ToJSON..= billing'creditBalanceSummaryBalances obj] : ["customer" Data.Aeson.Types.ToJSON..= billing'creditBalanceSummaryCustomer obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'creditBalanceSummaryLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.credit_balance_summary"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["balances" Data.Aeson.Types.ToJSON..= billing'creditBalanceSummaryBalances obj] : ["customer" Data.Aeson.Types.ToJSON..= billing'creditBalanceSummaryCustomer obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'creditBalanceSummaryLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.credit_balance_summary"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'creditBalanceSummary
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'creditBalanceSummary" (\obj -> ((GHC.Base.pure Billing'creditBalanceSummary GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balances")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode"))}
-- | Create a new 'Billing'creditBalanceSummary' with all required fields.
mkBilling'creditBalanceSummary :: [CreditBalance] -- ^ 'billing'creditBalanceSummaryBalances'
  -> Billing'creditBalanceSummaryCustomer'Variants -- ^ 'billing'creditBalanceSummaryCustomer'
  -> GHC.Types.Bool -- ^ 'billing'creditBalanceSummaryLivemode'
  -> Billing'creditBalanceSummary
mkBilling'creditBalanceSummary billing'creditBalanceSummaryBalances billing'creditBalanceSummaryCustomer billing'creditBalanceSummaryLivemode = Billing'creditBalanceSummary{billing'creditBalanceSummaryBalances = billing'creditBalanceSummaryBalances,
                                                                                                                                                                             billing'creditBalanceSummaryCustomer = billing'creditBalanceSummaryCustomer,
                                                                                                                                                                             billing'creditBalanceSummaryLivemode = billing'creditBalanceSummaryLivemode}
-- | Defines the oneOf schema located at @components.schemas.billing.credit_balance_summary.properties.customer.anyOf@ in the specification.
-- 
-- The customer the balance is for.
data Billing'creditBalanceSummaryCustomer'Variants =
   Billing'creditBalanceSummaryCustomer'Text Data.Text.Internal.Text
  | Billing'creditBalanceSummaryCustomer'Customer Customer
  | Billing'creditBalanceSummaryCustomer'DeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'creditBalanceSummaryCustomer'Variants
    where {toJSON (Billing'creditBalanceSummaryCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (Billing'creditBalanceSummaryCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (Billing'creditBalanceSummaryCustomer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'creditBalanceSummaryCustomer'Variants
    where {parseJSON val = case (Billing'creditBalanceSummaryCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Billing'creditBalanceSummaryCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Billing'creditBalanceSummaryCustomer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
