-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Billing_Meter
module StripeAPI.Types.Billing_Meter where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BillingMeterResourceAggregationSettings
import {-# SOURCE #-} StripeAPI.Types.BillingMeterResourceBillingMeterStatusTransitions
import {-# SOURCE #-} StripeAPI.Types.BillingMeterResourceBillingMeterValue
import {-# SOURCE #-} StripeAPI.Types.BillingMeterResourceCustomerMappingSettings

-- | Defines the object schema located at @components.schemas.billing.meter@ in the specification.
-- 
-- Meters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.
-- 
-- Related guide: [Usage based billing](https:\/\/docs.stripe.com\/billing\/subscriptions\/usage-based)
data Billing'meter = Billing'meter {
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  billing'meterCreated :: GHC.Types.Int
  -- | customer_mapping: 
  , billing'meterCustomerMapping :: BillingMeterResourceCustomerMappingSettings
  -- | default_aggregation: 
  , billing'meterDefaultAggregation :: BillingMeterResourceAggregationSettings
  -- | display_name: The meter\'s name.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , billing'meterDisplayName :: Data.Text.Internal.Text
  -- | event_name: The name of the meter event to record usage for. Corresponds with the \`event_name\` field on meter events.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , billing'meterEventName :: Data.Text.Internal.Text
  -- | event_time_window: The time window to pre-aggregate meter events for, if any.
  , billing'meterEventTimeWindow :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Billing'meterEventTimeWindow'NonNullable))
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , billing'meterId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , billing'meterLivemode :: GHC.Types.Bool
  -- | status: The meter\'s status.
  , billing'meterStatus :: Billing'meterStatus'
  -- | status_transitions: 
  , billing'meterStatusTransitions :: BillingMeterResourceBillingMeterStatusTransitions
  -- | updated: Time at which the object was last updated. Measured in seconds since the Unix epoch.
  , billing'meterUpdated :: GHC.Types.Int
  -- | value_settings: 
  , billing'meterValueSettings :: BillingMeterResourceBillingMeterValue
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meter
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= billing'meterCreated obj] : ["customer_mapping" Data.Aeson.Types.ToJSON..= billing'meterCustomerMapping obj] : ["default_aggregation" Data.Aeson.Types.ToJSON..= billing'meterDefaultAggregation obj] : ["display_name" Data.Aeson.Types.ToJSON..= billing'meterDisplayName obj] : ["event_name" Data.Aeson.Types.ToJSON..= billing'meterEventName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event_time_window" Data.Aeson.Types.ToJSON..=)) (billing'meterEventTimeWindow obj) : ["id" Data.Aeson.Types.ToJSON..= billing'meterId obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterLivemode obj] : ["status" Data.Aeson.Types.ToJSON..= billing'meterStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= billing'meterStatusTransitions obj] : ["updated" Data.Aeson.Types.ToJSON..= billing'meterUpdated obj] : ["value_settings" Data.Aeson.Types.ToJSON..= billing'meterValueSettings obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= billing'meterCreated obj] : ["customer_mapping" Data.Aeson.Types.ToJSON..= billing'meterCustomerMapping obj] : ["default_aggregation" Data.Aeson.Types.ToJSON..= billing'meterDefaultAggregation obj] : ["display_name" Data.Aeson.Types.ToJSON..= billing'meterDisplayName obj] : ["event_name" Data.Aeson.Types.ToJSON..= billing'meterEventName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event_time_window" Data.Aeson.Types.ToJSON..=)) (billing'meterEventTimeWindow obj) : ["id" Data.Aeson.Types.ToJSON..= billing'meterId obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterLivemode obj] : ["status" Data.Aeson.Types.ToJSON..= billing'meterStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= billing'meterStatusTransitions obj] : ["updated" Data.Aeson.Types.ToJSON..= billing'meterUpdated obj] : ["value_settings" Data.Aeson.Types.ToJSON..= billing'meterValueSettings obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meter
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'meter" (\obj -> (((((((((((GHC.Base.pure Billing'meter GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer_mapping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "default_aggregation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "event_time_window")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value_settings"))}
-- | Create a new 'Billing'meter' with all required fields.
mkBilling'meter :: GHC.Types.Int -- ^ 'billing'meterCreated'
  -> BillingMeterResourceCustomerMappingSettings -- ^ 'billing'meterCustomerMapping'
  -> BillingMeterResourceAggregationSettings -- ^ 'billing'meterDefaultAggregation'
  -> Data.Text.Internal.Text -- ^ 'billing'meterDisplayName'
  -> Data.Text.Internal.Text -- ^ 'billing'meterEventName'
  -> Data.Text.Internal.Text -- ^ 'billing'meterId'
  -> GHC.Types.Bool -- ^ 'billing'meterLivemode'
  -> Billing'meterStatus' -- ^ 'billing'meterStatus'
  -> BillingMeterResourceBillingMeterStatusTransitions -- ^ 'billing'meterStatusTransitions'
  -> GHC.Types.Int -- ^ 'billing'meterUpdated'
  -> BillingMeterResourceBillingMeterValue -- ^ 'billing'meterValueSettings'
  -> Billing'meter
mkBilling'meter billing'meterCreated billing'meterCustomerMapping billing'meterDefaultAggregation billing'meterDisplayName billing'meterEventName billing'meterId billing'meterLivemode billing'meterStatus billing'meterStatusTransitions billing'meterUpdated billing'meterValueSettings = Billing'meter{billing'meterCreated = billing'meterCreated,
                                                                                                                                                                                                                                                                                                           billing'meterCustomerMapping = billing'meterCustomerMapping,
                                                                                                                                                                                                                                                                                                           billing'meterDefaultAggregation = billing'meterDefaultAggregation,
                                                                                                                                                                                                                                                                                                           billing'meterDisplayName = billing'meterDisplayName,
                                                                                                                                                                                                                                                                                                           billing'meterEventName = billing'meterEventName,
                                                                                                                                                                                                                                                                                                           billing'meterEventTimeWindow = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                           billing'meterId = billing'meterId,
                                                                                                                                                                                                                                                                                                           billing'meterLivemode = billing'meterLivemode,
                                                                                                                                                                                                                                                                                                           billing'meterStatus = billing'meterStatus,
                                                                                                                                                                                                                                                                                                           billing'meterStatusTransitions = billing'meterStatusTransitions,
                                                                                                                                                                                                                                                                                                           billing'meterUpdated = billing'meterUpdated,
                                                                                                                                                                                                                                                                                                           billing'meterValueSettings = billing'meterValueSettings}
-- | Defines the enum schema located at @components.schemas.billing.meter.properties.event_time_window@ in the specification.
-- 
-- The time window to pre-aggregate meter events for, if any.
data Billing'meterEventTimeWindow'NonNullable =
   Billing'meterEventTimeWindow'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Billing'meterEventTimeWindow'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Billing'meterEventTimeWindow'NonNullableEnumDay -- ^ Represents the JSON value @"day"@
  | Billing'meterEventTimeWindow'NonNullableEnumHour -- ^ Represents the JSON value @"hour"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meterEventTimeWindow'NonNullable
    where {toJSON (Billing'meterEventTimeWindow'NonNullableOther val) = val;
           toJSON (Billing'meterEventTimeWindow'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (Billing'meterEventTimeWindow'NonNullableEnumDay) = "day";
           toJSON (Billing'meterEventTimeWindow'NonNullableEnumHour) = "hour"}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meterEventTimeWindow'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "day" -> Billing'meterEventTimeWindow'NonNullableEnumDay
                                             | val GHC.Classes.== "hour" -> Billing'meterEventTimeWindow'NonNullableEnumHour
                                             | GHC.Base.otherwise -> Billing'meterEventTimeWindow'NonNullableOther val)}
-- | Defines the enum schema located at @components.schemas.billing.meter.properties.status@ in the specification.
-- 
-- The meter\'s status.
data Billing'meterStatus' =
   Billing'meterStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Billing'meterStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Billing'meterStatus'EnumActive -- ^ Represents the JSON value @"active"@
  | Billing'meterStatus'EnumInactive -- ^ Represents the JSON value @"inactive"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meterStatus'
    where {toJSON (Billing'meterStatus'Other val) = val;
           toJSON (Billing'meterStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (Billing'meterStatus'EnumActive) = "active";
           toJSON (Billing'meterStatus'EnumInactive) = "inactive"}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meterStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "active" -> Billing'meterStatus'EnumActive
                                             | val GHC.Classes.== "inactive" -> Billing'meterStatus'EnumInactive
                                             | GHC.Base.otherwise -> Billing'meterStatus'Other val)}
