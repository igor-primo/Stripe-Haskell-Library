-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Billing_MeterEvent
module StripeAPI.Types.Billing_MeterEvent where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.billing.meter_event@ in the specification.
-- 
-- Meter events represent actions that customers take in your system. You can use meter events to bill a customer based on their usage. Meter events are associated with billing meters, which define both the contents of the eventâ€™s payload and how to aggregate those events.
data Billing'meterEvent = Billing'meterEvent {
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  billing'meterEventCreated :: GHC.Types.Int
  -- | event_name: The name of the meter event. Corresponds with the \`event_name\` field on a meter.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  , billing'meterEventEventName :: Data.Text.Internal.Text
  -- | identifier: A unique identifier for the event.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , billing'meterEventIdentifier :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , billing'meterEventLivemode :: GHC.Types.Bool
  -- | payload: The payload of the event. This contains the fields corresponding to a meter\'s \`customer_mapping.event_payload_key\` (default is \`stripe_customer_id\`) and \`value_settings.event_payload_key\` (default is \`value\`). Read more about the [payload](https:\/\/stripe.com\/docs\/billing\/subscriptions\/usage-based\/recording-usage\#payload-key-overrides).
  , billing'meterEventPayload :: Data.Aeson.Types.Internal.Object
  -- | timestamp: The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.
  , billing'meterEventTimestamp :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meterEvent
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= billing'meterEventCreated obj] : ["event_name" Data.Aeson.Types.ToJSON..= billing'meterEventEventName obj] : ["identifier" Data.Aeson.Types.ToJSON..= billing'meterEventIdentifier obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterEventLivemode obj] : ["payload" Data.Aeson.Types.ToJSON..= billing'meterEventPayload obj] : ["timestamp" Data.Aeson.Types.ToJSON..= billing'meterEventTimestamp obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter_event"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= billing'meterEventCreated obj] : ["event_name" Data.Aeson.Types.ToJSON..= billing'meterEventEventName obj] : ["identifier" Data.Aeson.Types.ToJSON..= billing'meterEventIdentifier obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterEventLivemode obj] : ["payload" Data.Aeson.Types.ToJSON..= billing'meterEventPayload obj] : ["timestamp" Data.Aeson.Types.ToJSON..= billing'meterEventTimestamp obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter_event"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meterEvent
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'meterEvent" (\obj -> (((((GHC.Base.pure Billing'meterEvent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "identifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payload")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp"))}
-- | Create a new 'Billing'meterEvent' with all required fields.
mkBilling'meterEvent :: GHC.Types.Int -- ^ 'billing'meterEventCreated'
  -> Data.Text.Internal.Text -- ^ 'billing'meterEventEventName'
  -> Data.Text.Internal.Text -- ^ 'billing'meterEventIdentifier'
  -> GHC.Types.Bool -- ^ 'billing'meterEventLivemode'
  -> Data.Aeson.Types.Internal.Object -- ^ 'billing'meterEventPayload'
  -> GHC.Types.Int -- ^ 'billing'meterEventTimestamp'
  -> Billing'meterEvent
mkBilling'meterEvent billing'meterEventCreated billing'meterEventEventName billing'meterEventIdentifier billing'meterEventLivemode billing'meterEventPayload billing'meterEventTimestamp = Billing'meterEvent{billing'meterEventCreated = billing'meterEventCreated,
                                                                                                                                                                                                              billing'meterEventEventName = billing'meterEventEventName,
                                                                                                                                                                                                              billing'meterEventIdentifier = billing'meterEventIdentifier,
                                                                                                                                                                                                              billing'meterEventLivemode = billing'meterEventLivemode,
                                                                                                                                                                                                              billing'meterEventPayload = billing'meterEventPayload,
                                                                                                                                                                                                              billing'meterEventTimestamp = billing'meterEventTimestamp}
