-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Billing_MeterEventAdjustment
module StripeAPI.Types.Billing_MeterEventAdjustment where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BillingMeterResourceBillingMeterEventAdjustmentCancel

-- | Defines the object schema located at @components.schemas.billing.meter_event_adjustment@ in the specification.
-- 
-- A billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.
data Billing'meterEventAdjustment = Billing'meterEventAdjustment {
  -- | cancel: Specifies which event to cancel.
  billing'meterEventAdjustmentCancel :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Billing'meterEventAdjustmentCancel'NonNullable))
  -- | event_name: The name of the meter event. Corresponds with the \`event_name\` field on a meter.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  , billing'meterEventAdjustmentEventName :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , billing'meterEventAdjustmentLivemode :: GHC.Types.Bool
  -- | status: The meter event adjustment\'s status.
  , billing'meterEventAdjustmentStatus :: Billing'meterEventAdjustmentStatus'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meterEventAdjustment
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancel" Data.Aeson.Types.ToJSON..=)) (billing'meterEventAdjustmentCancel obj) : ["event_name" Data.Aeson.Types.ToJSON..= billing'meterEventAdjustmentEventName obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterEventAdjustmentLivemode obj] : ["status" Data.Aeson.Types.ToJSON..= billing'meterEventAdjustmentStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter_event_adjustment"] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "cancel"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancel" Data.Aeson.Types.ToJSON..=)) (billing'meterEventAdjustmentCancel obj) : ["event_name" Data.Aeson.Types.ToJSON..= billing'meterEventAdjustmentEventName obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterEventAdjustmentLivemode obj] : ["status" Data.Aeson.Types.ToJSON..= billing'meterEventAdjustmentStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter_event_adjustment"] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "cancel"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meterEventAdjustment
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'meterEventAdjustment" (\obj -> (((GHC.Base.pure Billing'meterEventAdjustment GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cancel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))}
-- | Create a new 'Billing'meterEventAdjustment' with all required fields.
mkBilling'meterEventAdjustment :: Data.Text.Internal.Text -- ^ 'billing'meterEventAdjustmentEventName'
  -> GHC.Types.Bool -- ^ 'billing'meterEventAdjustmentLivemode'
  -> Billing'meterEventAdjustmentStatus' -- ^ 'billing'meterEventAdjustmentStatus'
  -> Billing'meterEventAdjustment
mkBilling'meterEventAdjustment billing'meterEventAdjustmentEventName billing'meterEventAdjustmentLivemode billing'meterEventAdjustmentStatus = Billing'meterEventAdjustment{billing'meterEventAdjustmentCancel = GHC.Maybe.Nothing,
                                                                                                                                                                            billing'meterEventAdjustmentEventName = billing'meterEventAdjustmentEventName,
                                                                                                                                                                            billing'meterEventAdjustmentLivemode = billing'meterEventAdjustmentLivemode,
                                                                                                                                                                            billing'meterEventAdjustmentStatus = billing'meterEventAdjustmentStatus}
-- | Defines the object schema located at @components.schemas.billing.meter_event_adjustment.properties.cancel.anyOf@ in the specification.
-- 
-- Specifies which event to cancel.
data Billing'meterEventAdjustmentCancel'NonNullable = Billing'meterEventAdjustmentCancel'NonNullable {
  -- | identifier: Unique identifier for the event.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  billing'meterEventAdjustmentCancel'NonNullableIdentifier :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meterEventAdjustmentCancel'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("identifier" Data.Aeson.Types.ToJSON..=)) (billing'meterEventAdjustmentCancel'NonNullableIdentifier obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("identifier" Data.Aeson.Types.ToJSON..=)) (billing'meterEventAdjustmentCancel'NonNullableIdentifier obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meterEventAdjustmentCancel'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'meterEventAdjustmentCancel'NonNullable" (\obj -> GHC.Base.pure Billing'meterEventAdjustmentCancel'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "identifier"))}
-- | Create a new 'Billing'meterEventAdjustmentCancel'NonNullable' with all required fields.
mkBilling'meterEventAdjustmentCancel'NonNullable :: Billing'meterEventAdjustmentCancel'NonNullable
mkBilling'meterEventAdjustmentCancel'NonNullable = Billing'meterEventAdjustmentCancel'NonNullable{billing'meterEventAdjustmentCancel'NonNullableIdentifier = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.billing.meter_event_adjustment.properties.status@ in the specification.
-- 
-- The meter event adjustment\'s status.
data Billing'meterEventAdjustmentStatus' =
   Billing'meterEventAdjustmentStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Billing'meterEventAdjustmentStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Billing'meterEventAdjustmentStatus'EnumComplete -- ^ Represents the JSON value @"complete"@
  | Billing'meterEventAdjustmentStatus'EnumPending -- ^ Represents the JSON value @"pending"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meterEventAdjustmentStatus'
    where {toJSON (Billing'meterEventAdjustmentStatus'Other val) = val;
           toJSON (Billing'meterEventAdjustmentStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (Billing'meterEventAdjustmentStatus'EnumComplete) = "complete";
           toJSON (Billing'meterEventAdjustmentStatus'EnumPending) = "pending"}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meterEventAdjustmentStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "complete" -> Billing'meterEventAdjustmentStatus'EnumComplete
                                             | val GHC.Classes.== "pending" -> Billing'meterEventAdjustmentStatus'EnumPending
                                             | GHC.Base.otherwise -> Billing'meterEventAdjustmentStatus'Other val)}
