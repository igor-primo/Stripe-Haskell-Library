-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Billing_MeterEventSummary
module StripeAPI.Types.Billing_MeterEventSummary where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.billing.meter_event_summary@ in the specification.
-- 
-- A billing meter event summary represents an aggregated view of a customer\'s billing meter events within a specified timeframe. It indicates how much
-- usage was accrued by a customer for that period.
-- 
-- Note: Meters events are aggregated asynchronously so the meter event summaries provide an eventually consistent view of the reported usage.
data Billing'meterEventSummary = Billing'meterEventSummary {
  -- | aggregated_value: Aggregated value of all the events within \`start_time\` (inclusive) and \`end_time\` (inclusive). The aggregation strategy is defined on meter via \`default_aggregation\`.
  billing'meterEventSummaryAggregatedValue :: GHC.Types.Double
  -- | end_time: End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.
  , billing'meterEventSummaryEndTime :: GHC.Types.Int
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , billing'meterEventSummaryId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , billing'meterEventSummaryLivemode :: GHC.Types.Bool
  -- | meter: The meter associated with this event summary.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , billing'meterEventSummaryMeter :: Data.Text.Internal.Text
  -- | start_time: Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.
  , billing'meterEventSummaryStartTime :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Billing'meterEventSummary
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["aggregated_value" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryAggregatedValue obj] : ["end_time" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryEndTime obj] : ["id" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryId obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryLivemode obj] : ["meter" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryMeter obj] : ["start_time" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryStartTime obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter_event_summary"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["aggregated_value" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryAggregatedValue obj] : ["end_time" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryEndTime obj] : ["id" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryId obj] : ["livemode" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryLivemode obj] : ["meter" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryMeter obj] : ["start_time" Data.Aeson.Types.ToJSON..= billing'meterEventSummaryStartTime obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "billing.meter_event_summary"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Billing'meterEventSummary
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Billing'meterEventSummary" (\obj -> (((((GHC.Base.pure Billing'meterEventSummary GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "aggregated_value")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "end_time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "start_time"))}
-- | Create a new 'Billing'meterEventSummary' with all required fields.
mkBilling'meterEventSummary :: GHC.Types.Double -- ^ 'billing'meterEventSummaryAggregatedValue'
  -> GHC.Types.Int -- ^ 'billing'meterEventSummaryEndTime'
  -> Data.Text.Internal.Text -- ^ 'billing'meterEventSummaryId'
  -> GHC.Types.Bool -- ^ 'billing'meterEventSummaryLivemode'
  -> Data.Text.Internal.Text -- ^ 'billing'meterEventSummaryMeter'
  -> GHC.Types.Int -- ^ 'billing'meterEventSummaryStartTime'
  -> Billing'meterEventSummary
mkBilling'meterEventSummary billing'meterEventSummaryAggregatedValue billing'meterEventSummaryEndTime billing'meterEventSummaryId billing'meterEventSummaryLivemode billing'meterEventSummaryMeter billing'meterEventSummaryStartTime = Billing'meterEventSummary{billing'meterEventSummaryAggregatedValue = billing'meterEventSummaryAggregatedValue,
                                                                                                                                                                                                                                                                  billing'meterEventSummaryEndTime = billing'meterEventSummaryEndTime,
                                                                                                                                                                                                                                                                  billing'meterEventSummaryId = billing'meterEventSummaryId,
                                                                                                                                                                                                                                                                  billing'meterEventSummaryLivemode = billing'meterEventSummaryLivemode,
                                                                                                                                                                                                                                                                  billing'meterEventSummaryMeter = billing'meterEventSummaryMeter,
                                                                                                                                                                                                                                                                  billing'meterEventSummaryStartTime = billing'meterEventSummaryStartTime}
