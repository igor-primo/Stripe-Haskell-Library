-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ConnectEmbeddedPaymentDisputesFeatures
module StripeAPI.Types.ConnectEmbeddedPaymentDisputesFeatures where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.connect_embedded_payment_disputes_features@ in the specification.
-- 
-- 
data ConnectEmbeddedPaymentDisputesFeatures = ConnectEmbeddedPaymentDisputesFeatures {
  -- | destination_on_behalf_of_charge_management: Whether connected accounts can manage destination charges that are created on behalf of them. This is \`false\` by default.
  connectEmbeddedPaymentDisputesFeaturesDestinationOnBehalfOfChargeManagement :: GHC.Types.Bool
  -- | dispute_management: Whether responding to disputes is enabled, including submitting evidence and accepting disputes. This is \`true\` by default.
  , connectEmbeddedPaymentDisputesFeaturesDisputeManagement :: GHC.Types.Bool
  -- | refund_management: Whether sending refunds is enabled. This is \`true\` by default.
  , connectEmbeddedPaymentDisputesFeaturesRefundManagement :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ConnectEmbeddedPaymentDisputesFeatures
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["destination_on_behalf_of_charge_management" Data.Aeson.Types.ToJSON..= connectEmbeddedPaymentDisputesFeaturesDestinationOnBehalfOfChargeManagement obj] : ["dispute_management" Data.Aeson.Types.ToJSON..= connectEmbeddedPaymentDisputesFeaturesDisputeManagement obj] : ["refund_management" Data.Aeson.Types.ToJSON..= connectEmbeddedPaymentDisputesFeaturesRefundManagement obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["destination_on_behalf_of_charge_management" Data.Aeson.Types.ToJSON..= connectEmbeddedPaymentDisputesFeaturesDestinationOnBehalfOfChargeManagement obj] : ["dispute_management" Data.Aeson.Types.ToJSON..= connectEmbeddedPaymentDisputesFeaturesDisputeManagement obj] : ["refund_management" Data.Aeson.Types.ToJSON..= connectEmbeddedPaymentDisputesFeaturesRefundManagement obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON ConnectEmbeddedPaymentDisputesFeatures
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectEmbeddedPaymentDisputesFeatures" (\obj -> ((GHC.Base.pure ConnectEmbeddedPaymentDisputesFeatures GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination_on_behalf_of_charge_management")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dispute_management")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refund_management"))}
-- | Create a new 'ConnectEmbeddedPaymentDisputesFeatures' with all required fields.
mkConnectEmbeddedPaymentDisputesFeatures :: GHC.Types.Bool -- ^ 'connectEmbeddedPaymentDisputesFeaturesDestinationOnBehalfOfChargeManagement'
  -> GHC.Types.Bool -- ^ 'connectEmbeddedPaymentDisputesFeaturesDisputeManagement'
  -> GHC.Types.Bool -- ^ 'connectEmbeddedPaymentDisputesFeaturesRefundManagement'
  -> ConnectEmbeddedPaymentDisputesFeatures
mkConnectEmbeddedPaymentDisputesFeatures connectEmbeddedPaymentDisputesFeaturesDestinationOnBehalfOfChargeManagement connectEmbeddedPaymentDisputesFeaturesDisputeManagement connectEmbeddedPaymentDisputesFeaturesRefundManagement = ConnectEmbeddedPaymentDisputesFeatures{connectEmbeddedPaymentDisputesFeaturesDestinationOnBehalfOfChargeManagement = connectEmbeddedPaymentDisputesFeaturesDestinationOnBehalfOfChargeManagement,
                                                                                                                                                                                                                                                                             connectEmbeddedPaymentDisputesFeaturesDisputeManagement = connectEmbeddedPaymentDisputesFeaturesDisputeManagement,
                                                                                                                                                                                                                                                                             connectEmbeddedPaymentDisputesFeaturesRefundManagement = connectEmbeddedPaymentDisputesFeaturesRefundManagement}
