-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CreditNoteRefund
module StripeAPI.Types.CreditNoteRefund where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Refund

-- | Defines the object schema located at @components.schemas.credit_note_refund@ in the specification.
-- 
-- 
data CreditNoteRefund = CreditNoteRefund {
  -- | amount_refunded: Amount of the refund that applies to this credit note, in cents (or local equivalent).
  creditNoteRefundAmountRefunded :: GHC.Types.Int
  -- | refund: ID of the refund.
  , creditNoteRefundRefund :: CreditNoteRefundRefund'Variants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteRefund
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount_refunded" Data.Aeson.Types.ToJSON..= creditNoteRefundAmountRefunded obj] : ["refund" Data.Aeson.Types.ToJSON..= creditNoteRefundRefund obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount_refunded" Data.Aeson.Types.ToJSON..= creditNoteRefundAmountRefunded obj] : ["refund" Data.Aeson.Types.ToJSON..= creditNoteRefundRefund obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteRefund
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditNoteRefund" (\obj -> (GHC.Base.pure CreditNoteRefund GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refund"))}
-- | Create a new 'CreditNoteRefund' with all required fields.
mkCreditNoteRefund :: GHC.Types.Int -- ^ 'creditNoteRefundAmountRefunded'
  -> CreditNoteRefundRefund'Variants -- ^ 'creditNoteRefundRefund'
  -> CreditNoteRefund
mkCreditNoteRefund creditNoteRefundAmountRefunded creditNoteRefundRefund = CreditNoteRefund{creditNoteRefundAmountRefunded = creditNoteRefundAmountRefunded,
                                                                                            creditNoteRefundRefund = creditNoteRefundRefund}
-- | Defines the oneOf schema located at @components.schemas.credit_note_refund.properties.refund.anyOf@ in the specification.
-- 
-- ID of the refund.
data CreditNoteRefundRefund'Variants =
   CreditNoteRefundRefund'Text Data.Text.Internal.Text
  | CreditNoteRefundRefund'Refund Refund
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteRefundRefund'Variants
    where {toJSON (CreditNoteRefundRefund'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreditNoteRefundRefund'Refund a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteRefundRefund'Variants
    where {parseJSON val = case (CreditNoteRefundRefund'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreditNoteRefundRefund'Refund Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
