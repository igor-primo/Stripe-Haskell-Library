-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CreditNotesPretaxCreditAmount
module StripeAPI.Types.CreditNotesPretaxCreditAmount where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Billing_CreditBalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.DeletedDiscount
import {-# SOURCE #-} StripeAPI.Types.Discount

-- | Defines the object schema located at @components.schemas.credit_notes_pretax_credit_amount@ in the specification.
-- 
-- 
data CreditNotesPretaxCreditAmount = CreditNotesPretaxCreditAmount {
  -- | amount: The amount, in cents (or local equivalent), of the pretax credit amount.
  creditNotesPretaxCreditAmountAmount :: GHC.Types.Int
  -- | credit_balance_transaction: The credit balance transaction that was applied to get this pretax credit amount.
  , creditNotesPretaxCreditAmountCreditBalanceTransaction :: (GHC.Maybe.Maybe CreditNotesPretaxCreditAmountCreditBalanceTransaction'Variants)
  -- | discount: The discount that was applied to get this pretax credit amount.
  , creditNotesPretaxCreditAmountDiscount :: (GHC.Maybe.Maybe CreditNotesPretaxCreditAmountDiscount'Variants)
  -- | type: Type of the pretax credit amount referenced.
  , creditNotesPretaxCreditAmountType :: CreditNotesPretaxCreditAmountType'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreditNotesPretaxCreditAmount
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= creditNotesPretaxCreditAmountAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_balance_transaction" Data.Aeson.Types.ToJSON..=)) (creditNotesPretaxCreditAmountCreditBalanceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (creditNotesPretaxCreditAmountDiscount obj) : ["type" Data.Aeson.Types.ToJSON..= creditNotesPretaxCreditAmountType obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= creditNotesPretaxCreditAmountAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit_balance_transaction" Data.Aeson.Types.ToJSON..=)) (creditNotesPretaxCreditAmountCreditBalanceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (creditNotesPretaxCreditAmountDiscount obj) : ["type" Data.Aeson.Types.ToJSON..= creditNotesPretaxCreditAmountType obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CreditNotesPretaxCreditAmount
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditNotesPretaxCreditAmount" (\obj -> (((GHC.Base.pure CreditNotesPretaxCreditAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "credit_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'CreditNotesPretaxCreditAmount' with all required fields.
mkCreditNotesPretaxCreditAmount :: GHC.Types.Int -- ^ 'creditNotesPretaxCreditAmountAmount'
  -> CreditNotesPretaxCreditAmountType' -- ^ 'creditNotesPretaxCreditAmountType'
  -> CreditNotesPretaxCreditAmount
mkCreditNotesPretaxCreditAmount creditNotesPretaxCreditAmountAmount creditNotesPretaxCreditAmountType = CreditNotesPretaxCreditAmount{creditNotesPretaxCreditAmountAmount = creditNotesPretaxCreditAmountAmount,
                                                                                                                                      creditNotesPretaxCreditAmountCreditBalanceTransaction = GHC.Maybe.Nothing,
                                                                                                                                      creditNotesPretaxCreditAmountDiscount = GHC.Maybe.Nothing,
                                                                                                                                      creditNotesPretaxCreditAmountType = creditNotesPretaxCreditAmountType}
-- | Defines the oneOf schema located at @components.schemas.credit_notes_pretax_credit_amount.properties.credit_balance_transaction.anyOf@ in the specification.
-- 
-- The credit balance transaction that was applied to get this pretax credit amount.
data CreditNotesPretaxCreditAmountCreditBalanceTransaction'Variants =
   CreditNotesPretaxCreditAmountCreditBalanceTransaction'Text Data.Text.Internal.Text
  | CreditNotesPretaxCreditAmountCreditBalanceTransaction'Billing'creditBalanceTransaction Billing'creditBalanceTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreditNotesPretaxCreditAmountCreditBalanceTransaction'Variants
    where {toJSON (CreditNotesPretaxCreditAmountCreditBalanceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreditNotesPretaxCreditAmountCreditBalanceTransaction'Billing'creditBalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreditNotesPretaxCreditAmountCreditBalanceTransaction'Variants
    where {parseJSON val = case (CreditNotesPretaxCreditAmountCreditBalanceTransaction'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreditNotesPretaxCreditAmountCreditBalanceTransaction'Billing'creditBalanceTransaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the oneOf schema located at @components.schemas.credit_notes_pretax_credit_amount.properties.discount.anyOf@ in the specification.
-- 
-- The discount that was applied to get this pretax credit amount.
data CreditNotesPretaxCreditAmountDiscount'Variants =
   CreditNotesPretaxCreditAmountDiscount'Text Data.Text.Internal.Text
  | CreditNotesPretaxCreditAmountDiscount'Discount Discount
  | CreditNotesPretaxCreditAmountDiscount'DeletedDiscount DeletedDiscount
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreditNotesPretaxCreditAmountDiscount'Variants
    where {toJSON (CreditNotesPretaxCreditAmountDiscount'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreditNotesPretaxCreditAmountDiscount'Discount a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreditNotesPretaxCreditAmountDiscount'DeletedDiscount a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreditNotesPretaxCreditAmountDiscount'Variants
    where {parseJSON val = case (CreditNotesPretaxCreditAmountDiscount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreditNotesPretaxCreditAmountDiscount'Discount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreditNotesPretaxCreditAmountDiscount'DeletedDiscount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the enum schema located at @components.schemas.credit_notes_pretax_credit_amount.properties.type@ in the specification.
-- 
-- Type of the pretax credit amount referenced.
data CreditNotesPretaxCreditAmountType' =
   CreditNotesPretaxCreditAmountType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreditNotesPretaxCreditAmountType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreditNotesPretaxCreditAmountType'EnumCreditBalanceTransaction -- ^ Represents the JSON value @"credit_balance_transaction"@
  | CreditNotesPretaxCreditAmountType'EnumDiscount -- ^ Represents the JSON value @"discount"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreditNotesPretaxCreditAmountType'
    where {toJSON (CreditNotesPretaxCreditAmountType'Other val) = val;
           toJSON (CreditNotesPretaxCreditAmountType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreditNotesPretaxCreditAmountType'EnumCreditBalanceTransaction) = "credit_balance_transaction";
           toJSON (CreditNotesPretaxCreditAmountType'EnumDiscount) = "discount"}
instance Data.Aeson.Types.FromJSON.FromJSON CreditNotesPretaxCreditAmountType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "credit_balance_transaction" -> CreditNotesPretaxCreditAmountType'EnumCreditBalanceTransaction
                                             | val GHC.Classes.== "discount" -> CreditNotesPretaxCreditAmountType'EnumDiscount
                                             | GHC.Base.otherwise -> CreditNotesPretaxCreditAmountType'Other val)}
