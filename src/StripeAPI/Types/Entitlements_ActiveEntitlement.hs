-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Entitlements_ActiveEntitlement
module StripeAPI.Types.Entitlements_ActiveEntitlement where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Entitlements_Feature

-- | Defines the object schema located at @components.schemas.entitlements.active_entitlement@ in the specification.
-- 
-- An active entitlement describes access to a feature for a customer.
data Entitlements'activeEntitlement = Entitlements'activeEntitlement {
  -- | feature: The [Feature](https:\/\/stripe.com\/docs\/api\/entitlements\/feature) that the customer is entitled to.
  entitlements'activeEntitlementFeature :: Entitlements'activeEntitlementFeature'Variants
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , entitlements'activeEntitlementId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , entitlements'activeEntitlementLivemode :: GHC.Types.Bool
  -- | lookup_key: A unique key you provide as your own system identifier. This may be up to 80 characters.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , entitlements'activeEntitlementLookupKey :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Entitlements'activeEntitlement
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["feature" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementFeature obj] : ["id" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementId obj] : ["livemode" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementLivemode obj] : ["lookup_key" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementLookupKey obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "entitlements.active_entitlement"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["feature" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementFeature obj] : ["id" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementId obj] : ["livemode" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementLivemode obj] : ["lookup_key" Data.Aeson.Types.ToJSON..= entitlements'activeEntitlementLookupKey obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "entitlements.active_entitlement"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Entitlements'activeEntitlement
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Entitlements'activeEntitlement" (\obj -> (((GHC.Base.pure Entitlements'activeEntitlement GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "feature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lookup_key"))}
-- | Create a new 'Entitlements'activeEntitlement' with all required fields.
mkEntitlements'activeEntitlement :: Entitlements'activeEntitlementFeature'Variants -- ^ 'entitlements'activeEntitlementFeature'
  -> Data.Text.Internal.Text -- ^ 'entitlements'activeEntitlementId'
  -> GHC.Types.Bool -- ^ 'entitlements'activeEntitlementLivemode'
  -> Data.Text.Internal.Text -- ^ 'entitlements'activeEntitlementLookupKey'
  -> Entitlements'activeEntitlement
mkEntitlements'activeEntitlement entitlements'activeEntitlementFeature entitlements'activeEntitlementId entitlements'activeEntitlementLivemode entitlements'activeEntitlementLookupKey = Entitlements'activeEntitlement{entitlements'activeEntitlementFeature = entitlements'activeEntitlementFeature,
                                                                                                                                                                                                                        entitlements'activeEntitlementId = entitlements'activeEntitlementId,
                                                                                                                                                                                                                        entitlements'activeEntitlementLivemode = entitlements'activeEntitlementLivemode,
                                                                                                                                                                                                                        entitlements'activeEntitlementLookupKey = entitlements'activeEntitlementLookupKey}
-- | Defines the oneOf schema located at @components.schemas.entitlements.active_entitlement.properties.feature.anyOf@ in the specification.
-- 
-- The [Feature](https:\/\/stripe.com\/docs\/api\/entitlements\/feature) that the customer is entitled to.
data Entitlements'activeEntitlementFeature'Variants =
   Entitlements'activeEntitlementFeature'Text Data.Text.Internal.Text
  | Entitlements'activeEntitlementFeature'Entitlements'feature Entitlements'feature
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Entitlements'activeEntitlementFeature'Variants
    where {toJSON (Entitlements'activeEntitlementFeature'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (Entitlements'activeEntitlementFeature'Entitlements'feature a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON Entitlements'activeEntitlementFeature'Variants
    where {parseJSON val = case (Entitlements'activeEntitlementFeature'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Entitlements'activeEntitlementFeature'Entitlements'feature Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
