-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Entitlements_Feature
module StripeAPI.Types.Entitlements_Feature where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.entitlements.feature@ in the specification.
-- 
-- A feature represents a monetizable ability or functionality in your system.
-- Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
data Entitlements'feature = Entitlements'feature {
  -- | active: Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
  entitlements'featureActive :: GHC.Types.Bool
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , entitlements'featureId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , entitlements'featureLivemode :: GHC.Types.Bool
  -- | lookup_key: A unique key you provide as your own system identifier. This may be up to 80 characters.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , entitlements'featureLookupKey :: Data.Text.Internal.Text
  -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  , entitlements'featureMetadata :: Data.Aeson.Types.Internal.Object
  -- | name: The feature\'s name, for your own purpose, not meant to be displayable to the customer.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 80
  , entitlements'featureName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Entitlements'feature
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= entitlements'featureActive obj] : ["id" Data.Aeson.Types.ToJSON..= entitlements'featureId obj] : ["livemode" Data.Aeson.Types.ToJSON..= entitlements'featureLivemode obj] : ["lookup_key" Data.Aeson.Types.ToJSON..= entitlements'featureLookupKey obj] : ["metadata" Data.Aeson.Types.ToJSON..= entitlements'featureMetadata obj] : ["name" Data.Aeson.Types.ToJSON..= entitlements'featureName obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "entitlements.feature"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= entitlements'featureActive obj] : ["id" Data.Aeson.Types.ToJSON..= entitlements'featureId obj] : ["livemode" Data.Aeson.Types.ToJSON..= entitlements'featureLivemode obj] : ["lookup_key" Data.Aeson.Types.ToJSON..= entitlements'featureLookupKey obj] : ["metadata" Data.Aeson.Types.ToJSON..= entitlements'featureMetadata obj] : ["name" Data.Aeson.Types.ToJSON..= entitlements'featureName obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "entitlements.feature"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Entitlements'feature
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Entitlements'feature" (\obj -> (((((GHC.Base.pure Entitlements'feature GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lookup_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))}
-- | Create a new 'Entitlements'feature' with all required fields.
mkEntitlements'feature :: GHC.Types.Bool -- ^ 'entitlements'featureActive'
  -> Data.Text.Internal.Text -- ^ 'entitlements'featureId'
  -> GHC.Types.Bool -- ^ 'entitlements'featureLivemode'
  -> Data.Text.Internal.Text -- ^ 'entitlements'featureLookupKey'
  -> Data.Aeson.Types.Internal.Object -- ^ 'entitlements'featureMetadata'
  -> Data.Text.Internal.Text -- ^ 'entitlements'featureName'
  -> Entitlements'feature
mkEntitlements'feature entitlements'featureActive entitlements'featureId entitlements'featureLivemode entitlements'featureLookupKey entitlements'featureMetadata entitlements'featureName = Entitlements'feature{entitlements'featureActive = entitlements'featureActive,
                                                                                                                                                                                                                 entitlements'featureId = entitlements'featureId,
                                                                                                                                                                                                                 entitlements'featureLivemode = entitlements'featureLivemode,
                                                                                                                                                                                                                 entitlements'featureLookupKey = entitlements'featureLookupKey,
                                                                                                                                                                                                                 entitlements'featureMetadata = entitlements'featureMetadata,
                                                                                                                                                                                                                 entitlements'featureName = entitlements'featureName}
