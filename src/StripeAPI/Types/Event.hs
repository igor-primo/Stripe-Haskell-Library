-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Event
module StripeAPI.Types.Event where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.NotificationEventData
import {-# SOURCE #-} StripeAPI.Types.NotificationEventRequest

-- | Defines the object schema located at @components.schemas.event@ in the specification.
-- 
-- Snapshot events allow you to track and react to activity in your Stripe integration. When
-- the state of another API resource changes, Stripe creates an \`Event\` object that contains
-- all the relevant information associated with that action, including the affected API
-- resource. For example, a successful payment triggers a \`charge.succeeded\` event, which
-- contains the \`Charge\` in the event\'s data property. Some actions trigger multiple events.
-- For example, if you create a new subscription for a customer, it triggers both a
-- \`customer.subscription.created\` event and a \`charge.succeeded\` event.
-- 
-- Configure an event destination in your account to listen for events that represent actions
-- your integration needs to respond to. Additionally, you can retrieve an individual event or
-- a list of events from the API.
-- 
-- [Connect](https:\/\/docs.stripe.com\/connect) platforms can also receive event notifications
-- that occur in their connected accounts. These events include an account attribute that
-- identifies the relevant connected account.
-- 
-- You can access events through the [Retrieve Event API](https:\/\/docs.stripe.com\/api\/events\#retrieve_event)
-- for 30 days.
data Event = Event {
  -- | account: The connected account that originates the event.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  eventAccount :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | api_version: The Stripe API version used to render \`data\` when the event was created. The contents of \`data\` never change, so this value remains static regardless of the API version currently in use. This property is populated only for events created on or after October 31, 2014.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , eventApiVersion :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | context: Authentication context needed to fetch the event or related object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , eventContext :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  , eventCreated :: GHC.Types.Int
  -- | data: 
  , eventData :: NotificationEventData
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , eventId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , eventLivemode :: GHC.Types.Bool
  -- | pending_webhooks: Number of webhooks that haven\'t been successfully delivered (for example, to return a 20x response) to the URLs you specify.
  , eventPendingWebhooks :: GHC.Types.Int
  -- | request: Information on the API request that triggers the event.
  , eventRequest :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable EventRequest'NonNullable))
  -- | type: Description of the event (for example, \`invoice.created\` or \`charge.refunded\`).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , eventType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Event
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (eventAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_version" Data.Aeson.Types.ToJSON..=)) (eventApiVersion obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (eventContext obj) : ["created" Data.Aeson.Types.ToJSON..= eventCreated obj] : ["data" Data.Aeson.Types.ToJSON..= eventData obj] : ["id" Data.Aeson.Types.ToJSON..= eventId obj] : ["livemode" Data.Aeson.Types.ToJSON..= eventLivemode obj] : ["pending_webhooks" Data.Aeson.Types.ToJSON..= eventPendingWebhooks obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request" Data.Aeson.Types.ToJSON..=)) (eventRequest obj) : ["type" Data.Aeson.Types.ToJSON..= eventType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "event"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (eventAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_version" Data.Aeson.Types.ToJSON..=)) (eventApiVersion obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (eventContext obj) : ["created" Data.Aeson.Types.ToJSON..= eventCreated obj] : ["data" Data.Aeson.Types.ToJSON..= eventData obj] : ["id" Data.Aeson.Types.ToJSON..= eventId obj] : ["livemode" Data.Aeson.Types.ToJSON..= eventLivemode obj] : ["pending_webhooks" Data.Aeson.Types.ToJSON..= eventPendingWebhooks obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request" Data.Aeson.Types.ToJSON..=)) (eventRequest obj) : ["type" Data.Aeson.Types.ToJSON..= eventType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "event"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Event
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Event" (\obj -> (((((((((GHC.Base.pure Event GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "api_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_webhooks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'Event' with all required fields.
mkEvent :: GHC.Types.Int -- ^ 'eventCreated'
  -> NotificationEventData -- ^ 'eventData'
  -> Data.Text.Internal.Text -- ^ 'eventId'
  -> GHC.Types.Bool -- ^ 'eventLivemode'
  -> GHC.Types.Int -- ^ 'eventPendingWebhooks'
  -> Data.Text.Internal.Text -- ^ 'eventType'
  -> Event
mkEvent eventCreated eventData eventId eventLivemode eventPendingWebhooks eventType = Event{eventAccount = GHC.Maybe.Nothing,
                                                                                            eventApiVersion = GHC.Maybe.Nothing,
                                                                                            eventContext = GHC.Maybe.Nothing,
                                                                                            eventCreated = eventCreated,
                                                                                            eventData = eventData,
                                                                                            eventId = eventId,
                                                                                            eventLivemode = eventLivemode,
                                                                                            eventPendingWebhooks = eventPendingWebhooks,
                                                                                            eventRequest = GHC.Maybe.Nothing,
                                                                                            eventType = eventType}
-- | Defines the object schema located at @components.schemas.event.properties.request.anyOf@ in the specification.
-- 
-- Information on the API request that triggers the event.
data EventRequest'NonNullable = EventRequest'NonNullable {
  -- | id: ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe\'s automatic subscription handling). Request logs are available in the [dashboard](https:\/\/dashboard.stripe.com\/logs), but currently not in the API.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  eventRequest'NonNullableId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | idempotency_key: The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , eventRequest'NonNullableIdempotencyKey :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EventRequest'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (eventRequest'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("idempotency_key" Data.Aeson.Types.ToJSON..=)) (eventRequest'NonNullableIdempotencyKey obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (eventRequest'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("idempotency_key" Data.Aeson.Types.ToJSON..=)) (eventRequest'NonNullableIdempotencyKey obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON EventRequest'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "EventRequest'NonNullable" (\obj -> (GHC.Base.pure EventRequest'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "idempotency_key"))}
-- | Create a new 'EventRequest'NonNullable' with all required fields.
mkEventRequest'NonNullable :: EventRequest'NonNullable
mkEventRequest'NonNullable = EventRequest'NonNullable{eventRequest'NonNullableId = GHC.Maybe.Nothing,
                                                      eventRequest'NonNullableIdempotencyKey = GHC.Maybe.Nothing}
