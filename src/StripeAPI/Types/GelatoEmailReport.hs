-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema GelatoEmailReport
module StripeAPI.Types.GelatoEmailReport where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.GelatoEmailReportError

-- | Defines the object schema located at @components.schemas.gelato_email_report@ in the specification.
-- 
-- Result from a email check
data GelatoEmailReport = GelatoEmailReport {
  -- | email: Email to be verified.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  gelatoEmailReportEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | error: Details on the verification error. Present when status is \`unverified\`.
  , gelatoEmailReportError :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GelatoEmailReportError'NonNullable))
  -- | status: Status of this \`email\` check.
  , gelatoEmailReportStatus :: GelatoEmailReportStatus'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoEmailReport
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportError obj) : ["status" Data.Aeson.Types.ToJSON..= gelatoEmailReportStatus obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportError obj) : ["status" Data.Aeson.Types.ToJSON..= gelatoEmailReportStatus obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoEmailReport
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoEmailReport" (\obj -> ((GHC.Base.pure GelatoEmailReport GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))}
-- | Create a new 'GelatoEmailReport' with all required fields.
mkGelatoEmailReport :: GelatoEmailReportStatus' -- ^ 'gelatoEmailReportStatus'
  -> GelatoEmailReport
mkGelatoEmailReport gelatoEmailReportStatus = GelatoEmailReport{gelatoEmailReportEmail = GHC.Maybe.Nothing,
                                                                gelatoEmailReportError = GHC.Maybe.Nothing,
                                                                gelatoEmailReportStatus = gelatoEmailReportStatus}
-- | Defines the object schema located at @components.schemas.gelato_email_report.properties.error.anyOf@ in the specification.
-- 
-- Details on the verification error. Present when status is \\\`unverified\\\`.
data GelatoEmailReportError'NonNullable = GelatoEmailReportError'NonNullable {
  -- | code: A short machine-readable string giving the reason for the verification failure.
  gelatoEmailReportError'NonNullableCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GelatoEmailReportError'NonNullableCode'NonNullable))
  -- | reason: A human-readable message giving the reason for the failure. These messages can be shown to your users.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , gelatoEmailReportError'NonNullableReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoEmailReportError'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportError'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportError'NonNullableReason obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportError'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (gelatoEmailReportError'NonNullableReason obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoEmailReportError'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoEmailReportError'NonNullable" (\obj -> (GHC.Base.pure GelatoEmailReportError'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reason"))}
-- | Create a new 'GelatoEmailReportError'NonNullable' with all required fields.
mkGelatoEmailReportError'NonNullable :: GelatoEmailReportError'NonNullable
mkGelatoEmailReportError'NonNullable = GelatoEmailReportError'NonNullable{gelatoEmailReportError'NonNullableCode = GHC.Maybe.Nothing,
                                                                          gelatoEmailReportError'NonNullableReason = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.gelato_email_report.properties.error.anyOf.properties.code@ in the specification.
-- 
-- A short machine-readable string giving the reason for the verification failure.
data GelatoEmailReportError'NonNullableCode'NonNullable =
   GelatoEmailReportError'NonNullableCode'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GelatoEmailReportError'NonNullableCode'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GelatoEmailReportError'NonNullableCode'NonNullableEnumEmailUnverifiedOther -- ^ Represents the JSON value @"email_unverified_other"@
  | GelatoEmailReportError'NonNullableCode'NonNullableEnumEmailVerificationDeclined -- ^ Represents the JSON value @"email_verification_declined"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoEmailReportError'NonNullableCode'NonNullable
    where {toJSON (GelatoEmailReportError'NonNullableCode'NonNullableOther val) = val;
           toJSON (GelatoEmailReportError'NonNullableCode'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GelatoEmailReportError'NonNullableCode'NonNullableEnumEmailUnverifiedOther) = "email_unverified_other";
           toJSON (GelatoEmailReportError'NonNullableCode'NonNullableEnumEmailVerificationDeclined) = "email_verification_declined"}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoEmailReportError'NonNullableCode'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "email_unverified_other" -> GelatoEmailReportError'NonNullableCode'NonNullableEnumEmailUnverifiedOther
                                             | val GHC.Classes.== "email_verification_declined" -> GelatoEmailReportError'NonNullableCode'NonNullableEnumEmailVerificationDeclined
                                             | GHC.Base.otherwise -> GelatoEmailReportError'NonNullableCode'NonNullableOther val)}
-- | Defines the enum schema located at @components.schemas.gelato_email_report.properties.status@ in the specification.
-- 
-- Status of this \`email\` check.
data GelatoEmailReportStatus' =
   GelatoEmailReportStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GelatoEmailReportStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GelatoEmailReportStatus'EnumUnverified -- ^ Represents the JSON value @"unverified"@
  | GelatoEmailReportStatus'EnumVerified -- ^ Represents the JSON value @"verified"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoEmailReportStatus'
    where {toJSON (GelatoEmailReportStatus'Other val) = val;
           toJSON (GelatoEmailReportStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GelatoEmailReportStatus'EnumUnverified) = "unverified";
           toJSON (GelatoEmailReportStatus'EnumVerified) = "verified"}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoEmailReportStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "unverified" -> GelatoEmailReportStatus'EnumUnverified
                                             | val GHC.Classes.== "verified" -> GelatoEmailReportStatus'EnumVerified
                                             | GHC.Base.otherwise -> GelatoEmailReportStatus'Other val)}
