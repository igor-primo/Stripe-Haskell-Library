-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema GelatoRelatedPerson
module StripeAPI.Types.GelatoRelatedPerson where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.gelato_related_person@ in the specification.
-- 
-- 
data GelatoRelatedPerson = GelatoRelatedPerson {
  -- | account: Token referencing the associated Account of the related Person resource.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  gelatoRelatedPersonAccount :: Data.Text.Internal.Text
  -- | person: Token referencing the related Person resource.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , gelatoRelatedPersonPerson :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoRelatedPerson
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= gelatoRelatedPersonAccount obj] : ["person" Data.Aeson.Types.ToJSON..= gelatoRelatedPersonPerson obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= gelatoRelatedPersonAccount obj] : ["person" Data.Aeson.Types.ToJSON..= gelatoRelatedPersonPerson obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoRelatedPerson
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoRelatedPerson" (\obj -> (GHC.Base.pure GelatoRelatedPerson GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "person"))}
-- | Create a new 'GelatoRelatedPerson' with all required fields.
mkGelatoRelatedPerson :: Data.Text.Internal.Text -- ^ 'gelatoRelatedPersonAccount'
  -> Data.Text.Internal.Text -- ^ 'gelatoRelatedPersonPerson'
  -> GelatoRelatedPerson
mkGelatoRelatedPerson gelatoRelatedPersonAccount gelatoRelatedPersonPerson = GelatoRelatedPerson{gelatoRelatedPersonAccount = gelatoRelatedPersonAccount,
                                                                                                 gelatoRelatedPersonPerson = gelatoRelatedPersonPerson}
