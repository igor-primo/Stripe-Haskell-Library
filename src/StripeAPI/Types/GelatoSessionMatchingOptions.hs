-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema GelatoSessionMatchingOptions
module StripeAPI.Types.GelatoSessionMatchingOptions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.gelato_session_matching_options@ in the specification.
-- 
-- 
data GelatoSessionMatchingOptions = GelatoSessionMatchingOptions {
  -- | dob: Strictness of the DOB matching policy to apply.
  gelatoSessionMatchingOptionsDob :: (GHC.Maybe.Maybe GelatoSessionMatchingOptionsDob')
  -- | name: Strictness of the name matching policy to apply.
  , gelatoSessionMatchingOptionsName :: (GHC.Maybe.Maybe GelatoSessionMatchingOptionsName')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoSessionMatchingOptions
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dob" Data.Aeson.Types.ToJSON..=)) (gelatoSessionMatchingOptionsDob obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (gelatoSessionMatchingOptionsName obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dob" Data.Aeson.Types.ToJSON..=)) (gelatoSessionMatchingOptionsDob obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (gelatoSessionMatchingOptionsName obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoSessionMatchingOptions
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoSessionMatchingOptions" (\obj -> (GHC.Base.pure GelatoSessionMatchingOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name"))}
-- | Create a new 'GelatoSessionMatchingOptions' with all required fields.
mkGelatoSessionMatchingOptions :: GelatoSessionMatchingOptions
mkGelatoSessionMatchingOptions = GelatoSessionMatchingOptions{gelatoSessionMatchingOptionsDob = GHC.Maybe.Nothing,
                                                              gelatoSessionMatchingOptionsName = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.gelato_session_matching_options.properties.dob@ in the specification.
-- 
-- Strictness of the DOB matching policy to apply.
data GelatoSessionMatchingOptionsDob' =
   GelatoSessionMatchingOptionsDob'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GelatoSessionMatchingOptionsDob'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GelatoSessionMatchingOptionsDob'EnumNone -- ^ Represents the JSON value @"none"@
  | GelatoSessionMatchingOptionsDob'EnumSimilar -- ^ Represents the JSON value @"similar"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoSessionMatchingOptionsDob'
    where {toJSON (GelatoSessionMatchingOptionsDob'Other val) = val;
           toJSON (GelatoSessionMatchingOptionsDob'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GelatoSessionMatchingOptionsDob'EnumNone) = "none";
           toJSON (GelatoSessionMatchingOptionsDob'EnumSimilar) = "similar"}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoSessionMatchingOptionsDob'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> GelatoSessionMatchingOptionsDob'EnumNone
                                             | val GHC.Classes.== "similar" -> GelatoSessionMatchingOptionsDob'EnumSimilar
                                             | GHC.Base.otherwise -> GelatoSessionMatchingOptionsDob'Other val)}
-- | Defines the enum schema located at @components.schemas.gelato_session_matching_options.properties.name@ in the specification.
-- 
-- Strictness of the name matching policy to apply.
data GelatoSessionMatchingOptionsName' =
   GelatoSessionMatchingOptionsName'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GelatoSessionMatchingOptionsName'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GelatoSessionMatchingOptionsName'EnumNone -- ^ Represents the JSON value @"none"@
  | GelatoSessionMatchingOptionsName'EnumSimilar -- ^ Represents the JSON value @"similar"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GelatoSessionMatchingOptionsName'
    where {toJSON (GelatoSessionMatchingOptionsName'Other val) = val;
           toJSON (GelatoSessionMatchingOptionsName'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (GelatoSessionMatchingOptionsName'EnumNone) = "none";
           toJSON (GelatoSessionMatchingOptionsName'EnumSimilar) = "similar"}
instance Data.Aeson.Types.FromJSON.FromJSON GelatoSessionMatchingOptionsName'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> GelatoSessionMatchingOptionsName'EnumNone
                                             | val GHC.Classes.== "similar" -> GelatoSessionMatchingOptionsName'EnumSimilar
                                             | GHC.Base.otherwise -> GelatoSessionMatchingOptionsName'Other val)}
