-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema InvoiceRenderingTemplate
module StripeAPI.Types.InvoiceRenderingTemplate where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.invoice_rendering_template@ in the specification.
-- 
-- Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates
-- can be created from within the Dashboard, and they can be used over the API when creating invoices.
data InvoiceRenderingTemplate = InvoiceRenderingTemplate {
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  invoiceRenderingTemplateCreated :: GHC.Types.Int
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , invoiceRenderingTemplateId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , invoiceRenderingTemplateLivemode :: GHC.Types.Bool
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  , invoiceRenderingTemplateMetadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object))
  -- | nickname: A brief description of the template, hidden from customers
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , invoiceRenderingTemplateNickname :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | status: The status of the template, one of \`active\` or \`archived\`.
  , invoiceRenderingTemplateStatus :: InvoiceRenderingTemplateStatus'
  -- | version: Version of this template; version increases by one when an update on the template changes any field that controls invoice rendering
  , invoiceRenderingTemplateVersion :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceRenderingTemplate
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateCreated obj] : ["id" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateId obj] : ["livemode" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (invoiceRenderingTemplateMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nickname" Data.Aeson.Types.ToJSON..=)) (invoiceRenderingTemplateNickname obj) : ["status" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateStatus obj] : ["version" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateVersion obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "invoice_rendering_template"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateCreated obj] : ["id" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateId obj] : ["livemode" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (invoiceRenderingTemplateMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nickname" Data.Aeson.Types.ToJSON..=)) (invoiceRenderingTemplateNickname obj) : ["status" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateStatus obj] : ["version" Data.Aeson.Types.ToJSON..= invoiceRenderingTemplateVersion obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "invoice_rendering_template"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceRenderingTemplate
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceRenderingTemplate" (\obj -> ((((((GHC.Base.pure InvoiceRenderingTemplate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version"))}
-- | Create a new 'InvoiceRenderingTemplate' with all required fields.
mkInvoiceRenderingTemplate :: GHC.Types.Int -- ^ 'invoiceRenderingTemplateCreated'
  -> Data.Text.Internal.Text -- ^ 'invoiceRenderingTemplateId'
  -> GHC.Types.Bool -- ^ 'invoiceRenderingTemplateLivemode'
  -> InvoiceRenderingTemplateStatus' -- ^ 'invoiceRenderingTemplateStatus'
  -> GHC.Types.Int -- ^ 'invoiceRenderingTemplateVersion'
  -> InvoiceRenderingTemplate
mkInvoiceRenderingTemplate invoiceRenderingTemplateCreated invoiceRenderingTemplateId invoiceRenderingTemplateLivemode invoiceRenderingTemplateStatus invoiceRenderingTemplateVersion = InvoiceRenderingTemplate{invoiceRenderingTemplateCreated = invoiceRenderingTemplateCreated,
                                                                                                                                                                                                                 invoiceRenderingTemplateId = invoiceRenderingTemplateId,
                                                                                                                                                                                                                 invoiceRenderingTemplateLivemode = invoiceRenderingTemplateLivemode,
                                                                                                                                                                                                                 invoiceRenderingTemplateMetadata = GHC.Maybe.Nothing,
                                                                                                                                                                                                                 invoiceRenderingTemplateNickname = GHC.Maybe.Nothing,
                                                                                                                                                                                                                 invoiceRenderingTemplateStatus = invoiceRenderingTemplateStatus,
                                                                                                                                                                                                                 invoiceRenderingTemplateVersion = invoiceRenderingTemplateVersion}
-- | Defines the enum schema located at @components.schemas.invoice_rendering_template.properties.status@ in the specification.
-- 
-- The status of the template, one of \`active\` or \`archived\`.
data InvoiceRenderingTemplateStatus' =
   InvoiceRenderingTemplateStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | InvoiceRenderingTemplateStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | InvoiceRenderingTemplateStatus'EnumActive -- ^ Represents the JSON value @"active"@
  | InvoiceRenderingTemplateStatus'EnumArchived -- ^ Represents the JSON value @"archived"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceRenderingTemplateStatus'
    where {toJSON (InvoiceRenderingTemplateStatus'Other val) = val;
           toJSON (InvoiceRenderingTemplateStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (InvoiceRenderingTemplateStatus'EnumActive) = "active";
           toJSON (InvoiceRenderingTemplateStatus'EnumArchived) = "archived"}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceRenderingTemplateStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "active" -> InvoiceRenderingTemplateStatus'EnumActive
                                             | val GHC.Classes.== "archived" -> InvoiceRenderingTemplateStatus'EnumArchived
                                             | GHC.Base.otherwise -> InvoiceRenderingTemplateStatus'Other val)}
