-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Invoiceitem
module StripeAPI.Types.Invoiceitem where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BillingBillResourceInvoiceItemParentsInvoiceItemParent
import {-# SOURCE #-} StripeAPI.Types.BillingBillResourceInvoiceItemParentsInvoiceItemSubscriptionParent
import {-# SOURCE #-} StripeAPI.Types.BillingBillResourceInvoicingPricingPricing
import {-# SOURCE #-} StripeAPI.Types.BillingBillResourceInvoicingPricingPricingPriceDetails
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.Discount
import {-# SOURCE #-} StripeAPI.Types.Invoice
import {-# SOURCE #-} StripeAPI.Types.InvoiceLineItemPeriod
import {-# SOURCE #-} StripeAPI.Types.TaxRate
import {-# SOURCE #-} StripeAPI.Types.TestHelpers_TestClock

-- | Defines the object schema located at @components.schemas.invoiceitem@ in the specification.
-- 
-- Invoice Items represent the component lines of an [invoice](https:\/\/stripe.com\/docs\/api\/invoices). When you create an invoice item with an \`invoice\` field, it is attached to the specified invoice and included as [an invoice line item](https:\/\/stripe.com\/docs\/api\/invoices\/line_item) within [invoice.lines](https:\/\/stripe.com\/docs\/api\/invoices\/object\#invoice_object-lines).
-- 
-- Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
-- with a [subscription](https:\/\/stripe.com\/docs\/api\/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
-- or credit the customer\'s card only at the end of a regular billing cycle. This is useful for combining several charges
-- (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
-- 
-- Related guides: [Integrate with the Invoicing API](https:\/\/stripe.com\/docs\/invoicing\/integration), [Subscription Invoices](https:\/\/stripe.com\/docs\/billing\/invoices\/subscription\#adding-upcoming-invoice-items).
data Invoiceitem = Invoiceitem {
  -- | amount: Amount (in the \`currency\` specified) of the invoice item. This should always be equal to \`unit_amount * quantity\`.
  invoiceitemAmount :: GHC.Types.Int
  -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
  , invoiceitemCurrency :: Data.Text.Internal.Text
  -- | customer: The ID of the customer who will be billed when this invoice item is billed.
  , invoiceitemCustomer :: InvoiceitemCustomer'Variants
  -- | date: Time at which the object was created. Measured in seconds since the Unix epoch.
  , invoiceitemDate :: GHC.Types.Int
  -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , invoiceitemDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | discountable: If true, discounts will apply to this invoice item. Always false for prorations.
  , invoiceitemDiscountable :: GHC.Types.Bool
  -- | discounts: The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use \`expand[]=discounts\` to expand each discount.
  , invoiceitemDiscounts :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [InvoiceitemDiscounts'NonNullableVariants]))
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , invoiceitemId :: Data.Text.Internal.Text
  -- | invoice: The ID of the invoice this invoice item belongs to.
  , invoiceitemInvoice :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable InvoiceitemInvoice'NonNullableVariants))
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , invoiceitemLivemode :: GHC.Types.Bool
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  , invoiceitemMetadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object))
  -- | parent: The parent that generated this invoice item.
  , invoiceitemParent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable InvoiceitemParent'NonNullable))
  -- | period: 
  , invoiceitemPeriod :: InvoiceLineItemPeriod
  -- | pricing: The pricing information of the invoice item.
  , invoiceitemPricing :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable InvoiceitemPricing'NonNullable))
  -- | proration: Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
  , invoiceitemProration :: GHC.Types.Bool
  -- | quantity: Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
  , invoiceitemQuantity :: GHC.Types.Int
  -- | tax_rates: The tax rates which apply to the invoice item. When set, the \`default_tax_rates\` on the invoice do not apply to this invoice item.
  , invoiceitemTaxRates :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [TaxRate]))
  -- | test_clock: ID of the test clock this invoice item belongs to.
  , invoiceitemTestClock :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable InvoiceitemTestClock'NonNullableVariants))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Invoiceitem
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= invoiceitemAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= invoiceitemCurrency obj] : ["customer" Data.Aeson.Types.ToJSON..= invoiceitemCustomer obj] : ["date" Data.Aeson.Types.ToJSON..= invoiceitemDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (invoiceitemDescription obj) : ["discountable" Data.Aeson.Types.ToJSON..= invoiceitemDiscountable obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (invoiceitemDiscounts obj) : ["id" Data.Aeson.Types.ToJSON..= invoiceitemId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (invoiceitemInvoice obj) : ["livemode" Data.Aeson.Types.ToJSON..= invoiceitemLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (invoiceitemMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent obj) : ["period" Data.Aeson.Types.ToJSON..= invoiceitemPeriod obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pricing" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing obj) : ["proration" Data.Aeson.Types.ToJSON..= invoiceitemProration obj] : ["quantity" Data.Aeson.Types.ToJSON..= invoiceitemQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rates" Data.Aeson.Types.ToJSON..=)) (invoiceitemTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("test_clock" Data.Aeson.Types.ToJSON..=)) (invoiceitemTestClock obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "invoiceitem"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= invoiceitemAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= invoiceitemCurrency obj] : ["customer" Data.Aeson.Types.ToJSON..= invoiceitemCustomer obj] : ["date" Data.Aeson.Types.ToJSON..= invoiceitemDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (invoiceitemDescription obj) : ["discountable" Data.Aeson.Types.ToJSON..= invoiceitemDiscountable obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (invoiceitemDiscounts obj) : ["id" Data.Aeson.Types.ToJSON..= invoiceitemId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (invoiceitemInvoice obj) : ["livemode" Data.Aeson.Types.ToJSON..= invoiceitemLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (invoiceitemMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent obj) : ["period" Data.Aeson.Types.ToJSON..= invoiceitemPeriod obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pricing" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing obj) : ["proration" Data.Aeson.Types.ToJSON..= invoiceitemProration obj] : ["quantity" Data.Aeson.Types.ToJSON..= invoiceitemQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rates" Data.Aeson.Types.ToJSON..=)) (invoiceitemTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("test_clock" Data.Aeson.Types.ToJSON..=)) (invoiceitemTestClock obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "invoiceitem"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Invoiceitem
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Invoiceitem" (\obj -> (((((((((((((((((GHC.Base.pure Invoiceitem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discountable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "discounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pricing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "test_clock"))}
-- | Create a new 'Invoiceitem' with all required fields.
mkInvoiceitem :: GHC.Types.Int -- ^ 'invoiceitemAmount'
  -> Data.Text.Internal.Text -- ^ 'invoiceitemCurrency'
  -> InvoiceitemCustomer'Variants -- ^ 'invoiceitemCustomer'
  -> GHC.Types.Int -- ^ 'invoiceitemDate'
  -> GHC.Types.Bool -- ^ 'invoiceitemDiscountable'
  -> Data.Text.Internal.Text -- ^ 'invoiceitemId'
  -> GHC.Types.Bool -- ^ 'invoiceitemLivemode'
  -> InvoiceLineItemPeriod -- ^ 'invoiceitemPeriod'
  -> GHC.Types.Bool -- ^ 'invoiceitemProration'
  -> GHC.Types.Int -- ^ 'invoiceitemQuantity'
  -> Invoiceitem
mkInvoiceitem invoiceitemAmount invoiceitemCurrency invoiceitemCustomer invoiceitemDate invoiceitemDiscountable invoiceitemId invoiceitemLivemode invoiceitemPeriod invoiceitemProration invoiceitemQuantity = Invoiceitem{invoiceitemAmount = invoiceitemAmount,
                                                                                                                                                                                                                           invoiceitemCurrency = invoiceitemCurrency,
                                                                                                                                                                                                                           invoiceitemCustomer = invoiceitemCustomer,
                                                                                                                                                                                                                           invoiceitemDate = invoiceitemDate,
                                                                                                                                                                                                                           invoiceitemDescription = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           invoiceitemDiscountable = invoiceitemDiscountable,
                                                                                                                                                                                                                           invoiceitemDiscounts = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           invoiceitemId = invoiceitemId,
                                                                                                                                                                                                                           invoiceitemInvoice = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           invoiceitemLivemode = invoiceitemLivemode,
                                                                                                                                                                                                                           invoiceitemMetadata = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           invoiceitemParent = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           invoiceitemPeriod = invoiceitemPeriod,
                                                                                                                                                                                                                           invoiceitemPricing = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           invoiceitemProration = invoiceitemProration,
                                                                                                                                                                                                                           invoiceitemQuantity = invoiceitemQuantity,
                                                                                                                                                                                                                           invoiceitemTaxRates = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           invoiceitemTestClock = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.invoiceitem.properties.customer.anyOf@ in the specification.
-- 
-- The ID of the customer who will be billed when this invoice item is billed.
data InvoiceitemCustomer'Variants =
   InvoiceitemCustomer'Text Data.Text.Internal.Text
  | InvoiceitemCustomer'Customer Customer
  | InvoiceitemCustomer'DeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemCustomer'Variants
    where {toJSON (InvoiceitemCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (InvoiceitemCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (InvoiceitemCustomer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemCustomer'Variants
    where {parseJSON val = case (InvoiceitemCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceitemCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceitemCustomer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the oneOf schema located at @components.schemas.invoiceitem.properties.discounts.items.anyOf@ in the specification.
-- 
-- 
data InvoiceitemDiscounts'NonNullableVariants =
   InvoiceitemDiscounts'NonNullableText Data.Text.Internal.Text
  | InvoiceitemDiscounts'NonNullableDiscount Discount
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemDiscounts'NonNullableVariants
    where {toJSON (InvoiceitemDiscounts'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (InvoiceitemDiscounts'NonNullableDiscount a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemDiscounts'NonNullableVariants
    where {parseJSON val = case (InvoiceitemDiscounts'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceitemDiscounts'NonNullableDiscount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the oneOf schema located at @components.schemas.invoiceitem.properties.invoice.anyOf@ in the specification.
-- 
-- The ID of the invoice this invoice item belongs to.
data InvoiceitemInvoice'NonNullableVariants =
   InvoiceitemInvoice'NonNullableText Data.Text.Internal.Text
  | InvoiceitemInvoice'NonNullableInvoice Invoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemInvoice'NonNullableVariants
    where {toJSON (InvoiceitemInvoice'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (InvoiceitemInvoice'NonNullableInvoice a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemInvoice'NonNullableVariants
    where {parseJSON val = case (InvoiceitemInvoice'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceitemInvoice'NonNullableInvoice Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the object schema located at @components.schemas.invoiceitem.properties.parent.anyOf@ in the specification.
-- 
-- The parent that generated this invoice item.
data InvoiceitemParent'NonNullable = InvoiceitemParent'NonNullable {
  -- | subscription_details: Details about the subscription that generated this invoice item
  invoiceitemParent'NonNullableSubscriptionDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable))
  -- | type: The type of parent that generated this invoice item
  , invoiceitemParent'NonNullableType :: (GHC.Maybe.Maybe InvoiceitemParent'NonNullableType')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemParent'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_details" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableSubscriptionDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableType obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_details" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableSubscriptionDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableType obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemParent'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemParent'NonNullable" (\obj -> (GHC.Base.pure InvoiceitemParent'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscription_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))}
-- | Create a new 'InvoiceitemParent'NonNullable' with all required fields.
mkInvoiceitemParent'NonNullable :: InvoiceitemParent'NonNullable
mkInvoiceitemParent'NonNullable = InvoiceitemParent'NonNullable{invoiceitemParent'NonNullableSubscriptionDetails = GHC.Maybe.Nothing,
                                                                invoiceitemParent'NonNullableType = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.invoiceitem.properties.parent.anyOf.properties.subscription_details.anyOf@ in the specification.
-- 
-- Details about the subscription that generated this invoice item
data InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable = InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable {
  -- | subscription: The subscription that generated this invoice item
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | subscription_item: The subscription item that generated this invoice item
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscriptionItem :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_item" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscriptionItem obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_item" Data.Aeson.Types.ToJSON..=)) (invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscriptionItem obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable" (\obj -> (GHC.Base.pure InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscription_item"))}
-- | Create a new 'InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable' with all required fields.
mkInvoiceitemParent'NonNullableSubscriptionDetails'NonNullable :: InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable
mkInvoiceitemParent'NonNullableSubscriptionDetails'NonNullable = InvoiceitemParent'NonNullableSubscriptionDetails'NonNullable{invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscription = GHC.Maybe.Nothing,
                                                                                                                              invoiceitemParent'NonNullableSubscriptionDetails'NonNullableSubscriptionItem = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.invoiceitem.properties.parent.anyOf.properties.type@ in the specification.
-- 
-- The type of parent that generated this invoice item
data InvoiceitemParent'NonNullableType' =
   InvoiceitemParent'NonNullableType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | InvoiceitemParent'NonNullableType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | InvoiceitemParent'NonNullableType'EnumSubscriptionDetails -- ^ Represents the JSON value @"subscription_details"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemParent'NonNullableType'
    where {toJSON (InvoiceitemParent'NonNullableType'Other val) = val;
           toJSON (InvoiceitemParent'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (InvoiceitemParent'NonNullableType'EnumSubscriptionDetails) = "subscription_details"}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemParent'NonNullableType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "subscription_details" -> InvoiceitemParent'NonNullableType'EnumSubscriptionDetails
                                             | GHC.Base.otherwise -> InvoiceitemParent'NonNullableType'Other val)}
-- | Defines the object schema located at @components.schemas.invoiceitem.properties.pricing.anyOf@ in the specification.
-- 
-- The pricing information of the invoice item.
data InvoiceitemPricing'NonNullable = InvoiceitemPricing'NonNullable {
  -- | price_details: 
  invoiceitemPricing'NonNullablePriceDetails :: (GHC.Maybe.Maybe BillingBillResourceInvoicingPricingPricingPriceDetails)
  -- | type: The type of the pricing details.
  , invoiceitemPricing'NonNullableType :: (GHC.Maybe.Maybe InvoiceitemPricing'NonNullableType')
  -- | unit_amount_decimal: The unit amount (in the \`currency\` specified) of the item which contains a decimal value with at most 12 decimal places.
  , invoiceitemPricing'NonNullableUnitAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPricing'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_details" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing'NonNullablePriceDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing'NonNullableUnitAmountDecimal obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_details" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing'NonNullablePriceDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (invoiceitemPricing'NonNullableUnitAmountDecimal obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPricing'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemPricing'NonNullable" (\obj -> ((GHC.Base.pure InvoiceitemPricing'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_amount_decimal"))}
-- | Create a new 'InvoiceitemPricing'NonNullable' with all required fields.
mkInvoiceitemPricing'NonNullable :: InvoiceitemPricing'NonNullable
mkInvoiceitemPricing'NonNullable = InvoiceitemPricing'NonNullable{invoiceitemPricing'NonNullablePriceDetails = GHC.Maybe.Nothing,
                                                                  invoiceitemPricing'NonNullableType = GHC.Maybe.Nothing,
                                                                  invoiceitemPricing'NonNullableUnitAmountDecimal = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.invoiceitem.properties.pricing.anyOf.properties.type@ in the specification.
-- 
-- The type of the pricing details.
data InvoiceitemPricing'NonNullableType' =
   InvoiceitemPricing'NonNullableType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | InvoiceitemPricing'NonNullableType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | InvoiceitemPricing'NonNullableType'EnumPriceDetails -- ^ Represents the JSON value @"price_details"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPricing'NonNullableType'
    where {toJSON (InvoiceitemPricing'NonNullableType'Other val) = val;
           toJSON (InvoiceitemPricing'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (InvoiceitemPricing'NonNullableType'EnumPriceDetails) = "price_details"}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPricing'NonNullableType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "price_details" -> InvoiceitemPricing'NonNullableType'EnumPriceDetails
                                             | GHC.Base.otherwise -> InvoiceitemPricing'NonNullableType'Other val)}
-- | Defines the oneOf schema located at @components.schemas.invoiceitem.properties.test_clock.anyOf@ in the specification.
-- 
-- ID of the test clock this invoice item belongs to.
data InvoiceitemTestClock'NonNullableVariants =
   InvoiceitemTestClock'NonNullableText Data.Text.Internal.Text
  | InvoiceitemTestClock'NonNullableTestHelpers'testClock TestHelpers'testClock
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemTestClock'NonNullableVariants
    where {toJSON (InvoiceitemTestClock'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (InvoiceitemTestClock'NonNullableTestHelpers'testClock a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemTestClock'NonNullableVariants
    where {parseJSON val = case (InvoiceitemTestClock'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceitemTestClock'NonNullableTestHelpers'testClock Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
