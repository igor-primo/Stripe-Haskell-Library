-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ProductFeature
module StripeAPI.Types.ProductFeature where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Entitlements_Feature

-- | Defines the object schema located at @components.schemas.product_feature@ in the specification.
-- 
-- A product_feature represents an attachment between a feature and a product.
-- When a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.
data ProductFeature = ProductFeature {
  -- | entitlement_feature: A feature represents a monetizable ability or functionality in your system.
  -- Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
  productFeatureEntitlementFeature :: Entitlements'feature
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , productFeatureId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , productFeatureLivemode :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ProductFeature
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["entitlement_feature" Data.Aeson.Types.ToJSON..= productFeatureEntitlementFeature obj] : ["id" Data.Aeson.Types.ToJSON..= productFeatureId obj] : ["livemode" Data.Aeson.Types.ToJSON..= productFeatureLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "product_feature"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["entitlement_feature" Data.Aeson.Types.ToJSON..= productFeatureEntitlementFeature obj] : ["id" Data.Aeson.Types.ToJSON..= productFeatureId obj] : ["livemode" Data.Aeson.Types.ToJSON..= productFeatureLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "product_feature"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON ProductFeature
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "ProductFeature" (\obj -> ((GHC.Base.pure ProductFeature GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "entitlement_feature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode"))}
-- | Create a new 'ProductFeature' with all required fields.
mkProductFeature :: Entitlements'feature -- ^ 'productFeatureEntitlementFeature'
  -> Data.Text.Internal.Text -- ^ 'productFeatureId'
  -> GHC.Types.Bool -- ^ 'productFeatureLivemode'
  -> ProductFeature
mkProductFeature productFeatureEntitlementFeature productFeatureId productFeatureLivemode = ProductFeature{productFeatureEntitlementFeature = productFeatureEntitlementFeature,
                                                                                                           productFeatureId = productFeatureId,
                                                                                                           productFeatureLivemode = productFeatureLivemode}
