-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Sigma_SigmaApiQuery
module StripeAPI.Types.Sigma_SigmaApiQuery where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.sigma.sigma_api_query@ in the specification.
-- 
-- A saved query object represents a query that can be executed for a run.
data Sigma'sigmaApiQuery = Sigma'sigmaApiQuery {
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  sigma'sigmaApiQueryCreated :: GHC.Types.Int
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , sigma'sigmaApiQueryId :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , sigma'sigmaApiQueryLivemode :: GHC.Types.Bool
  -- | name: The name of the query.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , sigma'sigmaApiQueryName :: Data.Text.Internal.Text
  -- | sql: The sql statement for the query.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , sigma'sigmaApiQuerySql :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Sigma'sigmaApiQuery
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryCreated obj] : ["id" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryId obj] : ["livemode" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryLivemode obj] : ["name" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryName obj] : ["sql" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQuerySql obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "sigma.sigma_api_query"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryCreated obj] : ["id" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryId obj] : ["livemode" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryLivemode obj] : ["name" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQueryName obj] : ["sql" Data.Aeson.Types.ToJSON..= sigma'sigmaApiQuerySql obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "sigma.sigma_api_query"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Sigma'sigmaApiQuery
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Sigma'sigmaApiQuery" (\obj -> ((((GHC.Base.pure Sigma'sigmaApiQuery GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sql"))}
-- | Create a new 'Sigma'sigmaApiQuery' with all required fields.
mkSigma'sigmaApiQuery :: GHC.Types.Int -- ^ 'sigma'sigmaApiQueryCreated'
  -> Data.Text.Internal.Text -- ^ 'sigma'sigmaApiQueryId'
  -> GHC.Types.Bool -- ^ 'sigma'sigmaApiQueryLivemode'
  -> Data.Text.Internal.Text -- ^ 'sigma'sigmaApiQueryName'
  -> Data.Text.Internal.Text -- ^ 'sigma'sigmaApiQuerySql'
  -> Sigma'sigmaApiQuery
mkSigma'sigmaApiQuery sigma'sigmaApiQueryCreated sigma'sigmaApiQueryId sigma'sigmaApiQueryLivemode sigma'sigmaApiQueryName sigma'sigmaApiQuerySql = Sigma'sigmaApiQuery{sigma'sigmaApiQueryCreated = sigma'sigmaApiQueryCreated,
                                                                                                                                                                        sigma'sigmaApiQueryId = sigma'sigmaApiQueryId,
                                                                                                                                                                        sigma'sigmaApiQueryLivemode = sigma'sigmaApiQueryLivemode,
                                                                                                                                                                        sigma'sigmaApiQueryName = sigma'sigmaApiQueryName,
                                                                                                                                                                        sigma'sigmaApiQuerySql = sigma'sigmaApiQuerySql}
