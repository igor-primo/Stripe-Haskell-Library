-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TaxProductResourceTaxRateDetails
module StripeAPI.Types.TaxProductResourceTaxRateDetails where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TaxRateFlatAmount

-- | Defines the object schema located at @components.schemas.tax_product_resource_tax_rate_details@ in the specification.
-- 
-- 
data TaxProductResourceTaxRateDetails = TaxProductResourceTaxRateDetails {
  -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  taxProductResourceTaxRateDetailsCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | flat_amount: The amount of the tax rate when the \`rate_type\` is \`flat_amount\`. Tax rates with \`rate_type\` \`percentage\` can vary based on the transaction, resulting in this field being \`null\`. This field exposes the amount and currency of the flat tax rate.
  , taxProductResourceTaxRateDetailsFlatAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable TaxProductResourceTaxRateDetailsFlatAmount'NonNullable))
  -- | percentage_decimal: The tax rate percentage as a string. For example, 8.5% is represented as \`\"8.5\"\`.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , taxProductResourceTaxRateDetailsPercentageDecimal :: Data.Text.Internal.Text
  -- | rate_type: Indicates the type of tax rate applied to the taxable amount. This value can be \`null\` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.
  , taxProductResourceTaxRateDetailsRateType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable TaxProductResourceTaxRateDetailsRateType'NonNullable))
  -- | state: State, county, province, or region.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , taxProductResourceTaxRateDetailsState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | tax_type: The tax type, such as \`vat\` or \`sales_tax\`.
  , taxProductResourceTaxRateDetailsTaxType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable TaxProductResourceTaxRateDetailsTaxType'NonNullable))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxRateDetails
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flat_amount" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsFlatAmount obj) : ["percentage_decimal" Data.Aeson.Types.ToJSON..= taxProductResourceTaxRateDetailsPercentageDecimal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rate_type" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsRateType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_type" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsTaxType obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flat_amount" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsFlatAmount obj) : ["percentage_decimal" Data.Aeson.Types.ToJSON..= taxProductResourceTaxRateDetailsPercentageDecimal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rate_type" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsRateType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_type" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsTaxType obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxRateDetails
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceTaxRateDetails" (\obj -> (((((GHC.Base.pure TaxProductResourceTaxRateDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flat_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "percentage_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "rate_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_type"))}
-- | Create a new 'TaxProductResourceTaxRateDetails' with all required fields.
mkTaxProductResourceTaxRateDetails :: Data.Text.Internal.Text -- ^ 'taxProductResourceTaxRateDetailsPercentageDecimal'
  -> TaxProductResourceTaxRateDetails
mkTaxProductResourceTaxRateDetails taxProductResourceTaxRateDetailsPercentageDecimal = TaxProductResourceTaxRateDetails{taxProductResourceTaxRateDetailsCountry = GHC.Maybe.Nothing,
                                                                                                                        taxProductResourceTaxRateDetailsFlatAmount = GHC.Maybe.Nothing,
                                                                                                                        taxProductResourceTaxRateDetailsPercentageDecimal = taxProductResourceTaxRateDetailsPercentageDecimal,
                                                                                                                        taxProductResourceTaxRateDetailsRateType = GHC.Maybe.Nothing,
                                                                                                                        taxProductResourceTaxRateDetailsState = GHC.Maybe.Nothing,
                                                                                                                        taxProductResourceTaxRateDetailsTaxType = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.tax_product_resource_tax_rate_details.properties.flat_amount.anyOf@ in the specification.
-- 
-- The amount of the tax rate when the \\\`rate_type\\\` is \\\`flat_amount\\\`. Tax rates with \\\`rate_type\\\` \\\`percentage\\\` can vary based on the transaction, resulting in this field being \\\`null\\\`. This field exposes the amount and currency of the flat tax rate.
data TaxProductResourceTaxRateDetailsFlatAmount'NonNullable = TaxProductResourceTaxRateDetailsFlatAmount'NonNullable {
  -- | amount: Amount of the tax when the \`rate_type\` is \`flat_amount\`. This positive integer represents how much to charge in the smallest currency unit (e.g., 100 cents to charge \$1.00 or 100 to charge Â¥100, a zero-decimal currency). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of \$999,999.99).
  taxProductResourceTaxRateDetailsFlatAmount'NonNullableAmount :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | currency: Three-letter ISO currency code, in lowercase.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , taxProductResourceTaxRateDetailsFlatAmount'NonNullableCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxRateDetailsFlatAmount'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsFlatAmount'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsFlatAmount'NonNullableCurrency obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsFlatAmount'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxRateDetailsFlatAmount'NonNullableCurrency obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxRateDetailsFlatAmount'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceTaxRateDetailsFlatAmount'NonNullable" (\obj -> (GHC.Base.pure TaxProductResourceTaxRateDetailsFlatAmount'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency"))}
-- | Create a new 'TaxProductResourceTaxRateDetailsFlatAmount'NonNullable' with all required fields.
mkTaxProductResourceTaxRateDetailsFlatAmount'NonNullable :: TaxProductResourceTaxRateDetailsFlatAmount'NonNullable
mkTaxProductResourceTaxRateDetailsFlatAmount'NonNullable = TaxProductResourceTaxRateDetailsFlatAmount'NonNullable{taxProductResourceTaxRateDetailsFlatAmount'NonNullableAmount = GHC.Maybe.Nothing,
                                                                                                                  taxProductResourceTaxRateDetailsFlatAmount'NonNullableCurrency = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.tax_product_resource_tax_rate_details.properties.rate_type@ in the specification.
-- 
-- Indicates the type of tax rate applied to the taxable amount. This value can be \`null\` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.
data TaxProductResourceTaxRateDetailsRateType'NonNullable =
   TaxProductResourceTaxRateDetailsRateType'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TaxProductResourceTaxRateDetailsRateType'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TaxProductResourceTaxRateDetailsRateType'NonNullableEnumFlatAmount -- ^ Represents the JSON value @"flat_amount"@
  | TaxProductResourceTaxRateDetailsRateType'NonNullableEnumPercentage -- ^ Represents the JSON value @"percentage"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxRateDetailsRateType'NonNullable
    where {toJSON (TaxProductResourceTaxRateDetailsRateType'NonNullableOther val) = val;
           toJSON (TaxProductResourceTaxRateDetailsRateType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (TaxProductResourceTaxRateDetailsRateType'NonNullableEnumFlatAmount) = "flat_amount";
           toJSON (TaxProductResourceTaxRateDetailsRateType'NonNullableEnumPercentage) = "percentage"}
instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxRateDetailsRateType'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "flat_amount" -> TaxProductResourceTaxRateDetailsRateType'NonNullableEnumFlatAmount
                                             | val GHC.Classes.== "percentage" -> TaxProductResourceTaxRateDetailsRateType'NonNullableEnumPercentage
                                             | GHC.Base.otherwise -> TaxProductResourceTaxRateDetailsRateType'NonNullableOther val)}
-- | Defines the enum schema located at @components.schemas.tax_product_resource_tax_rate_details.properties.tax_type@ in the specification.
-- 
-- The tax type, such as \`vat\` or \`sales_tax\`.
data TaxProductResourceTaxRateDetailsTaxType'NonNullable =
   TaxProductResourceTaxRateDetailsTaxType'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumAmusementTax -- ^ Represents the JSON value @"amusement_tax"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumCommunicationsTax -- ^ Represents the JSON value @"communications_tax"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumGst -- ^ Represents the JSON value @"gst"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumHst -- ^ Represents the JSON value @"hst"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumIgst -- ^ Represents the JSON value @"igst"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumJct -- ^ Represents the JSON value @"jct"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumLeaseTax -- ^ Represents the JSON value @"lease_tax"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumPst -- ^ Represents the JSON value @"pst"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumQst -- ^ Represents the JSON value @"qst"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumRetailDeliveryFee -- ^ Represents the JSON value @"retail_delivery_fee"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumRst -- ^ Represents the JSON value @"rst"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumSalesTax -- ^ Represents the JSON value @"sales_tax"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumServiceTax -- ^ Represents the JSON value @"service_tax"@
  | TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumVat -- ^ Represents the JSON value @"vat"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxRateDetailsTaxType'NonNullable
    where {toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableOther val) = val;
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumAmusementTax) = "amusement_tax";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumCommunicationsTax) = "communications_tax";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumGst) = "gst";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumHst) = "hst";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumIgst) = "igst";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumJct) = "jct";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumLeaseTax) = "lease_tax";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumPst) = "pst";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumQst) = "qst";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumRetailDeliveryFee) = "retail_delivery_fee";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumRst) = "rst";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumSalesTax) = "sales_tax";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumServiceTax) = "service_tax";
           toJSON (TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumVat) = "vat"}
instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxRateDetailsTaxType'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "amusement_tax" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumAmusementTax
                                             | val GHC.Classes.== "communications_tax" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumCommunicationsTax
                                             | val GHC.Classes.== "gst" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumGst
                                             | val GHC.Classes.== "hst" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumHst
                                             | val GHC.Classes.== "igst" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumIgst
                                             | val GHC.Classes.== "jct" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumJct
                                             | val GHC.Classes.== "lease_tax" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumLeaseTax
                                             | val GHC.Classes.== "pst" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumPst
                                             | val GHC.Classes.== "qst" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumQst
                                             | val GHC.Classes.== "retail_delivery_fee" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumRetailDeliveryFee
                                             | val GHC.Classes.== "rst" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumRst
                                             | val GHC.Classes.== "sales_tax" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumSalesTax
                                             | val GHC.Classes.== "service_tax" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumServiceTax
                                             | val GHC.Classes.== "vat" -> TaxProductResourceTaxRateDetailsTaxType'NonNullableEnumVat
                                             | GHC.Base.otherwise -> TaxProductResourceTaxRateDetailsTaxType'NonNullableOther val)}
