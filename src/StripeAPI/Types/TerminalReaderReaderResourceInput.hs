-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TerminalReaderReaderResourceInput
module StripeAPI.Types.TerminalReaderReaderResourceInput where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourceCustomText
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourceEmail
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourceNumeric
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourcePhone
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourceSelection
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourceSignature
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourceText
import {-# SOURCE #-} StripeAPI.Types.TerminalReaderReaderResourceToggle

-- | Defines the object schema located at @components.schemas.terminal_reader_reader_resource_input@ in the specification.
-- 
-- Represents an input to be collected using the reader
data TerminalReaderReaderResourceInput = TerminalReaderReaderResourceInput {
  -- | custom_text: Default text of input being collected.
  terminalReaderReaderResourceInputCustomText :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable TerminalReaderReaderResourceInputCustomText'NonNullable))
  -- | email: Information about a email being collected using a reader
  , terminalReaderReaderResourceInputEmail :: (GHC.Maybe.Maybe TerminalReaderReaderResourceEmail)
  -- | numeric: Information about a number being collected using a reader
  , terminalReaderReaderResourceInputNumeric :: (GHC.Maybe.Maybe TerminalReaderReaderResourceNumeric)
  -- | phone: Information about a phone number being collected using a reader
  , terminalReaderReaderResourceInputPhone :: (GHC.Maybe.Maybe TerminalReaderReaderResourcePhone)
  -- | required: Indicate that this input is required, disabling the skip button.
  , terminalReaderReaderResourceInputRequired :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool))
  -- | selection: Information about a selection being collected using a reader
  , terminalReaderReaderResourceInputSelection :: (GHC.Maybe.Maybe TerminalReaderReaderResourceSelection)
  -- | signature: Information about a signature being collected using a reader
  , terminalReaderReaderResourceInputSignature :: (GHC.Maybe.Maybe TerminalReaderReaderResourceSignature)
  -- | skipped: Indicate that this input was skipped by the user.
  , terminalReaderReaderResourceInputSkipped :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | text: Information about text being collected using a reader
  , terminalReaderReaderResourceInputText :: (GHC.Maybe.Maybe TerminalReaderReaderResourceText)
  -- | toggles: List of toggles being collected. Values are present if collection is complete.
  , terminalReaderReaderResourceInputToggles :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [TerminalReaderReaderResourceToggle]))
  -- | type: Type of input being collected.
  , terminalReaderReaderResourceInputType :: TerminalReaderReaderResourceInputType'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TerminalReaderReaderResourceInput
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_text" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("numeric" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputNumeric obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputPhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("required" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selection" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputSelection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signature" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputSignature obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skipped" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputSkipped obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("toggles" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputToggles obj) : ["type" Data.Aeson.Types.ToJSON..= terminalReaderReaderResourceInputType obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_text" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("numeric" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputNumeric obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputPhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("required" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selection" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputSelection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signature" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputSignature obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skipped" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputSkipped obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("toggles" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputToggles obj) : ["type" Data.Aeson.Types.ToJSON..= terminalReaderReaderResourceInputType obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON TerminalReaderReaderResourceInput
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "TerminalReaderReaderResourceInput" (\obj -> ((((((((((GHC.Base.pure TerminalReaderReaderResourceInput GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "custom_text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "numeric")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "required")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "selection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "signature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skipped")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "toggles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))}
-- | Create a new 'TerminalReaderReaderResourceInput' with all required fields.
mkTerminalReaderReaderResourceInput :: TerminalReaderReaderResourceInputType' -- ^ 'terminalReaderReaderResourceInputType'
  -> TerminalReaderReaderResourceInput
mkTerminalReaderReaderResourceInput terminalReaderReaderResourceInputType = TerminalReaderReaderResourceInput{terminalReaderReaderResourceInputCustomText = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputEmail = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputNumeric = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputPhone = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputRequired = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputSelection = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputSignature = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputSkipped = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputText = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputToggles = GHC.Maybe.Nothing,
                                                                                                              terminalReaderReaderResourceInputType = terminalReaderReaderResourceInputType}
-- | Defines the object schema located at @components.schemas.terminal_reader_reader_resource_input.properties.custom_text.anyOf@ in the specification.
-- 
-- Default text of input being collected.
data TerminalReaderReaderResourceInputCustomText'NonNullable = TerminalReaderReaderResourceInputCustomText'NonNullable {
  -- | description: Customize the default description for this input
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  terminalReaderReaderResourceInputCustomText'NonNullableDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | skip_button: Customize the default label for this input\'s skip button
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , terminalReaderReaderResourceInputCustomText'NonNullableSkipButton :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | submit_button: Customize the default label for this input\'s submit button
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , terminalReaderReaderResourceInputCustomText'NonNullableSubmitButton :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | title: Customize the default title for this input
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , terminalReaderReaderResourceInputCustomText'NonNullableTitle :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TerminalReaderReaderResourceInputCustomText'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_button" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableSkipButton obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("submit_button" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableSubmitButton obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("title" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableTitle obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_button" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableSkipButton obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("submit_button" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableSubmitButton obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("title" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceInputCustomText'NonNullableTitle obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON TerminalReaderReaderResourceInputCustomText'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "TerminalReaderReaderResourceInputCustomText'NonNullable" (\obj -> (((GHC.Base.pure TerminalReaderReaderResourceInputCustomText'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skip_button")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "submit_button")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "title"))}
-- | Create a new 'TerminalReaderReaderResourceInputCustomText'NonNullable' with all required fields.
mkTerminalReaderReaderResourceInputCustomText'NonNullable :: TerminalReaderReaderResourceInputCustomText'NonNullable
mkTerminalReaderReaderResourceInputCustomText'NonNullable = TerminalReaderReaderResourceInputCustomText'NonNullable{terminalReaderReaderResourceInputCustomText'NonNullableDescription = GHC.Maybe.Nothing,
                                                                                                                    terminalReaderReaderResourceInputCustomText'NonNullableSkipButton = GHC.Maybe.Nothing,
                                                                                                                    terminalReaderReaderResourceInputCustomText'NonNullableSubmitButton = GHC.Maybe.Nothing,
                                                                                                                    terminalReaderReaderResourceInputCustomText'NonNullableTitle = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.terminal_reader_reader_resource_input.properties.type@ in the specification.
-- 
-- Type of input being collected.
data TerminalReaderReaderResourceInputType' =
   TerminalReaderReaderResourceInputType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TerminalReaderReaderResourceInputType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TerminalReaderReaderResourceInputType'EnumEmail -- ^ Represents the JSON value @"email"@
  | TerminalReaderReaderResourceInputType'EnumNumeric -- ^ Represents the JSON value @"numeric"@
  | TerminalReaderReaderResourceInputType'EnumPhone -- ^ Represents the JSON value @"phone"@
  | TerminalReaderReaderResourceInputType'EnumSelection -- ^ Represents the JSON value @"selection"@
  | TerminalReaderReaderResourceInputType'EnumSignature -- ^ Represents the JSON value @"signature"@
  | TerminalReaderReaderResourceInputType'EnumText -- ^ Represents the JSON value @"text"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TerminalReaderReaderResourceInputType'
    where {toJSON (TerminalReaderReaderResourceInputType'Other val) = val;
           toJSON (TerminalReaderReaderResourceInputType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (TerminalReaderReaderResourceInputType'EnumEmail) = "email";
           toJSON (TerminalReaderReaderResourceInputType'EnumNumeric) = "numeric";
           toJSON (TerminalReaderReaderResourceInputType'EnumPhone) = "phone";
           toJSON (TerminalReaderReaderResourceInputType'EnumSelection) = "selection";
           toJSON (TerminalReaderReaderResourceInputType'EnumSignature) = "signature";
           toJSON (TerminalReaderReaderResourceInputType'EnumText) = "text"}
instance Data.Aeson.Types.FromJSON.FromJSON TerminalReaderReaderResourceInputType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "email" -> TerminalReaderReaderResourceInputType'EnumEmail
                                             | val GHC.Classes.== "numeric" -> TerminalReaderReaderResourceInputType'EnumNumeric
                                             | val GHC.Classes.== "phone" -> TerminalReaderReaderResourceInputType'EnumPhone
                                             | val GHC.Classes.== "selection" -> TerminalReaderReaderResourceInputType'EnumSelection
                                             | val GHC.Classes.== "signature" -> TerminalReaderReaderResourceInputType'EnumSignature
                                             | val GHC.Classes.== "text" -> TerminalReaderReaderResourceInputType'EnumText
                                             | GHC.Base.otherwise -> TerminalReaderReaderResourceInputType'Other val)}
