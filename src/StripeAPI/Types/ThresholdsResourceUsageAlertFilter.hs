-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ThresholdsResourceUsageAlertFilter
module StripeAPI.Types.ThresholdsResourceUsageAlertFilter where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Customer

-- | Defines the object schema located at @components.schemas.thresholds_resource_usage_alert_filter@ in the specification.
-- 
-- 
data ThresholdsResourceUsageAlertFilter = ThresholdsResourceUsageAlertFilter {
  -- | customer: Limit the scope of the alert to this customer ID
  thresholdsResourceUsageAlertFilterCustomer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ThresholdsResourceUsageAlertFilterCustomer'NonNullableVariants))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ThresholdsResourceUsageAlertFilter
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (thresholdsResourceUsageAlertFilterCustomer obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "customer"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (thresholdsResourceUsageAlertFilterCustomer obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "customer"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON ThresholdsResourceUsageAlertFilter
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "ThresholdsResourceUsageAlertFilter" (\obj -> GHC.Base.pure ThresholdsResourceUsageAlertFilter GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer"))}
-- | Create a new 'ThresholdsResourceUsageAlertFilter' with all required fields.
mkThresholdsResourceUsageAlertFilter :: ThresholdsResourceUsageAlertFilter
mkThresholdsResourceUsageAlertFilter = ThresholdsResourceUsageAlertFilter{thresholdsResourceUsageAlertFilterCustomer = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.thresholds_resource_usage_alert_filter.properties.customer.anyOf@ in the specification.
-- 
-- Limit the scope of the alert to this customer ID
data ThresholdsResourceUsageAlertFilterCustomer'NonNullableVariants =
   ThresholdsResourceUsageAlertFilterCustomer'NonNullableText Data.Text.Internal.Text
  | ThresholdsResourceUsageAlertFilterCustomer'NonNullableCustomer Customer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ThresholdsResourceUsageAlertFilterCustomer'NonNullableVariants
    where {toJSON (ThresholdsResourceUsageAlertFilterCustomer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (ThresholdsResourceUsageAlertFilterCustomer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON ThresholdsResourceUsageAlertFilterCustomer'NonNullableVariants
    where {parseJSON val = case (ThresholdsResourceUsageAlertFilterCustomer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ThresholdsResourceUsageAlertFilterCustomer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
