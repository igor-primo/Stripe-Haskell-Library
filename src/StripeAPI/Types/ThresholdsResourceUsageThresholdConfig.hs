-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ThresholdsResourceUsageThresholdConfig
module StripeAPI.Types.ThresholdsResourceUsageThresholdConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Billing_Meter
import {-# SOURCE #-} StripeAPI.Types.ThresholdsResourceUsageAlertFilter

-- | Defines the object schema located at @components.schemas.thresholds_resource_usage_threshold_config@ in the specification.
-- 
-- The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed.
data ThresholdsResourceUsageThresholdConfig = ThresholdsResourceUsageThresholdConfig {
  -- | filters: The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time.
  thresholdsResourceUsageThresholdConfigFilters :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [ThresholdsResourceUsageAlertFilter]))
  -- | gte: The value at which this alert will trigger.
  , thresholdsResourceUsageThresholdConfigGte :: GHC.Types.Int
  -- | meter: The [Billing Meter](\/api\/billing\/meter) ID whose usage is monitored.
  , thresholdsResourceUsageThresholdConfigMeter :: ThresholdsResourceUsageThresholdConfigMeter'Variants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ThresholdsResourceUsageThresholdConfig
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (thresholdsResourceUsageThresholdConfigFilters obj) : ["gte" Data.Aeson.Types.ToJSON..= thresholdsResourceUsageThresholdConfigGte obj] : ["meter" Data.Aeson.Types.ToJSON..= thresholdsResourceUsageThresholdConfigMeter obj] : ["recurrence" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "one_time"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (thresholdsResourceUsageThresholdConfigFilters obj) : ["gte" Data.Aeson.Types.ToJSON..= thresholdsResourceUsageThresholdConfigGte obj] : ["meter" Data.Aeson.Types.ToJSON..= thresholdsResourceUsageThresholdConfigMeter obj] : ["recurrence" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "one_time"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON ThresholdsResourceUsageThresholdConfig
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "ThresholdsResourceUsageThresholdConfig" (\obj -> ((GHC.Base.pure ThresholdsResourceUsageThresholdConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meter"))}
-- | Create a new 'ThresholdsResourceUsageThresholdConfig' with all required fields.
mkThresholdsResourceUsageThresholdConfig :: GHC.Types.Int -- ^ 'thresholdsResourceUsageThresholdConfigGte'
  -> ThresholdsResourceUsageThresholdConfigMeter'Variants -- ^ 'thresholdsResourceUsageThresholdConfigMeter'
  -> ThresholdsResourceUsageThresholdConfig
mkThresholdsResourceUsageThresholdConfig thresholdsResourceUsageThresholdConfigGte thresholdsResourceUsageThresholdConfigMeter = ThresholdsResourceUsageThresholdConfig{thresholdsResourceUsageThresholdConfigFilters = GHC.Maybe.Nothing,
                                                                                                                                                                        thresholdsResourceUsageThresholdConfigGte = thresholdsResourceUsageThresholdConfigGte,
                                                                                                                                                                        thresholdsResourceUsageThresholdConfigMeter = thresholdsResourceUsageThresholdConfigMeter}
-- | Defines the oneOf schema located at @components.schemas.thresholds_resource_usage_threshold_config.properties.meter.anyOf@ in the specification.
-- 
-- The [Billing Meter](\/api\/billing\/meter) ID whose usage is monitored.
data ThresholdsResourceUsageThresholdConfigMeter'Variants =
   ThresholdsResourceUsageThresholdConfigMeter'Text Data.Text.Internal.Text
  | ThresholdsResourceUsageThresholdConfigMeter'Billing'meter Billing'meter
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ThresholdsResourceUsageThresholdConfigMeter'Variants
    where {toJSON (ThresholdsResourceUsageThresholdConfigMeter'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (ThresholdsResourceUsageThresholdConfigMeter'Billing'meter a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON ThresholdsResourceUsageThresholdConfigMeter'Variants
    where {parseJSON val = case (ThresholdsResourceUsageThresholdConfigMeter'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ThresholdsResourceUsageThresholdConfigMeter'Billing'meter Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
